{"version":3,"sources":["data/creatures.js","data/Traits.js","config.js","debugging.js","character.js","engine/CharacterCombatState.js","engine/index.js","combatResult.js","data/Regions.js","data/Actions.js","components/scene/ReincarnationSelectionPage.js","components/charactersheet/PowerLevelDisplay.js","components/charactersheet/CharacterAttributes.js","components/charactersheet/CharacterTraits.js","components/CharacterSheet.js","components/PlayerStats.js","components/TopSection.js","components/BottomSection.js","components/EnemySidebar.js","components/scene/AdventuringPage.js","components/DebugUi.js","components/scene/SplashPage.js","App.js","reportWebVitals.js","index.js"],"names":["Creatures","bloodthirstyKnight","name","traits","appearance","texture","description","rapaciousHighwayman","enabled","condemnedSlasher","crushingSnake","skitteringHorror","deadlyHornet","assertCreatureExists","id","Error","Traits","bloodrage","icon","_","on_hitting","conditions","health_percentage","target","below","effects","damage_modifier","percent","cupidity","on_intimidate","chance","steal_item_chance","murderousFrenzy","add_modifier","speed","duration","rounds","inescapableGrasp","terrifyingSkitter","on_combat_start","stunned","piercingStrike","defense_modifier","getTrait","traitId","console","log","process","REACT_APP_DEBUG_MODE","config","manualSpeedup","multiplier","artifacts","REACT_APP_FEATURE_ARTIFACTS_ENABLED","actionLog","maxSize","REACT_APP_MAX_ACTIONLOG_SIZE","encounters","lesserLevelScale","greaterLevelScale","characters","player","attributesPerLevel","mechanics","xpFromGreaterDemon","levelToPowerEquation","powerToLevelEquation","latentPowerGainOnReincarnate","maxLevel","accuracy","baseAttribute","attributeBonusScale","defense","evasion","attackDamage","pointsPerLevel","traitRank","fatigue","evasionPenaltyPerPoint","hp","healingPerLevel","attributes","brutality","label","globalScaling","cunning","deceit","madness","combat","attributeDamageModifier","defaultMinimumDamageMultiplier","defaultMedianDamageMultiplier","defaultMaximumDamageMultiplier","baseMinimumDamageWeight","baseMedianDamageWeight","baseMaximumDamageWeight","debug","debugMessage","apply","arguments","Character","props","this","_isPc","isPc","_name","_absorbedPower","Decimal","absorbedPower","_latentPower","latentPower","_currentHp","maximumHp","_attributes","Attributes","_combat","CombatStats","_traits","Object","keys","reduce","transformed","next","_appearance","_modifiers","modifiers","newAppearance","newTraits","other","greaterDemonScale","evaluateExpression","enemy","powerLevel","gte","plus","lesserDemonScale","lte","minus","powerGained","times","div","floor","getLevelForPower","gt","getPowerNeededForLevel","forEach","trait","modifier","push","newHealth","lt","currentHp","newLatentPower","mul","value","character","_brutality","_cunning","_deceit","_madness","defineProperty","latentPowerMultiplier","calculateDamage","hitTypeDamageMultiplier","attributeScore","effectivePowerLevel","attributeModifier","ceil","CharacterCombatState","party","_speed","_fatigue","lastActed","baseSpeed","currentValue","canAct","nextModifier","undefined","saveKey","require","Package","expressionCache","makeAttackRoll","actingCharacter","combatState","rng","attackAccuracy","targetEvasion","getCharacter","combatantCombatStats","toFixed","roll","Math","double","rawRoll","total","globalState","loadGlobalState","getGlobalState","saveGlobalState","window","localStorage","setItem","JSON","stringify","state","loaded","getItem","parse","stateReviver","creatures","regions","passivePowerIncome","unlockedMonsters","paused","currentAction","nextAction","highestLevelReached","startingTraits","currentEncounter","manualSpeedMultiplier","currentRegion","exploration","explorationTime","approachTime","combatTime","lootingTime","recoveryTime","fleeingTime","intimidateTime","reincarnationTime","0","statuses","items","minimumDamageMultiplier","medianDamageMultiplier","maximumDamageMultiplier","tutorials","assertCharacterExists","nextMonsterId","getSpriteForCreature","resolveHit","tick","combatResult","targetCharacter","damageToInflict","damageRoll","minimumDamage","medianDamage","maximumDamage","attackResult","baseDamage","attackerDamageMultiplier","targetDefenseMultiplier","otherEffects","applyTrait","attack","damageFactor","max","finalDamage","map","effect","event","source","join","attackingCharacterId","targetCharacterId","damageDone","uuid","v4","result","actor","generateHitCombatResult","resolveMiss","generateMissCombatResult","resolveSkippedAction","actingCharacterId","generateSkipActionResult","sourceCharacter","rank","rankModifier","min","every","condition","targetPercent","targetCurrentHealth","targetMaxHealth","currentHealthPercent","conditionMet","chanceToTrigger","$rank","traitEffect","percentDamageModifier","newMultiplier","defenseModifier","modifierToAddDefinition","effectType","effectTarget","roundDuration","ability","filter","combatantId","existingEffect","find","expression","context","Function","call","level","$level","powerPoints","$powerPoints","key","all","parsed","Number","parseFloat","isNaN","Region","available","background","candidateMinimumLevel","minimumLevel","candidateMaxLevel","maximumLevel","encounterLevelModifier","toNumber","encounterLevel","encounterDef","region","possibleEncounters","encounterId","encounterEnabled","debugNotDisabled","randomKey","random","length","chooseRandomEncounter","pendingActions","enemies","flatMap","enemyDef","count","i","nextId","pow","generateCreature","Regions","forest","type","far","mid","close","caves","mountains","desert","Actions","exploring","approaching","looting","fleeing","fighting","reincarnating","recovering","intimidating","ReincarnationSelectionPage","useRef","history","useHistory","currentCreature","useState","substring","setAttributes","spendableBonusPoints","useEffect","Grid","container","item","xs","style","textAlign","current","concat","currentStartingRank","combinedLevel","Tooltip","title","dangerouslySetInnerHTML","__html","src","attribute","Button","disabled","eq","values","x","onClick","alignItems","justify","creatureEnabled","debugEnabled","variant","height","width","reincarnate","PowerLevelDisplay","powerLevelDisplay","useMemo","Fragment","CharacterAttributes","Help","CharacterTraits","CharacterSheet","spriteSrc","combinedHitWeights","minimumDamageWeight","medianDamageWeight","maximumDamageWeight","powerRequiredForCurrentLevel","powerNeededForNextLevel","progressToNextLevel","styles","root","backgroundColor","PlayerStats","Paper","elevation","display","flex","buttons","TopSection","reincarnateEnabled","color","justifyContent","flexDirection","actions","alignSelf","action","maxHeight","actionProgress","overflowY","BottomSection","onMouseEnter","startManualSpeedup","onMouseLeave","stopManualSpeedup","togglePause","actionButton","actionTime","message","direction","describeEffect","printActionItem","mod","percentModifier","text","setNextAction","nextActionName","EnemySidebar","overflow","image","position","left","AdventuringPage","className","zIndex","newAction","minHeight","bottom","padding","DebugUi","setCreatures","setRegions","minLevel","setMinLevel","setMaxLevel","setManualSpeedMultiplier","playerAbsorbedPower","setPlayerAbsorbedPower","removeItem","alert","TextField","onChange","e","newValue","parseInt","regionId","pkg","changelog","SplashPage","version","entry","lastTime","seedrandom","changeCurrentAction","pushLogItem","pop","unshift","App","setCurrentEncounter","accruedTime","manualSpeedUpActive","displayedTime","setDisplayedTime","setCurrentAction","setActionLog","debugUiEnabled","setDebugUiEnabled","setPaused","useHotkeys","applyAction","isDamaged","shift","enemyIsLesserDemon","otherDemonIsLesserDemon","powerToGain","wrapLogItem","gainPower","addModifier","magnitude","requestAnimationFrame","timestamp","startEncounter","actionSoFar","nextEnemy","otherDemonIsGreaterDemon","definition","listeners","winner","notifyListener","listener","a","combatants","parties","partyIndex","characterIndex","combatant","otherCombatant","resolveRound","sort","b","initiativeCount","wrapped","isAlive","alive","characterSpeed","acting","enemyParty","livingEnemies","attackRollResult","playerPartyDead","enemyPartyDead","setTimeout","onRoundResolved","getPrevious","resolveCombat","lastRound","c","chanceToIntimidate","periodicPowerIncreases","$enemy","amountToHeal","healing","adjustedTime","debugMultiplier","baseMultiplier","getManualSpeedMultiplier","initialEntries","basename","path","exact","monster","monsterId","newAttributes","currentDemon","options","m","latentPowerGain","reincarnateAs","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34680c58.chunk.js","sourcesContent":["export const Creatures  = {\r\n    bloodthirstyKnight: {\r\n        name: \"Bloodthirsty Knight\",\r\n        traits: [\"bloodrage\"],\r\n        appearance: \"bloodthirstyKnight\",\r\n        texture: \"01_warrior.png\",\r\n        description: \"A ruthless warrior who delighted in slaughtering whoever they encounter on the battlefield.\",\r\n    },\r\n    rapaciousHighwayman: {\r\n        name: \"Rapacious Highwayman\",\r\n        traits: [\"cupidity\"],\r\n        enabled: false,\r\n        appearance: \"rapaciousHighwayman\",\r\n        texture: \"02_hunter.png\",\r\n        description: \"A thief who stole from whomever he could get away with, from wealthy merchants to starving vagrants.\",\r\n    },\r\n    condemnedSlasher: {\r\n        name: \"Condemned Slasher\",\r\n        traits: [\"murderousFrenzy\"],\r\n        appearance: \"condemnedSlasher\",\r\n        texture: \"03_rogue.png\",\r\n        description: \"A madman who gained exquisite pleasure from seeing how many cuts could be made in a victim's body before they died.\",\r\n    },\r\n    crushingSnake: {\r\n        name: \"Crushing Snake\",\r\n        traits: [\"inescapableGrasp\"],\r\n        appearance: \"crushingSnake\",\r\n        texture: \"06_snake_01.png\",\r\n        description: \"A monstrous reptile which\",\r\n    },\r\n    skitteringHorror: {\r\n        name: \"Skittering Horror\",\r\n        traits: [\"terrifyingSkitter\"],\r\n        appearance: \"skitteringHorror\",\r\n        texture: \"10_spider.png\",\r\n        description: \"A massive spider that enjoys stalking its prey, frightening it by the sickening skittering of it's arachnid legs.\"\r\n    },\r\n    deadlyHornet: {\r\n        name: \"Deadly Hornet\",\r\n        traits: [\"piercingStrike\"],\r\n        appearance: \"deadlyHornet\",\r\n        texture: \"12_wasp.png\",\r\n        description: \"An insect whose stinger is able to pierce even metal protection.\"\r\n    }\r\n}\r\n\r\nexport function assertCreatureExists(id) {\r\n    if(!Creatures[id]) {\r\n        throw new Error(`No creature with id ${id} is defined`);\r\n    }\r\n}","import * as _ from \"lodash\";\r\n// FIXME: Implement validation\r\nexport const Traits = {\r\n    bloodrage: {\r\n        name: \"Blood Rage\",\r\n        icon: \"icons/icons-139.png\",\r\n        description: _.template(\"This demon's unquenchable thirst for blood gives a <span style='color: red'>${rank.times(25)}%</span> bonus to Damage against enemies with <span style='color: red'>25% or less</span> health.\"),\r\n        on_hitting: {\r\n            conditions : {\r\n                health_percentage: {\r\n                    target: \"target\",\r\n                    below: 25\r\n                }\r\n            },\r\n            effects: {\r\n                damage_modifier: {\r\n                    percent: \"$rank.times(25)\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    cupidity: {\r\n        name: \"Cupidity\",\r\n        icon: \"icons/icons-2503.png\",\r\n        description: _.template(\"When this demon successfully Intimidates another demon, it gains a <span style='color: red'>${rank}%</span> chance to seize the intimidated demon's Artifacts as though it were killed.\"),\r\n        on_intimidate: {\r\n            conditions: {\r\n                chance: \"$rank\"\r\n            },\r\n            effects: {\r\n                steal_item_chance: {\r\n                    target: \"enemies\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    murderousFrenzy: {\r\n        name: \"Murderous Frenzy\",\r\n        icon: \"icons/icons-118.png\",\r\n        description: _.template(\"After hitting with an attack this Demon frenzies, gaining a <span style='color: orangered'>${rank}%</span> bonus to <span style='color: lightgreen'>Attack Speed</span> for 2 rounds.\"),\r\n        on_hitting: {\r\n            effects: {\r\n                add_modifier: {\r\n                    speed: {\r\n                        target: \"attacker\",\r\n                        percent: \"$rank\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: 2\r\n            }\r\n        }\r\n    },\r\n    inescapableGrasp: {\r\n        name: \"Inescapable Grasp\",\r\n        icon: \"icons/icons-2221.png\",\r\n        description: _.template(\"You bind your victims when you strike, causing a <span style='color: orangered'>${rank}%</span> penalty to their <span style='color: lightgreen'>Action Speed</span> for 2 rounds.\"),\r\n        on_hitting: {\r\n            effects: {\r\n                add_modifier: {\r\n                    speed: {\r\n                        target: \"attacked\",\r\n                        percent: \"$rank.times(-1)\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: 2\r\n            }\r\n        }\r\n    },\r\n    terrifyingSkitter: {\r\n        name: \"Terrifying Skitter\",\r\n        icon: \"icons/icons-2260.png\",\r\n        description: _.template(\"The sickening sound of your feet on the ground unnerves even other demons, making the enemy <span style='color: violet'>Terrified</span> for <span style='color: lightblue'>${rank.div(10).round(0, 0).plus(1).toFixed()}</span> round(s), stunning them.\"),\r\n        on_combat_start: {\r\n            effects: {\r\n                add_modifier: {\r\n                    stunned: {\r\n                        target: \"all_enemies\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: \"$rank.div(10).round(0, 0).plus(1)\"\r\n            }\r\n        }\r\n    },\r\n    piercingStrike: {\r\n        name: \"Piercing Strike\",\r\n        icon: \"icons/icons-113.png\",\r\n        description: _.template(\"Your relentless attacks are designed to get around the enemy's defenses. Against your attacks the enemy's <span style='color: lightgreen'>Defense</span> is reduced by <span style='color: orangered'>${rank}%</span>\"),\r\n        on_hitting: {\r\n            effects: {\r\n                defense_modifier: {\r\n                    percent: \"$rank.times(-1)\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTrait(traitId) {\r\n    return Traits[traitId];\r\n}","import * as _ from \"lodash\";\r\nconsole.log(process.env.REACT_APP_DEBUG_MODE, typeof process.env.REACT_APP_DEBUG_MODE);\r\n\r\nexport const config = {\r\n    manualSpeedup: {\r\n        enabled: true,\r\n        multiplier: 2\r\n    },\r\n    artifacts: {\r\n        enabled: process.env.REACT_APP_FEATURE_ARTIFACTS_ENABLED || false\r\n    },\r\n    actionLog: {\r\n        maxSize:  process.env.REACT_APP_MAX_ACTIONLOG_SIZE || 20,\r\n    },\r\n    encounters: {\r\n        lesserLevelScale: 2, // A demon is \"lesser\" than another when its level is this much lower.\r\n        greaterLevelScale: 1 // A demon is \"greater\" than another when its level is this much higher.\r\n    },\r\n    characters: {\r\n        player: {\r\n            attributesPerLevel: 2\r\n        }\r\n    },\r\n    mechanics: {\r\n        xpFromGreaterDemon: \"$enemy.powerLevel\",\r\n        levelToPowerEquation: \"$level.eq(1) ? Decimal(0) : Decimal(5).pow($level.minus(1).toNumber())\",\r\n        powerToLevelEquation: \"Decimal(0).eq($powerPoints) ? Decimal(1) : Decimal.log($powerPoints, 5).plus(1).floor()\",\r\n        latentPowerGainOnReincarnate: \"player.powerLevel.minus(1).pow(2).times(5)\",\r\n        maxLevel: 100,\r\n        accuracy: { // Determines how accuracy rolls work\r\n            baseAttribute: \"deceit\",\r\n            attributeBonusScale: 10\r\n        },\r\n        defense: {\r\n            baseAttribute: \"brutality\",\r\n            attributeBonusScale: 10\r\n        },\r\n        evasion: {\r\n            baseAttribute: \"cunning\",\r\n            attributeBonusScale: 10\r\n        },\r\n        attackDamage: {\r\n            pointsPerLevel: 5,\r\n            baseAttribute: \"brutality\",\r\n            attributeBonusScale: 10\r\n        },\r\n        traitRank: {\r\n            baseAttribute: \"madness\",\r\n            attributeBonusScale: 10\r\n        },\r\n        fatigue: {\r\n            evasionPenaltyPerPoint: 2\r\n        },\r\n        hp: {\r\n            pointsPerLevel: 20,\r\n            healingPerLevel: 2\r\n        }\r\n    },\r\n    attributes: {\r\n        brutality: {\r\n            label: \"Brutality\",\r\n            globalScaling: 1,\r\n            description: _.template(`Brutality is how savage and ruthless a Demon is. It gives a \\${5 * rank}% bonus to attack damage, defense and intimidation checks.`),\r\n            icon: \"icons/icons-92.png\"\r\n        },\r\n        cunning: {\r\n            label: \"Cunning\",\r\n            globalScaling: 1,\r\n            description: _.template(\"Cunning is how quick thinking a Demon is. It gives a ${5 * rank}% bonus to Evasion, and non-combat encounters.\"),\r\n            icon: \"icons/icons-24.png\"\r\n        },\r\n        deceit: {\r\n            label: \"Deceit\",\r\n            globalScaling: 1,\r\n            description: _.template(\"Deceit is how underhanded and manipulative a Demon is. It gives a ${5 * rank}% bonus to Accuracy and social encounters.\"),\r\n            icon: \"icons/icons-17.png\"\r\n        },\r\n        madness: {\r\n            label: \"Madness\",\r\n            globalScaling: 1,\r\n            description: _.template(\"Madness is how disconnected from the limits of reality the Demon is. It gives a ${5 * rank}% bonus to the effect of wielded Artifacts and the effects of Traits.\"),\r\n            icon: \"icons/icons-124.png\"\r\n        }\r\n    },\r\n    combat: {\r\n        attributeDamageModifier: .02,\r\n        defaultMinimumDamageMultiplier: .5,\r\n        defaultMedianDamageMultiplier: 1,\r\n        defaultMaximumDamageMultiplier: 1.5,\r\n        baseMinimumDamageWeight: 20,\r\n        baseMedianDamageWeight: 60,\r\n        baseMaximumDamageWeight: 20\r\n    },\r\n    debug: process.env.REACT_APP_DEBUG_MODE === \"true\"\r\n}","import {config} from \"./config\";\r\n\r\nexport function debugMessage() {\r\n    if(config.debug) {\r\n        console.debug.apply(null, arguments);\r\n    }\r\n}","import {config} from \"./config\";\r\nimport {evaluateExpression, getLevelForPower, getPowerNeededForLevel} from \"./engine\";\r\nimport {Creatures} from \"./data/creatures\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nexport class Character {\r\n    constructor(props) {\r\n        this._isPc = props.isPc || props._isPc;\r\n        this.id = props.id;\r\n        this._name = props.name || props._name;\r\n        this._absorbedPower = Decimal(props.absorbedPower || props._absorbedPower || 0);\r\n        this._latentPower = Decimal(props.latentPower || props._latentPower || 0);\r\n        this._currentHp = Decimal(props._currentHp || this.maximumHp);\r\n        this._attributes = new Attributes(props.attributes || props._attributes, this);\r\n        this._combat = new CombatStats(props.combat || props._combat, this);\r\n        this._traits = Object.keys(props.traits || props._traits).reduce((transformed, next) => {\r\n            transformed[next] = Decimal((props.traits || props._traits)[next]);\r\n            return transformed;\r\n        }, {});\r\n        this._appearance = props.appearance || props._appearance;\r\n        this._modifiers = props.modifiers || props._modifiers || [];\r\n    }\r\n\r\n    get isPc(){\r\n        return this._isPc;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get powerLevel() {\r\n        return getLevelForPower(this._absorbedPower);\r\n    }\r\n\r\n    get currentHp() {\r\n        return this._currentHp;\r\n    }\r\n\r\n    set currentHp(newHealth) {\r\n        if(this.maximumHp.lt(newHealth)) {\r\n            this._currentHp = this.maximumHp;\r\n        } else {\r\n            this._currentHp = newHealth;\r\n        }\r\n    }\r\n\r\n    get alive() {\r\n        return this.currentHp > 0;\r\n    }\r\n\r\n    get latentPower() {\r\n        return this._latentPower;\r\n    }\r\n\r\n    set latentPower(newLatentPower) {\r\n        this._latentPower = newLatentPower;\r\n    }\r\n\r\n    get maximumHp() {\r\n        return this.powerLevel\r\n            .mul(this.latentPower.div(100).plus(1))\r\n            .mul(config.mechanics.hp.pointsPerLevel)\r\n            .floor();\r\n    }\r\n\r\n    get attributes() {\r\n        return this._attributes;\r\n    }\r\n\r\n    get combat() {\r\n        return this._combat;\r\n    }\r\n\r\n    get traits() {\r\n        return this._traits;\r\n    }\r\n\r\n    set traits(newTraits) {\r\n        this._traits = newTraits;\r\n    }\r\n\r\n    get appearance() {\r\n        return this._appearance;\r\n    }\r\n\r\n    reincarnate(newAppearance, newTraits) {\r\n        this._appearance = newAppearance;\r\n        this._traits = newTraits;\r\n    }\r\n\r\n    otherDemonIsGreaterDemon(other) {\r\n        const greaterDemonScale = evaluateExpression(config.encounters.greaterLevelScale, {\r\n            player: this,\r\n            enemy: other\r\n        });\r\n        return other.powerLevel.gte(this.powerLevel.plus(greaterDemonScale));\r\n    }\r\n\r\n    otherDemonIsLesserDemon(other) {\r\n        const lesserDemonScale = evaluateExpression(config.encounters.lesserLevelScale, {\r\n            player: this,\r\n            enemy: other\r\n        });\r\n        return other.powerLevel.lte(this.powerLevel.minus(lesserDemonScale));\r\n    }\r\n\r\n    gainPower(powerGained) {\r\n        powerGained = powerGained.times(this.latentPower.div(100).plus(1)).floor();\r\n        this._absorbedPower = this._absorbedPower.plus(powerGained);\r\n        if(getLevelForPower(this._absorbedPower).gt(config.mechanics.maxLevel)) {\r\n            this._absorbedPower = getPowerNeededForLevel(config.mechanics.maxLevel);\r\n        }\r\n        Creatures[this.appearance].traits.forEach(trait => {\r\n            this._traits[trait] = getLevelForPower(this._absorbedPower);\r\n        });\r\n        return powerGained;\r\n    }\r\n\r\n    get healing() {\r\n        return Decimal(this.powerLevel.times(config.mechanics.hp.healingPerLevel));\r\n    }\r\n\r\n    get absorbedPower() {\r\n        return this._absorbedPower;\r\n    }\r\n\r\n    set absorbedPower(value){\r\n        this._absorbedPower = value;\r\n        if(getLevelForPower(this._absorbedPower).gt(config.mechanics.maxLevel)) {\r\n            this._absorbedPower = getPowerNeededForLevel(config.mechanics.maxLevel);\r\n        }\r\n        if(this.appearance) {\r\n            Creatures[this.appearance].traits.forEach(trait => {\r\n                this._traits[trait] = getLevelForPower(this._absorbedPower);\r\n            });\r\n        }\r\n    }\r\n\r\n    get speed() {\r\n        return Decimal(100);\r\n    }\r\n\r\n    addModifier(modifier) {\r\n        this._modifiers.push(modifier);\r\n    }\r\n\r\n    get modifiers() {\r\n        return this._modifiers;\r\n    }\r\n}\r\n\r\nclass Attributes {\r\n    constructor(attributes, character) {\r\n        this._brutality = attributes.brutality || attributes._brutality || 0;\r\n        this._cunning = attributes.cunning || attributes._cunning || 0;\r\n        this._deceit = attributes.deceit || attributes._deceit || 0;\r\n        this._madness = attributes.madness || attributes._madness || 0;\r\n        Object.defineProperty(this, \"character\", {\r\n            value: () => character\r\n        })\r\n    }\r\n\r\n    get brutality() {\r\n        const latentPowerMultiplier = this.character().latentPower.div(100).plus(1);\r\n        return this._brutality.times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get cunning() {\r\n        const latentPowerMultiplier = this.character().latentPower.div(100).plus(1);\r\n        return this._cunning.times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get deceit() {\r\n        const latentPowerMultiplier = this.character().latentPower.div(100).plus(1);\r\n        return this._deceit.times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get madness() {\r\n        const latentPowerMultiplier = this.character().latentPower.div(100).plus(1);\r\n        return this._madness.times(latentPowerMultiplier).floor();\r\n    }\r\n}\r\n\r\nclass CombatStats {\r\n    constructor(props, character) {\r\n        this.character = function() {\r\n            return character;\r\n        }\r\n        this.fatigue = 0;\r\n    }\r\n\r\n    get minimumDamageWeight() {\r\n        return Decimal(config.combat.baseMinimumDamageWeight);\r\n    }\r\n\r\n    get medianDamageWeight() {\r\n        return Decimal(config.combat.baseMedianDamageWeight);\r\n    }\r\n\r\n    get maximumDamageWeight() {\r\n        return Decimal(config.combat.baseMaximumDamageWeight);\r\n    }\r\n\r\n    get minimumDamage() {\r\n        return calculateDamage(config.combat.defaultMinimumDamageMultiplier, this.character().powerLevel, this.character().latentPower, this.character().attributes.brutality);\r\n    }\r\n\r\n    get medianDamage() {\r\n        return calculateDamage(config.combat.defaultMedianDamageMultiplier, this.character().powerLevel, this.character().latentPower, this.character().attributes.brutality);\r\n    }\r\n\r\n    get maximumDamage() {\r\n        return calculateDamage(config.combat.defaultMaximumDamageMultiplier, this.character().powerLevel, this.character().latentPower, this.character().attributes.brutality);\r\n    }\r\n\r\n    get canAct() {\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction calculateDamage(hitTypeDamageMultiplier, powerLevel, latentPower, attributeScore) {\r\n    const effectivePowerLevel = powerLevel.times(latentPower.div(100).plus(1));\r\n    const attributeModifier = attributeScore.times(config.combat.attributeDamageModifier).div(100).plus(1);\r\n    return effectivePowerLevel\r\n        .times(config.mechanics.attackDamage.pointsPerLevel)\r\n        .times(hitTypeDamageMultiplier)\r\n        .times(attributeModifier).ceil();\r\n}","export default class CharacterCombatState {\r\n    constructor(props) {\r\n        this.party = props.party;\r\n        this.hp = props.hp;\r\n        this._speed = props.speed;\r\n        this._fatigue = 0;\r\n        this.lastActed = 0;\r\n        this.modifiers = [];\r\n    }\r\n\r\n    get speed() {\r\n        const baseSpeed = this._speed;\r\n        const modifiedSpeed = this.modifiers.reduce((currentValue, modifier) => {\r\n            if(modifier.effects.speed) {\r\n                const multiplier = (modifier.effects.speed.percent.plus(100))/100\r\n                return currentValue.mul(multiplier);\r\n            }\r\n            return currentValue;\r\n        }, baseSpeed);\r\n        return modifiedSpeed;\r\n    }\r\n\r\n    get fatigue() {\r\n        return this._fatigue;\r\n    }\r\n\r\n    set fatigue(fatigue) {\r\n        this._fatigue = fatigue;\r\n    }\r\n\r\n    get canAct() {\r\n        return this.modifiers.reduce((canAct, nextModifier) => {\r\n            if(nextModifier.effects.stunned !== undefined) {\r\n                return false;\r\n            } else {\r\n                return canAct;\r\n            }\r\n        }, true)\r\n    }\r\n}","import * as _ from \"lodash\";\r\nimport {assertCreatureExists, Creatures} from \"../data/creatures\";\r\nimport {v4} from \"node-uuid\";\r\nimport {getTrait} from \"../data/Traits\";\r\nimport {debugMessage} from \"../debugging\";\r\nimport { Decimal } from \"decimal.js\";\r\nimport {Character} from \"../character\";\r\nimport {config} from \"../config\";\r\nimport {generateHitCombatResult, generateMissCombatResult, generateSkipActionResult} from \"../combatResult\";\r\nimport CharacterCombatState from \"./CharacterCombatState\";\r\nimport * as Package from \"../../package.json\";\r\n\r\nexport const saveKey = require(\"md5\")(`hell-conquest-${Package.version}`);\r\n\r\nconst expressionCache = {};\r\n\r\nexport function resolveCombat(rng, definition) {\r\n    const listeners = [];\r\n    const combatResult = {\r\n        rounds: [],\r\n        winner: null,\r\n        combatantCombatStats: {}\r\n    }\r\n\r\n    async function notifyListener(listener) {\r\n        listener(combatResult, _.takeRight(combatResult.rounds)[0]);\r\n    }\r\n\r\n    const combatants = _.flatMap(definition.parties.map((party, partyIndex) => {\r\n        return party.map((character, characterIndex) => {\r\n            combatResult.combatantCombatStats[character.id] = new CharacterCombatState({\r\n                hp: character.currentHp,\r\n                speed: character.speed,\r\n                party: partyIndex\r\n            });\r\n            return {\r\n                character,\r\n                party: partyIndex\r\n            }\r\n        })\r\n    }));\r\n    debugMessage(\"Beginning combat\")\r\n    // Trigger start of combat effects.\r\n    combatants.forEach(combatant => Object.keys(combatant.character.traits).forEach(trait => {\r\n        combatants.filter(other => other !== combatant).forEach(otherCombatant => {\r\n            applyTrait(combatant.character, otherCombatant.id, getTrait(trait), combatant.character.traits[trait], \"on_combat_start\", {combat: combatResult}, 0, rng);\r\n        });\r\n    }))\r\n    let tick = 0;\r\n    const resolveRound = async function () {\r\n        const initiatives = _.uniq(combatants.map(combatant => Math.floor(Decimal(10000).div(combatResult.combatantCombatStats[combatant.character.id].speed).toNumber())))\r\n            .sort((a, b) => a - b);\r\n        initiatives.forEach(initiativeCount => {\r\n            // TODO: Activate/deactivate traits\r\n            const actingCharacters = combatants\r\n                .filter(wrapped => {\r\n                    const isAlive = wrapped.character.alive;\r\n                    const characterSpeed = Math.floor(Decimal(10000).div(combatResult.combatantCombatStats[wrapped.character.id].speed).toNumber());\r\n                    const matchingSpeed = (initiativeCount % characterSpeed === 0);\r\n                    return isAlive && matchingSpeed;\r\n                });\r\n            actingCharacters.forEach(acting => {\r\n                const character = acting.character;\r\n                tick = combatResult.combatantCombatStats[character.id].lastActed + Math.floor(Decimal(10000).div(combatResult.combatantCombatStats[character.id].speed).toNumber());\r\n                combatResult.combatantCombatStats[character.id].lastActed = tick;\r\n                debugMessage(`Tick ${tick}: Resolving action by character '${character.id}'.`);\r\n                if (combatResult.combatantCombatStats[character.id].hp.lte(0)) {\r\n                    debugMessage(`Tick ${tick}: Character ${character.id} was dead when their turn to act came up, skipping their action.`);\r\n                    return;\r\n                }\r\n                // The acting character performs an accuracy.\r\n                const enemyParty = (acting.party + 1) % 2;\r\n                const livingEnemies = definition.parties[enemyParty]\r\n                    .filter(enemy => combatResult.combatantCombatStats[enemy.id].hp.gt(0));\r\n                const target = _.get(livingEnemies[Math.floor(rng.double() * livingEnemies.length)], \"id\");\r\n                if (target === undefined) {\r\n                    debugMessage(`Tick ${tick}: No valid target, skipping action by ${character.id}.`);\r\n                    return;\r\n                }\r\n                if (combatResult.combatantCombatStats[character.id].canAct) {\r\n                    debugMessage(`Tick ${tick}: Attacking ${target}`);\r\n                    const attackRollResult = makeAttackRoll(character, target, combatResult, rng);\r\n\r\n                    // Trigger on-accuracy effects\r\n                    if (attackRollResult.total >= 50) {\r\n                        debugMessage(`Tick ${tick}: ${character.id} rolled ${attackRollResult.total}, a hit.`);\r\n                        resolveHit(tick, combatResult, character, target, rng);\r\n                    } else {\r\n                        debugMessage(`Tick ${tick}: ${character.id} rolled ${attackRollResult.total}, a miss.`);\r\n                        resolveMiss(tick, combatResult, character, target, rng);\r\n                        // TODO: Trigger on-miss effects\r\n                    }\r\n                } else {\r\n                    debugMessage(`${tick}: Character skips their action.`);\r\n                    resolveSkippedAction(tick, combatResult, character);\r\n                }\r\n                listeners.forEach(notifyListener);\r\n                Object.keys(combatResult.combatantCombatStats).forEach(combatantId => {\r\n                    if (combatResult.combatantCombatStats[combatantId].hp.lte(0)) {\r\n                        debugMessage(`Tick ${tick}: Combatant ${combatantId} died`);\r\n                        combatResult.rounds.push({\r\n                            uuid: v4(),\r\n                            tick,\r\n                            actor: character.id,\r\n                            target: Number.parseInt(combatantId),\r\n                            result: \"kill\"\r\n                        });\r\n                        listeners.forEach(notifyListener);\r\n                    }\r\n                });\r\n                combatResult.combatantCombatStats[acting.character.id].fatigue++;\r\n                // TODO: Add logs for when effects expire.\r\n                combatResult.combatantCombatStats[acting.character.id].modifiers = combatResult.combatantCombatStats[acting.character.id].modifiers\r\n                    .map(modifier => {\r\n                        modifier.roundDuration = Decimal(modifier.roundDuration).minus(1);\r\n                        return modifier;\r\n                    })\r\n                    .filter(modifier => Decimal(modifier.roundDuration).gt(0))\r\n\r\n            });\r\n        });\r\n        const playerPartyDead = definition.parties[0].every(character => combatResult.combatantCombatStats[character.id].hp.lte(0));\r\n        const enemyPartyDead = definition.parties[1].every(character => combatResult.combatantCombatStats[character.id].hp.lte(0));\r\n        if (playerPartyDead || enemyPartyDead) {\r\n            if (playerPartyDead) {\r\n                debugMessage(\"Every member of party 0 is dead\")\r\n                combatResult.rounds.push({\r\n                    uuid: v4(),\r\n                    tick,\r\n                    winner: 1,\r\n                    result: \"combat-end\"\r\n                })\r\n                combatResult.winner = 1;\r\n                listeners.forEach(notifyListener);\r\n                // Clear all end of combat\r\n            } else if (enemyPartyDead) {\r\n                debugMessage(\"Every member of party 1 is dead\")\r\n                combatResult.rounds.push({\r\n                    uuid: v4(),\r\n                    tick,\r\n                    winner: 0,\r\n                    result: \"combat-end\",\r\n                });\r\n                combatResult.winner = 0;\r\n                listeners.forEach(notifyListener);\r\n            }\r\n\r\n        } else {\r\n            debugMessage(\"No winner, combat continues\");\r\n            setTimeout(resolveRound);\r\n        }\r\n    };\r\n    setTimeout(resolveRound)\r\n    return {\r\n        onRoundResolved: async function (listener, getPrevious) {\r\n            listeners.push(listener);\r\n            notifyListener(listener);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction makeAttackRoll(actingCharacter, target, combatState, rng) {\r\n    const attackAccuracy = Decimal(actingCharacter.attributes[config.mechanics.accuracy.baseAttribute]).times(config.mechanics.accuracy.attributeBonusScale);\r\n    const targetEvasion = Decimal(getCharacter(target).attributes[config.mechanics.evasion.baseAttribute]).times(config.mechanics.evasion.attributeBonusScale)\r\n        .minus(Decimal(config.mechanics.fatigue.evasionPenaltyPerPoint).times(combatState.combatantCombatStats[target].fatigue));\r\n    // TODO: Validation\r\n    debugMessage(\"Making an accuracy roll. Attacker Accuracy:\", attackAccuracy.toFixed(), \"Target Evasion:\", targetEvasion.toFixed());\r\n    const roll = Math.floor((rng.double() * 100));\r\n    return {\r\n        rawRoll: roll,\r\n        attackAccuracy,\r\n        targetEvasion,\r\n        total: attackAccuracy.minus(targetEvasion).plus(roll)\r\n    };\r\n}\r\n\r\nlet globalState = loadGlobalState()\r\n\r\nexport function getGlobalState() {\r\n    return globalState;\r\n}\r\n\r\nexport function saveGlobalState() {\r\n    window.localStorage.setItem(saveKey, JSON.stringify(globalState));\r\n}\r\n\r\nexport function loadGlobalState(state) {\r\n    const loaded = window.localStorage.getItem(saveKey);\r\n    return loaded ? JSON.parse(loaded, stateReviver) : {\r\n        debug: {\r\n            creatures: {},\r\n            regions: {}\r\n        },\r\n        passivePowerIncome: Decimal(0),\r\n        unlockedMonsters: {},\r\n        paused: true,\r\n        currentAction: null,\r\n        nextAction: null,\r\n        id: 0,\r\n        highestLevelReached: Decimal(0),\r\n        startingTraits: {},\r\n        currentEncounter: null,\r\n        manualSpeedMultiplier: config.manualSpeedup.multiplier,\r\n        currentRegion: \"forest\",\r\n        actionLog: [],\r\n        exploration: {\r\n            explorationTime: 15 * 1000,\r\n            approachTime: 15 * 1000,\r\n            combatTime: 5 * 1000,\r\n            lootingTime: 15 * 1000,\r\n            recoveryTime: 2 * 1000,\r\n            fleeingTime: 15 * 1000,\r\n            intimidateTime: 15 * 1000,\r\n            reincarnationTime: 1\r\n        },\r\n        characters: {\r\n            0: new Character({\r\n                id: 0,\r\n                isPc: true,\r\n                name: \"You\",\r\n                powerLevel: Decimal(1),\r\n                absorbedPower: Decimal(0),\r\n                appearance: \"\",\r\n                statuses: {},\r\n                traits: {},\r\n                items: [],\r\n                attributes: {\r\n                    brutality: Decimal(0),\r\n                    cunning: Decimal(0),\r\n                    deceit: Decimal(0),\r\n                    madness: Decimal(0)\r\n                },\r\n                combat: {\r\n                    fatigue: 0,\r\n                    minimumDamageMultiplier: .5,\r\n                    medianDamageMultiplier: 1,\r\n                    maximumDamageMultiplier: 1.5\r\n                }\r\n            })\r\n        },\r\n        tutorials: {}\r\n    }\r\n}\r\n\r\nexport function getCharacter(id) {\r\n    assertCharacterExists(id);\r\n    return globalState.characters[id];\r\n}\r\n\r\nlet nextMonsterId = 1;\r\n\r\nexport function generateCreature(id, powerLevel, rng) {\r\n    assertCreatureExists(id);\r\n    if (config.debug) {\r\n        debugMessage(`Generating creature with id ${id} and level ${powerLevel}`);\r\n    }\r\n    if (powerLevel === undefined) {\r\n        throw new Error(\"No powerLevel\");\r\n    }\r\n    if (Number.isNaN(powerLevel)) {\r\n        throw new Error(\"Level cannot be NaN\");\r\n    }\r\n    const nextId = nextMonsterId++;\r\n    globalState.characters[nextId] = new Character({\r\n        id: nextId,\r\n        ...Creatures[id],\r\n        latentPower: powerLevel.minus(1).pow(2).times(5),\r\n        traits: Creatures[id].traits.reduce((traits, next) => {\r\n            traits[next] = powerLevel;\r\n            return traits;\r\n        }, {}),\r\n        absorbedPower: getPowerNeededForLevel(powerLevel),\r\n        artifacts: [],\r\n        statuses: [],\r\n        attributes: {\r\n            brutality: powerLevel.div(2).floor(),\r\n            cunning: powerLevel.div(2).floor(),\r\n            deceit: powerLevel.div(2).floor(),\r\n            madness: powerLevel.div(2).floor(),\r\n        },\r\n        combat: {\r\n            fatigue: 0,\r\n            minimumDamageMultiplier: .5,\r\n            medianDamageMultiplier: 1,\r\n            maximumDamageMultiplier: 1.5\r\n        }\r\n    });\r\n    saveGlobalState();\r\n    return globalState.characters[nextId];\r\n}\r\n\r\n\r\nexport function getSpriteForCreature(name) {\r\n    assertCreatureExists(name);\r\n    return `monsters/${Creatures[name].texture}`;\r\n}\r\n\r\nfunction assertCharacterExists(id) {\r\n    if (!globalState.characters[id]) {\r\n        throw new Error(`No creature exists for '${id}'`);\r\n    }\r\n}\r\n\r\nfunction resolveHit(tick, combatResult, actingCharacter, targetCharacter, rng) {\r\n    if (typeof actingCharacter !== \"object\") {\r\n        throw new Error(`Acting character was not an object!`);\r\n    }\r\n    if (typeof targetCharacter !== \"number\") {\r\n        throw new Error(`Target character was not an object!`);\r\n    }\r\n    const damageRoll = Math.floor(rng.double() * 100);\r\n    let damageToInflict;\r\n    if (damageRoll <= 20) {\r\n        damageToInflict = actingCharacter.combat.minimumDamage;\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a glancing hit for ${damageToInflict}.`);\r\n    } else if (damageRoll <= 80) {\r\n        damageToInflict = actingCharacter.combat.medianDamage;\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a solid hit for ${damageToInflict}.`);\r\n    } else {\r\n        damageToInflict = actingCharacter.combat.maximumDamage;\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a critical hit for ${damageToInflict}.`);\r\n    }\r\n    const attackResult = {\r\n        baseDamage: damageToInflict,\r\n        attackerDamageMultiplier: Decimal(actingCharacter.attributes[config.mechanics.attackDamage.baseAttribute])\r\n            .times(config.mechanics.attackDamage.attributeBonusScale),\r\n        targetDefenseMultiplier: Decimal(getCharacter(targetCharacter).attributes[config.mechanics.defense.baseAttribute])\r\n            .times(config.mechanics.defense.attributeBonusScale),\r\n        otherEffects: []\r\n    }\r\n    // Trigger on-hit effects\r\n    Object.keys(actingCharacter.traits).forEach(trait => applyTrait(actingCharacter, targetCharacter, getTrait(trait), actingCharacter.traits[trait], \"on_hitting\", {\r\n        combat: combatResult,\r\n        attack: attackResult\r\n    }, tick, rng));\r\n    const damageFactor = attackResult.attackerDamageMultiplier.plus(100) // FIXME: Evaluable expression\r\n        .div(Decimal.max(attackResult.targetDefenseMultiplier.plus(100), 1));\r\n    const finalDamage = attackResult.baseDamage.times(damageFactor).floor()\r\n\r\n    debugMessage(`Damage started off as ${attackResult.baseDamage.toFixed()}, with an attack factor of ${attackResult.attackerDamageMultiplier} and a target defense factor of ${attackResult.targetDefenseMultiplier}, for a total factor of ${damageFactor} and a final damage of ${finalDamage.toFixed()}`);\r\n    combatResult.combatantCombatStats[targetCharacter].hp = combatResult.combatantCombatStats[targetCharacter].hp.minus(damageToInflict);\r\n    debugMessage(`Tick ${tick}: Hit did ${finalDamage.toFixed()}. Additional effects: ${attackResult.otherEffects.map(effect => {\r\n        switch (effect.event) {\r\n            case \"apply_effect\":\r\n                return `Applying effect ${effect.effect} with from ${effect.source} to ${effect.target}.`\r\n        }\r\n\r\n    }).join(\", \")}. Target has ${combatResult.combatantCombatStats[targetCharacter].hp} remaining.`)\r\n    // TODO: Trigger on-damage effects\r\n    combatResult.rounds.push(generateHitCombatResult(tick, actingCharacter.id, targetCharacter, finalDamage, attackResult.otherEffects));\r\n}\r\n\r\nfunction resolveMiss(tick, combatResult, actingCharacter, targetCharacterId, rng) {\r\n    combatResult.rounds.push(generateMissCombatResult(tick, actingCharacter.id, targetCharacterId));\r\n}\r\n\r\nfunction resolveSkippedAction(tick, combatResult, actingCharacter) {\r\n    combatResult.rounds.push(generateSkipActionResult(tick, actingCharacter.id));\r\n}\r\n\r\nfunction applyTrait(sourceCharacter, targetCharacter, trait, rank, event, state, tick, rng) {\r\n    const rankModifier = sourceCharacter.attributes[config.mechanics.traitRank.baseAttribute].times(config.mechanics.traitRank.attributeBonusScale).div(100);\r\n    rank = Decimal.min(Decimal(rank).plus(Decimal(rank).times(rankModifier)).floor(), 100);\r\n    debugMessage(`Character has a bonus to rank of ${sourceCharacter.attributes.madness.toFixed()}% from madness, for an effective rank of ${rank}`);\r\n    debugMessage(`Tick ${tick}: Determining if trait ${trait.name} applies`);\r\n    if (trait[event]) {\r\n        const effect = trait[event];\r\n        if (effect.conditions !== undefined) {\r\n            debugMessage(\"Trait has conditions\");\r\n        }\r\n        const effectTriggers = effect.conditions === undefined || Object.keys(effect.conditions)\r\n            .every(condition => {\r\n                switch (condition) {\r\n                    case \"health_percentage\":\r\n                        // Fixme: Implement validation\r\n                        const target = getCharacter(effect.conditions[condition].target === \"attacker\" ? sourceCharacter : targetCharacter);\r\n                        const targetPercent = Decimal(effect.conditions[condition].below);\r\n                        const targetCurrentHealth = state.combat.combatantCombatStats[target.id].hp;\r\n                        const targetMaxHealth = target.maximumHp;\r\n                        const currentHealthPercent = (targetCurrentHealth.mul(100).div(targetMaxHealth));\r\n                        const conditionMet = targetPercent.gte(currentHealthPercent);\r\n                        debugMessage(`Tick ${tick}: Target health percentage is ${currentHealthPercent}, which is ${conditionMet ? \"\" : \"not\"} enough to trigger.`);\r\n                        return conditionMet;\r\n                    case \"chance\":\r\n                        const chanceToTrigger = evaluateExpression(trait[event].conditions[condition], {\r\n                            $rank: rank\r\n                        });\r\n                        const roll = Math.floor(rng.double() * 100) + 1;\r\n                        if (chanceToTrigger >= roll) {\r\n                            debugMessage(`Chance to trigger ${chanceToTrigger} with roll ${roll}: success`);\r\n                            return true;\r\n                        } else {\r\n                            debugMessage(`Chance to trigger ${chanceToTrigger} with roll ${roll}: failure.`);\r\n                            return false;\r\n                        }\r\n                    default:\r\n                        return false;\r\n                }\r\n            })\r\n        if (effectTriggers) {\r\n            debugMessage(`Tick ${tick}: Effect triggered, applying effects`);\r\n            Object.keys(trait[event].effects).forEach(traitEffect => {\r\n                    // FIXME\r\n                    switch (traitEffect) {\r\n                        case \"damage_modifier\":\r\n                            // FIXME: Validation\r\n                            const percentDamageModifier = evaluateExpression(trait[event].effects[traitEffect].percent, {\r\n                                $rank: rank\r\n                            });\r\n                            if(percentDamageModifier) {\r\n                                const newMultiplier = state.attack.attackerDamageMultiplier.plus(percentDamageModifier);\r\n                                debugMessage(`Tick ${tick}: Applying ${percentDamageModifier.toFixed()} modifier to damage, changing damage multiplier from ${state.attack.attackerDamageMultiplier.div(100).toFixed()} to ${newMultiplier.div(100).toFixed()}`);\r\n                                state.attack.attackerDamageMultiplier = newMultiplier;\r\n                            }\r\n                            break;\r\n                        case \"defense_modifier\": {\r\n                            const defenseModifier = evaluateExpression(trait[event].effects[traitEffect].percent, {\r\n                                $rank: rank\r\n                            }).div(100).plus(1);\r\n                            const newMultiplier = state.attack.targetDefenseMultiplier.times(defenseModifier);\r\n                            debugMessage(`Tick ${tick}: Applying ${defenseModifier} modifier to defense, changing defense multiplier from ${state.attack.targetDefenseMultiplier.toFixed()} to ${newMultiplier.toFixed()}`);\r\n                            state.attack.targetDefenseMultiplier = newMultiplier;\r\n                            break;\r\n                        }\r\n                        // case \"speed_modifier\" :\r\n                        //     const percentageSpeedMultiplier = evaluateExpression(trait[event].effects[traitEffect].percent, {\r\n                        //         $rank: rank\r\n                        //     });\r\n                        //\r\n                        //     const effect = {\r\n                        //         effect: {\r\n                        //             speed_bonus_percent: percentageSpeedMultiplier\r\n                        //         },\r\n                        //         roundDuration: evaluateExpression(trait[event].duration.rounds, {$rank: rank}),\r\n                        //         source: {\r\n                        //             character: sourceCharacter.id,\r\n                        //             ability: trait\r\n                        //         }\r\n                        //     };\r\n                        //     const existingEffect = state.combat.combatantCombatStats[affectedCharacterId].modifiers.find(modifier => {\r\n                        //         return modifier.source.character === sourceCharacter.id && modifier.source.ability === trait;\r\n                        //     });\r\n                        //     if (existingEffect) {\r\n                        //         existingEffect.roundDuration = trait[event].duration.rounds;\r\n                        //     } else {\r\n                        //         state.combat.combatantCombatStats[affectedCharacterId].modifiers.push(effect);\r\n                        //     }\r\n                        //     debugMessage(`Applied ${percentageSpeedMultiplier}% modifier to speed of ${affectedCharacterId}`);\r\n                        //     break;\r\n                        case \"add_modifier\":\r\n                            const modifierToAddDefinition = trait[event].effects.add_modifier;\r\n                            Object.keys(modifierToAddDefinition).forEach(effectType => {\r\n                                const effectTarget = modifierToAddDefinition[effectType].target;\r\n                                const modifier = {\r\n                                    effects: {\r\n                                        [effectType]: {\r\n                                            percent: evaluateExpression(modifierToAddDefinition[effectType].percent, {$rank: rank})\r\n                                        }\r\n                                    },\r\n                                    roundDuration: evaluateExpression(trait[event].duration.rounds, {$rank: rank}),\r\n                                    source: {\r\n                                        character: sourceCharacter.id,\r\n                                        ability: trait\r\n                                    }\r\n                                };\r\n                                // Determine targets\r\n                                const targets = Object.keys(state.combat.combatantCombatStats).filter(combatantId => {\r\n                                    switch (effectTarget) {\r\n                                        case \"attacker\":\r\n                                            return sourceCharacter.id == combatantId;\r\n                                        case \"attacked\":\r\n                                            return targetCharacter == combatantId;\r\n                                        case \"all_enemies\":\r\n                                            const actingCharacterParty = sourceCharacter.id === 0 ? 0 : 1;\r\n                                            return actingCharacterParty !== state.combat.combatantCombatStats[combatantId].party;\r\n                                        default:\r\n                                            throw new Error();\r\n                                    }\r\n                                });\r\n                                targets.forEach(combatantId => {\r\n                                    const existingEffect = state.combat.combatantCombatStats[combatantId].modifiers.find(modifier => {\r\n                                        return modifier.source.character === sourceCharacter.id && modifier.source.ability === trait;\r\n                                    });\r\n                                    if (existingEffect) {\r\n                                        existingEffect.roundDuration = evaluateExpression(trait[event].duration.rounds, {$rank: rank});\r\n                                    } else {\r\n                                        state.combat.combatantCombatStats[combatantId].modifiers.push(modifier);\r\n                                    }\r\n                                    _.get(state, \"attack.otherEffects\", []).push({\r\n                                        event: \"add_modifier\",\r\n                                        source: sourceCharacter.id,\r\n                                        target: combatantId,\r\n                                        effect: modifier,\r\n                                    });\r\n                                });\r\n                            })\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport function evaluateExpression(expression, context) {\r\n    if(expression === null || expression === undefined) {\r\n        return expression;\r\n    }\r\n    if (!expressionCache[expression]) {\r\n        expressionCache[expression] = new Function(\"context\", `with(context) {return ${expression}}`);\r\n    }\r\n    context.Decimal = Decimal;\r\n    return expressionCache[expression].call(null, context);\r\n}\r\n\r\nexport function getPowerNeededForLevel(level) {\r\n    return evaluateExpression(config.mechanics.levelToPowerEquation, {\r\n        $level: Decimal(level)\r\n    });\r\n}\r\n\r\nexport function getLevelForPower(powerPoints) {\r\n    return evaluateExpression(config.mechanics.powerToLevelEquation, {\r\n        $powerPoints: Decimal(powerPoints)\r\n    });\r\n}\r\n\r\nexport function reincarnateAs(monsterId, newAttributes) {\r\n    const player = getCharacter(0);\r\n    // Improve your starting traits\r\n    const currentDemon = Creatures[player.appearance];\r\n    if (currentDemon) {\r\n        currentDemon.traits.forEach(trait => {\r\n            if (!globalState.startingTraits[trait] || player.powerLevel.gt(globalState.startingTraits[trait])) {\r\n                globalState.startingTraits[trait] = player.powerLevel;\r\n            }\r\n        });\r\n    }\r\n\r\n    if(Decimal(globalState.highestLevelReached).lt(player.powerLevel)) {\r\n        globalState.highestLevelReached = player.powerLevel;\r\n    }\r\n\r\n    if (monsterId === \"random\") {\r\n        const options = _.difference(Object.keys(Creatures).filter(m => {\r\n            return _.get(globalState, [\"debug\", \"creatures\", m, \"enabled\"], true) &&\r\n                Creatures[m].enabled !== false\r\n        }), Object.keys(globalState.unlockedMonsters)\r\n            .filter(m => globalState.unlockedMonsters[m]));\r\n        monsterId = options[Math.floor(Math.random() * options.length)];\r\n    }\r\n\r\n    // Update player attributes\r\n    Object.keys(player.attributes).forEach(attribute => {\r\n        player.attributes[attribute] = Decimal(newAttributes[attribute.substring(1)]);\r\n    })\r\n\r\n    // Add your level to your starting energy.\r\n    const latentPowerGain = evaluateExpression(config.mechanics.latentPowerGainOnReincarnate, {\r\n        player\r\n    })\r\n    globalState.characters[0].latentPower = globalState.characters[0].latentPower.plus(latentPowerGain);\r\n    globalState.characters[0].absorbedPower = Decimal(0);\r\n    globalState.characters[0].reincarnate(monsterId, globalState.startingTraits);\r\n    globalState.unlockedMonsters[monsterId] = true;\r\n\r\n    // Gain the traits of your new demon amd your new power level\r\n    Creatures[monsterId].traits.forEach(trait => {\r\n        if (!globalState.startingTraits[trait] || player.powerLevel.gt(globalState.startingTraits[trait])) {\r\n            globalState.startingTraits[trait] = player.powerLevel;\r\n        }\r\n    });\r\n    getCharacter(0).traits = {...globalState.startingTraits};\r\n\r\n    globalState.currentEncounter = null;\r\n    globalState.currentAction = \"reincarnating\";\r\n    getCharacter(0).currentHp = getCharacter(0).maximumHp;\r\n    getGlobalState().passivePowerIncome = Decimal(0);\r\n\r\n    saveGlobalState();\r\n}\r\n\r\nexport function unpause() {\r\n    globalState.paused = false;\r\n}\r\n\r\nfunction stateReviver(key, value) {\r\n    switch (key) {\r\n        case \"_attributes\":\r\n        case \"startingTraits\":\r\n        case \"traits\":\r\n            return Object.keys(value).reduce((all, next) => {\r\n                all[next] = Decimal(value[next]);\r\n                return all;\r\n            }, {});\r\n        case \"startingPower\":\r\n        case \"minLevel\":\r\n        case \"maxLevel\":\r\n            return Decimal(value);\r\n        case \"characters\":\r\n            return Object.keys(value).reduce((characters, id) => {\r\n                characters[id] = new Character(value[id]);\r\n                return characters;\r\n            }, {});\r\n        case \"enemies\":\r\n            return Object.keys(value).map(character => {\r\n                return new Character(value[character]);\r\n            });\r\n        case \"paused\":\r\n            return false;\r\n        case \"passivePowerIncome\":\r\n            return Decimal(value);\r\n        case \"value\":\r\n            const parsed = Number.parseFloat(value);\r\n            if (Number.isNaN(parsed)) {\r\n                return value;\r\n            }\r\n            return Decimal(value);\r\n        default:\r\n            return value;\r\n    }\r\n}\r\n\r\nexport function resetDebug() {\r\n    globalState.debug.creatures = {};\r\n    globalState.debug.regions = {};\r\n}\r\n\r\nexport function getManualSpeedMultiplier() {\r\n    const debugMultiplier = _.get(globalState, [\"debug\", \"manualSpeedMultiplier\"]);\r\n    const baseMultiplier = globalState.manualSpeedMultiplier;\r\n    return debugMultiplier || baseMultiplier;\r\n}","import {v4} from \"node-uuid\";\r\n\r\nexport function generateHitCombatResult(tick, attackingCharacterId, targetCharacterId, damageDone, otherEffects) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"hit\",\r\n        target: targetCharacterId,\r\n        actor: attackingCharacterId,\r\n        effects: [{\r\n            event: \"damage\",\r\n            value: damageDone,\r\n            target: targetCharacterId\r\n        }, ...otherEffects]\r\n    }\r\n}\r\n\r\nexport function generateMissCombatResult(tick, attackingCharacterId, targetCharacterId) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"miss\",\r\n        target: targetCharacterId,\r\n        actor: attackingCharacterId,\r\n        effects: []\r\n    }\r\n}\r\n\r\nexport function generateSkipActionResult(tick, actingCharacterId) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"action_skipped\",\r\n        actor: actingCharacterId,\r\n        effects: []\r\n    }\r\n}","import * as _ from \"lodash\";\r\nimport {evaluateExpression, generateCreature, getGlobalState} from \"../engine\";\r\nimport {config} from \"../config\";\r\nimport {debugMessage} from \"../debugging\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nclass Region {\r\n    constructor(name, available, encounters, background) {\r\n        this.name = name;\r\n        this.encounters = encounters;\r\n        this.background = background;\r\n    }\r\n\r\n    startEncounter(player, rng) {\r\n\r\n        const candidateMinimumLevel = _.get(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], player.powerLevel.minus(config.encounters.lesserLevelScale * 2));\r\n        const minimumLevel = candidateMinimumLevel.lt(1) ? Decimal(1) : candidateMinimumLevel;\r\n\r\n        const candidateMaxLevel = _.get(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"],\r\n            player.powerLevel.plus(config.encounters.greaterLevelScale * 2));\r\n        const maximumLevel = candidateMaxLevel.gte(config.mechanics.maxLevel) ? Decimal(config.mechanics.maxLevel - 1) : candidateMaxLevel;\r\n\r\n        if (config.debug) {\r\n            debugMessage(`Generating an encounter between ${minimumLevel.toFixed()} and ${maximumLevel.toFixed()} `);\r\n        }\r\n        const encounterLevelModifier = minimumLevel.toNumber() + Math.floor(rng.double() * (maximumLevel.toNumber() - minimumLevel.toNumber()));\r\n        const encounterLevel = Decimal(Math.max(1, encounterLevelModifier));\r\n        if (config.debug) {\r\n            debugMessage(`Generated encounter level is ${encounterLevel}`);\r\n        }\r\n        const encounterDef = chooseRandomEncounter(this);\r\n        if (encounterDef === undefined) {\r\n            throw new Error(\"No encounter selected\");\r\n        }\r\n        const encounter = {\r\n            encounterLevel,\r\n            ...encounterDef,\r\n            pendingActions: [],\r\n            enemies: encounterDef.enemies.flatMap(enemyDef => _.range(0, enemyDef.count).map(i => {\r\n                return generateCreature(enemyDef.name, encounterLevel, rng)\r\n            }))\r\n        };\r\n        return encounter;\r\n    }\r\n}\r\n\r\nexport const Regions = {\r\n    forest: new Region(\"The Prey's Lament\", true, {\r\n            bloodthirstyKnight: {\r\n                description: \"1 Bloodthirsty Knight\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"bloodthirstyKnight\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            rapaciousHighwayman: {\r\n                description: \"1 Rapacious Highwayman\",\r\n                type: \"combat\",\r\n                enabled: false,\r\n                enemies: [\r\n                    {\r\n                        name: \"rapaciousHighwayman\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            crushingSnake: {\r\n                description: \"1 Crushing Snake\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"crushingSnake\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            skitteringHorror: {\r\n                description: \"1 Skittering Horror\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"skitteringHorror\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            deadlyHornet: {\r\n                description: \"1 Deadly Hornet\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"deadlyHornet\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            }\r\n\r\n        },\r\n        {\r\n            background: \"backgrounds/parallax-demon-woods-bg.png\",\r\n            far: \"backgrounds/parallax-demon-woods-far-trees.png\",\r\n            mid: \"backgrounds/parallax-demon-woods-mid-trees.png\",\r\n            close: \"backgrounds/parallax-demon-woods-close-trees.png\"\r\n        }\r\n    ),\r\n    caves: new Region(\"The Bottomless Caverns\", false, {}, {}),\r\n    mountains: new Region(\"The Crags of Futility\", false, {}, {}),\r\n    desert: new Region(\"The Desert of Isolation\", false, {}, {})\r\n}\r\n\r\nfunction chooseRandomEncounter(region) {\r\n    const possibleEncounters = Object.keys(region.encounters).filter(encounterId => {\r\n        debugMessage(`Determining if '${encounterId}' is enabled.`);\r\n        const encounterEnabled = region.encounters[encounterId].enabled !== false;\r\n        if (!encounterEnabled) {\r\n            debugMessage(`Encounter '${encounterId}' disabled`);\r\n        }\r\n        const debugNotDisabled = _.get(getGlobalState(), [\"debug\", \"regions\", region.id, \"encounters\", encounterId]) !== false;\r\n        if (!debugNotDisabled) {\r\n            debugMessage(`Encounter '${encounterId}' disabled by debug.`);\r\n        }\r\n        return encounterEnabled && debugNotDisabled;\r\n    });\r\n    const randomKey = possibleEncounters[Math.floor(Math.random() * Object.keys(possibleEncounters).length)];\r\n    debugMessage(`Selected encounter '${randomKey}'`);\r\n    return region.encounters[randomKey];\r\n}","import React from \"react\";\r\n\r\nexport const Actions = {\r\n    exploring: {\r\n        id: \"exploring\",\r\n        duration: \"exploration.explorationTime\",\r\n        description: \"Exploring...\"\r\n    },\r\n    approaching: {\r\n        id: \"approaching\",\r\n        duration: \"exploration.approachTime\",\r\n        description: \"Approaching Enemy...\"\r\n    },\r\n    looting: {\r\n        id: \"looting\",\r\n        duration: \"exploration.lootingTime\",\r\n        description: \"Looting the body...\"\r\n    },\r\n    fleeing: {\r\n        id: \"fleeing\",\r\n        duration: \"exploration.fleeingTime\",\r\n        description: \"Fleeing in terror!\"\r\n    },\r\n    fighting: {\r\n        id: \"fighting\",\r\n        duration: \"exploration.combatTime\",\r\n        description: \"In Combat!\",\r\n    },\r\n    reincarnating: {\r\n        id: \"resurrecting\",\r\n        duration: \"exploration.reincarnationTime\",\r\n        description: \"Reincarnating...\"\r\n    },\r\n    recovering: {\r\n        id:\"recovering\",\r\n        duration: \"exploration.recoveryTime\",\r\n        description: \"Healing...\"\r\n    },\r\n    intimidating: {\r\n        id:\"intimidating\",\r\n        duration: \"exploration.intimidateTime\",\r\n        description: \"Intimidating...\"\r\n    }\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {Creatures} from \"../../data/creatures\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport {evaluateExpression, getCharacter, getGlobalState, getLevelForPower, getSpriteForCreature} from \"../../engine\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport * as _ from \"lodash\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {config} from \"../../config\";\r\nimport \"../../App.css\";\r\nimport { Decimal } from \"decimal.js\";\r\n\r\nexport default function ReincarnationSelectionPage(props) {\r\n    const globalState = useRef(getGlobalState());\r\n    const history = useHistory();\r\n    const player = getCharacter(0);\r\n    const currentCreature = Creatures[player.appearance] || {};\r\n    const [attributes, setAttributes] = useState(Object.keys(player.attributes)\r\n        .reduce((attributes, next) => {\r\n            attributes[next.substring(1)] = player.attributes[next];\r\n            return attributes;\r\n        }, {}));\r\n    const newLatentPower = getCharacter(0).latentPower.plus(\r\n        evaluateExpression(config.mechanics.latentPowerGainOnReincarnate, {\r\n            player\r\n        }));\r\n    const spendableBonusPoints = Decimal(getGlobalState().highestLevelReached).times(config.characters.player.attributesPerLevel);\r\n\r\n    useEffect(() => {\r\n        getGlobalState().paused = true;\r\n    }, []);\r\n\r\n    return <Grid container>\r\n        <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n            <strong>Reincarnate</strong>\r\n        </Grid>\r\n        <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n            Select a soul to reincarnate as.\r\n            <br/>\r\n            You will reincarnate with a <strong>{newLatentPower.toFixed()}%</strong> bonus to Attributes, Damage and absorbed power due to your Latent Power acquired from previous reincarnations.\r\n            <br/>\r\n            You will also gain the following Traits as a result of your previous reincarnations:\r\n            <Grid container>\r\n                {_.uniq(Object.keys(globalState.current.startingTraits).concat(currentCreature.traits || []))\r\n                    .map(trait => {\r\n                        const player = getCharacter(0);\r\n                        const currentStartingRank = _.get(globalState.current.startingTraits, trait, Decimal(0));\r\n                        const combinedLevel = player.powerLevel.gt(currentStartingRank) ? player.powerLevel : currentStartingRank;\r\n                        return <Grid item xs={1}>\r\n                            <Tooltip title={<div dangerouslySetInnerHTML={{\r\n                                __html:\r\n                                    Traits[trait].description({\r\n                                        rank: combinedLevel\r\n                                    })\r\n                            }}></div>}>\r\n                                <img src={Traits[trait].icon}/>\r\n                            </Tooltip>\r\n                        </Grid>\r\n                    })}\r\n            </Grid>\r\n        </Grid>\r\n\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Spend {spendableBonusPoints.toFixed()} {player.powerLevel.gt(1) ? \"points\" : \"point\"} on bonuses </strong> (Reach higher levels to gain more points)\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Attributes</strong>\r\n            </Grid>\r\n            {Object.keys(config.attributes).map(attribute => {\r\n                return <Grid item xs={3}>\r\n                    <Tooltip title={config.attributes[attribute].description({\r\n                        rank: attributes[attribute].toFixed()\r\n                    })}>\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <img src={config.attributes[attribute].icon}/>\r\n                            <div>\r\n                                <Button disabled={spendableBonusPoints.eq(_.sum(Object.values(attributes).map(x => {\r\n                                    return x.toNumber()\r\n                                })))}\r\n                                        onClick={() => {\r\n                                            setAttributes({...attributes, [attribute]: attributes[attribute].plus(1)})\r\n                                        }}>\r\n                                    <AddIcon/>\r\n                                </Button>\r\n                                {attributes[attribute].toFixed()}\r\n                                <Button disabled={attributes[attribute].toNumber() <= 0} onClick={() => {\r\n                                    setAttributes({...attributes, [attribute]: attributes[attribute].minus(1)})\r\n                                }}>\r\n                                    <RemoveIcon/>\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </Tooltip>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n\r\n        <Grid container item xs={12} alignItems=\"stretch\" justify=\"flex-start\">\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Choose a demon to reincarnate as.</strong>\r\n            </Grid>\r\n            {\r\n                Object.keys(Creatures)\r\n                    .filter(id => {\r\n                            const creatureEnabled = Creatures[id].enabled !== false;\r\n                            const debugEnabled = _.get(getGlobalState(), [\"debug\", \"creatures\", id, \"enabled\"], true);\r\n                            return creatureEnabled && debugEnabled;\r\n                        }\r\n                    )\r\n                    .map(name => {\r\n                    if (!getGlobalState().unlockedMonsters[name]) {\r\n                        return <Grid item container xs={3} justify=\"space-around\" style={{height: \"138px\"}}>\r\n                            <Grid item xs={12} style={{textAlign: \"center\", height: \"64%\"}}>\r\n                                <Tooltip\r\n                                    title={<div>An unknown type of Demon. Selects a random Demon you have not already\r\n                                        played as.</div>}>\r\n                                    <Button variant=\"contained\" style={{height: \"100%\", width: \"50%\"}}\r\n                                            onClick={() => {\r\n                                                props.reincarnate(\"random\", attributes);\r\n                                                history.push(\"/adventuring\");\r\n                                            }}>\r\n                                        <Grid container>\r\n                                            <Grid item xs={12}>\r\n                                                ???\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Button>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                        </Grid>\r\n                    } else {\r\n                        return <Grid item container xs={3} justify=\"space-around\">\r\n                            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                                <Tooltip title={<div>{Creatures[name].description}</div>}>\r\n                                    <Button variant=\"contained\" style={{height: \"100%\", width: \"50%\"}}\r\n                                            onClick={() => {\r\n                                                props.reincarnate(name, attributes);\r\n                                                history.push(\"/adventuring\");\r\n                                            }}>\r\n                                        <Grid container>\r\n                                            <Grid item xs={12}>\r\n                                                <img src={getSpriteForCreature(name)}/>\r\n                                            </Grid>\r\n                                            <Grid item xs={12}>\r\n                                                {Creatures[name].name}\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Button>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                            {\r\n                                Creatures[name].traits.map(trait => <Grid item xs={1}>\r\n                                    <Tooltip title={<div dangerouslySetInnerHTML={{\r\n                                        __html: Traits[trait].description({\r\n                                            rank: getLevelForPower(newLatentPower)\r\n                                        })\r\n                                    }}>\r\n                                    </div>}>\r\n                                        <img src={Traits[trait].icon}/>\r\n                                    </Tooltip>\r\n                                </Grid>)\r\n                            }\r\n                        </Grid>\r\n                    }\r\n                })\r\n            }\r\n        </Grid>\r\n    </Grid>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useMemo} from \"react\";\r\n\r\nexport default function PowerLevelDisplay(props) {\r\n    const powerLevelDisplay = useMemo(() => props.powerLevel.toFixed(), [props.powerLevel]);\r\n    return <React.Fragment>\r\n        <Grid item xs={6}>\r\n            Level\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n            {powerLevelDisplay}\r\n        </Grid>\r\n    </React.Fragment>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Help} from \"@material-ui/icons\";\r\nimport {config} from \"../../config\";\r\nimport React from \"react\";\r\n\r\nexport default function CharacterAttributes(props) {\r\n    return <React.Fragment>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                Health\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.currentHp.toFixed()} / {props.character.maximumHp.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={\r\n                        <span>Health is how much damage needed to destroy you. If you die, you forcibly reincarnate.</span>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.brutality.label}\r\n            </Grid>\r\n            <Grid item xs={5} title={``}>\r\n                {props.character.attributes.brutality.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={<span\r\n                        dangerouslySetInnerHTML={{__html: config.attributes.brutality.description(\r\n                                {\r\n                                    rank: props.character.attributes.brutality.toNumber()\r\n                                }\r\n                            )}}></span>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.cunning.label}\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.attributes.cunning.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={\r\n                        <span\r\n                            dangerouslySetInnerHTML={{__html: config.attributes.cunning.description(\r\n                                    {\r\n                                        rank: props.character.attributes.cunning.toNumber()\r\n                                    }\r\n                                )}}></span>\r\n                    }>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.deceit.label}\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.attributes.deceit.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={\r\n                        <span\r\n                            dangerouslySetInnerHTML={{__html: config.attributes.deceit.description(\r\n                                    {\r\n                                        rank: props.character.attributes.deceit.toNumber()\r\n                                    }\r\n                                )}}>\r\n                            </span>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.madness.label}\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.attributes.madness.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={<span\r\n                        dangerouslySetInnerHTML={{__html: config.attributes.madness.description(\r\n                                {\r\n                                    rank: props.character.attributes.madness.toNumber()\r\n                                }\r\n                            )}}/>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n    </React.Fragment>\r\n}","import Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport React from \"react\";\r\n\r\nexport default function CharacterTraits(props) {\r\n    return <React.Fragment>\r\n        {Object.keys(props.character.traits).map(trait => <Tooltip key={trait} title={\r\n            <React.Fragment>\r\n                <span>Rank {props.character.traits[trait].toFixed()}: </span>\r\n            <span dangerouslySetInnerHTML={{\r\n                __html: Traits[trait].description({\r\n                    rank: props.character.traits[trait]\r\n                })\r\n            }}></span>\r\n            </React.Fragment>}>\r\n            <img src={Traits[trait].icon}></img>\r\n        </Tooltip>)\r\n        }\r\n    </React.Fragment>\r\n\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useMemo} from \"react\";\r\nimport {getPowerNeededForLevel, getSpriteForCreature} from \"../engine\";\r\nimport {config} from \"../config\";\r\nimport PowerLevelDisplay from \"./charactersheet/PowerLevelDisplay\";\r\nimport CharacterAttributes from \"./charactersheet/CharacterAttributes\";\r\nimport CharacterTraits from \"./charactersheet/CharacterTraits\";\r\n\r\nconst styles = {\r\n    tooltip: {\r\n        fontSize: \"12pt\"\r\n    }\r\n}\r\n\r\nexport default function CharacterSheet(props) {\r\n    const spriteSrc = useMemo(() => getSpriteForCreature(props.character.appearance), [props.character.appearance]);\r\n    const combinedHitWeights = props.character.combat.minimumDamageWeight.plus(props.character.combat.medianDamageWeight)\r\n        .plus(props.character.combat.maximumDamageWeight);\r\n    const powerRequiredForCurrentLevel = getPowerNeededForLevel(props.character.powerLevel);\r\n    const powerNeededForNextLevel = getPowerNeededForLevel(props.character.powerLevel.plus(1));\r\n    const progressToNextLevel = props.character.absorbedPower.minus(powerRequiredForCurrentLevel);\r\n\r\n    return <Grid container>\r\n        <Grid item xs={12}>\r\n            <img src={spriteSrc} style={{height: \"75px\"}}/>\r\n        </Grid>\r\n        <Grid item container>\r\n            <PowerLevelDisplay powerLevel={props.character.powerLevel}/>\r\n        </Grid>\r\n        {props.character.absorbedPower !== undefined && <Grid item xs={12}>\r\n            <progress\r\n                value={progressToNextLevel.div(powerNeededForNextLevel).times(100).toNumber()}\r\n                max={100}\r\n                title={`${progressToNextLevel.toFixed()}/${powerNeededForNextLevel.toFixed()}`}\r\n            ></progress>\r\n        </Grid>}\r\n        <Grid container>\r\n            <Grid item container>\r\n                <Grid item xs>\r\n                    <strong>Combat Attributes</strong>\r\n                </Grid>\r\n            </Grid>\r\n            <CharacterAttributes character={props.character}/>\r\n        </Grid>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Derived</strong>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={4}>\r\n                    Glancing Blow\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.minimumDamageWeight.div(combinedHitWeights).times(100).toFixed()}%\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.minimumDamage.toFixed()}\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={4}>\r\n                    Solid Hit\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.medianDamageWeight.div(combinedHitWeights).times(100).toFixed()}%\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.medianDamage.toFixed()}\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={4}>\r\n                    Critical Hit\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.maximumDamageWeight.div(combinedHitWeights).times(100).toFixed()}%\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.maximumDamage.toFixed()}\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Traits</strong>\r\n            </Grid>\r\n            <CharacterTraits character={props.character}/>\r\n        </Grid>\r\n        {config.artifacts.enabled && <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Artifacts</strong>\r\n            </Grid>\r\n            <Grid>\r\n                {\r\n                    JSON.stringify(props.character.items)\r\n                }\r\n            </Grid>\r\n        </Grid>}\r\n    </Grid>\r\n\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React from \"react\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nconst styles = {\r\n    root: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#eeeeee\"\r\n    }\r\n}\r\n\r\nexport default function PlayerStats(props) {\r\n    return <Paper style={styles.root} elevation={2}>\r\n        <CharacterSheet character={props.player}/>\r\n    </Paper>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useMemo} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {getCharacter, getGlobalState, getLevelForPower, getPowerNeededForLevel} from \"../engine\";\r\n\r\nconst styles = {\r\n    root: {\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flex: \"0\"\r\n    },\r\n    buttons: {\r\n        width: \"100%\"\r\n    }\r\n}\r\n\r\nexport default function TopSection(props) {\r\n    const history = useHistory();\r\n    const reincarnateEnabled = useMemo(() => getCharacter(0).powerLevel.gt(1), [\r\n        getCharacter(0).powerLevel\r\n    ])\r\n    return <div style={styles.root}>\r\n        <Button onClick={() => history.push(\"/reincarnating\")} style={styles.buttons} variant=\"contained\" color=\"secondary\" disabled={!reincarnateEnabled}>\r\n            Reincarnate\r\n        </Button>\r\n    </div>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {getCharacter, getGlobalState} from \"../engine\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { config } from \"../config\";\r\nimport { Decimal } from \"decimal.js\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flex: \"1 0 auto\",\r\n        justifyContent: \"flex-end\",\r\n        flexDirection: \"column\"\r\n    },\r\n    actions: {\r\n        container: {\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            flexDirection: \"row\"\r\n        },\r\n        buttons: {\r\n            alignSelf: \"flex-end\",\r\n            flex: \"1\"\r\n        }\r\n    },\r\n    action: {\r\n        maxHeight: \"15%\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    },\r\n    actionProgress: {\r\n        width: \"100%\"\r\n    },\r\n    history: {\r\n        height: \"15%\",\r\n        flexDirection: \"column\",\r\n        overflowY: \"scroll\"\r\n    }\r\n}\r\nexport default function BottomSection(props) {\r\n    if (!props.currentAction) {\r\n        throw new Error(\"No current action\");\r\n    }\r\n    return <div style={styles.root} onMouseEnter={props.startManualSpeedup} onMouseLeave={props.stopManualSpeedup}>\r\n        <Paper style={styles.actions.container}>\r\n            <Button style={styles.actions.buttons} onClick={() => {\r\n                getGlobalState().paused = !getGlobalState().paused;\r\n                props.togglePause(getGlobalState().paused);\r\n            }}>\r\n                {props.paused ? \"Unpause\" : \"Pause\"}\r\n            </Button>\r\n        </Paper>\r\n        <Paper style={styles.actions.container}>\r\n            {actionButton(\"fighting\", \"Fight\", \"Combat the enemy. On victory, steal some of the power of the vanquished foe.\", props)}\r\n            {actionButton(\"fleeing\", \"Flee\", \"Attempt to escape. You will automatically escape from Greater Demons.\", props)}\r\n            {actionButton(\"intimidating\", \"Intimidate\", \"Try to cow the enemy, compelling them to continuously provide you a portion of their life force.\", props)}\r\n            {_.get(config, \"features.negotiating.enabled\") && actionButton(\"negotiating\", \"Negotiate\", \"Combat the enemy. On victory, steal some of the power of the vanquished foe.\", props)}\r\n        </Paper>\r\n        <Paper style={styles.action}>\r\n            <strong>{props.currentAction.description}</strong>\r\n            <progress style={styles.actionProgress} value={props.actionTime}\r\n                      max={_.get(props.state, props.currentAction.duration)}/>\r\n        </Paper>\r\n        <Paper style={styles.history}>\r\n            {\r\n                props.actionLog.map(item => printActionItem(item))\r\n            }\r\n        </Paper>\r\n    </div>\r\n}\r\n\r\nfunction printActionItem(item) {\r\n    if (item.message) {\r\n        return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n            <Grid item xs={11}>\r\n            <span dangerouslySetInnerHTML={{\r\n                __html: item.message\r\n            }}></span>\r\n            </Grid>\r\n        </Grid>\r\n    } else {\r\n        switch (item.result) {\r\n            case \"add_modifier\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{`${getCharacter(item.actor).name}`}</Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"hit\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item\r\n                          xs={11}>{getCharacter(item.actor).name} hit! {item.effects.map(effect => describeEffect(item.target, effect)).join(\" \")}</Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"miss\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        {getCharacter(item.actor).name} Missed! {item.effects.map(effect => describeEffect(item.target, effect)).join(\" \")}\r\n                    </Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"kill\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item\r\n                          xs={11}><strong>{getCharacter(item.target).name} {item.target === 0 ? 'Were' : 'Was'} Killed!</strong></Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"gainedPower\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        You absorbed {item.value.toFixed()} power.\r\n                    </Grid>\r\n                </Grid>\r\n            case \"healed\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        {`${getCharacter(item.target).name} gained ${item.value} health.`}\r\n                    </Grid>\r\n                </Grid>\r\n            case \"escaped\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        You escaped.\r\n                    </Grid>\r\n                </Grid>\r\n            case \"action_skipped\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{getCharacter(item.actor).name} lost {item.actor === 0 ? 'your' : 'their'} action.</Grid>\r\n                    <Grid item xs={1}>\r\n                        {item.tick}\r\n                    </Grid>\r\n                </Grid>\r\n            case \"intimidated\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{getCharacter(item.target).name} was Bound to you, granting you {item.value.toFixed()} power while you explore. </Grid>\r\n                </Grid>\r\n            case \"enemy-fled\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{getCharacter(item.target).name} Fled!</Grid>\r\n                </Grid>\r\n        }\r\n    }\r\n}\r\n\r\nfunction describeEffect(target, effect) {\r\n    switch (effect.event) {\r\n        case \"damage\":\r\n            return `${getCharacter(target).name} ${target === 0 ? 'take' : 'takes'} ${effect.value} Damage.`;\r\n        default:\r\n            return Object.keys(effect.effect.effects).map(mod => {\r\n                switch (mod) {\r\n                    case \"speed\":\r\n                        const percentModifier = Decimal(effect.effect.effects.speed.percent); // FIXME: 3 layers, the same name?\r\n                        if (percentModifier.lt(0)) {\r\n                            return `${getCharacter(effect.target).name} ${effect.target == 0 ? 'suffer' : 'suffers'} a ${percentModifier.toFixed()}% penalty to Action Speed.`;\r\n                        } else {\r\n                            return `${getCharacter(effect.target).name} ${effect.target == 0 ? 'gain' : 'gains'} a ${percentModifier.toFixed()}% bonus to Action Speed.`;\r\n                        }\r\n                }\r\n            })\r\n            switch (effect.effect.modifier) {\r\n                case \"speed_modifier\":\r\n\r\n\r\n            }\r\n\r\n    }\r\n}\r\n\r\nfunction actionButton(action, text, description, props) {\r\n    return <Tooltip title={description}>\r\n        <Button onClick={() => props.setNextAction(action)} style={styles.actions.buttons}\r\n                disabled={props.currentAction.id !== \"approaching\"}\r\n                variant={props.nextActionName === action ? \"contained\" : \"outlined\"}\r\n                color={props.nextActionName === action ? \"primary\" : \"default\"}>\r\n            {text}\r\n        </Button>\r\n    </Tooltip>\r\n}","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nconst styles = {\r\n    root: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#eeeeee\"\r\n    }\r\n}\r\n\r\nexport default function EnemySidebar(props) {\r\n    return <Paper style={styles.root}>\r\n        {props.currentEncounter && <CharacterSheet character={props.currentEncounter.enemies[0]} /> }\r\n    </Paper>\r\n}","import PlayerStats from \"../PlayerStats\";\r\nimport TopSection from \"../TopSection\";\r\nimport {getCharacter, getGlobalState} from \"../../engine\";\r\nimport BottomSection from \"../BottomSection\";\r\nimport EnemySidebar from \"../EnemySidebar\";\r\nimport React from \"react\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flex: \"1\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        overflow: \"hidden\"\r\n    },\r\n    image: {\r\n        position: \"absolute\",\r\n        height: \"100%\",\r\n        left: 0\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        left: 0\r\n    }\r\n}\r\n\r\nexport default function AdventuringPage(props) {\r\n    return <div className=\"App\" style={styles.root}>\r\n        <div id=\"background\" style={{\r\n            position: \"absolute\",\r\n            zIndex: \"-10\",\r\n            overflow: \"hidden\",\r\n            height: \"100vh\",\r\n            width: \"100vw\"\r\n        }}>\r\n            <img style={styles.background} src={\"./backgrounds/parallax-demon-woods-bg.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-far-trees.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-mid-trees.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-close-trees.png\"}/>\r\n        </div>\r\n        <PlayerStats player={props.player}/>\r\n        <div style={{display: \"flex\", flex: \"1 0 auto\", flexDirection: \"column\"}}>\r\n            <TopSection character={getCharacter(0)}/>\r\n            <BottomSection state={getGlobalState()} actionLog={props.actionLog}\r\n                           togglePause={props.togglePause}\r\n                           paused={props.paused}\r\n                           nextActionName={props.nextAction}\r\n                           currentAction={props.currentAction}\r\n                           setNextAction={(newAction) => {\r\n                               props.setNextAction(newAction);\r\n                               getGlobalState().nextAction = newAction;\r\n                           }}\r\n                           actionTime={props.actionTime}\r\n                           startManualSpeedup={props.startManualSpeedup}\r\n                           stopManualSpeedup={props.stopManualSpeedup}\r\n            />\r\n        </div>\r\n        <EnemySidebar currentEncounter={props.currentEncounter} actionLog={props.actionLog}/>\r\n\r\n    </div>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useState} from \"react\";\r\nimport { Decimal } from \"decimal.js\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {Creatures} from \"../data/creatures\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddCircleOutlineRoundedIcon from '@material-ui/icons/AddCircleOutlineRounded';\r\nimport RemoveCircleOutlineRoundedIcon from '@material-ui/icons/RemoveCircleOutlineRounded';\r\nimport {getCharacter, getGlobalState, resetDebug, saveKey} from \"../engine\";\r\nimport * as _ from \"lodash\";\r\nimport {Regions} from \"../data/Regions\";\r\nimport {config} from \"../config\";\r\n\r\nconst styles = {\r\n    root: {\r\n        position: \"absolute\",\r\n        minHeight: \"100vh\",\r\n        bottom: 0,\r\n        left: 0,\r\n        padding: \"20px\"\r\n    }\r\n}\r\n\r\nexport default function DebugUi(props) {\r\n    const [creatures, setCreatures] = useState(_.get(getGlobalState(), [\"debug\", \"creatures\"]));\r\n    const [regions, setRegions] = useState(_.get(getGlobalState(), [\"debug\", \"regions\"]));\r\n    const [minLevel, setMinLevel] = useState(_.get(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale).lt(Decimal(1)) ?\r\n        Decimal(1) : getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale)));\r\n    const [maxLevel, setMaxLevel] = useState(_.get(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale).gt(100) ?\r\n        Decimal(100) : getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale * 2)));\r\n    const [manualSpeedMultiplier, setManualSpeedMultiplier] = useState(_.get(getGlobalState(), [\"debug\", \"manualSpeedMultiplier\"],\r\n        getGlobalState().manualSpeedMultiplier));\r\n    const [playerAbsorbedPower, setPlayerAbsorbedPower] = useState(getCharacter(0).absorbedPower);\r\n\r\n    function reset() {\r\n        resetDebug();\r\n        setCreatures(_.get(getGlobalState(), [\"debug\", \"creatures\"]));\r\n        setRegions(_.get(getGlobalState(), [\"debug\", \"regions\"]));\r\n        setMinLevel(getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale).lt(Decimal(1)) ?\r\n            Decimal(1) : getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale));\r\n        setMaxLevel(getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale).gt(100) ?\r\n            Decimal(100) : getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale * 2));\r\n    }\r\n\r\n    function clearSave() {\r\n        window.localStorage.removeItem(saveKey);\r\n        alert(\"local storage cleared\");\r\n    }\r\n\r\n    return <Paper style={styles.root} disabled={true}>\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <h3>Debug Menu</h3>\r\n            </Grid>\r\n            <Grid item container xs={12}>\r\n                <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={reset}>\r\n                        Reset Debug Settings\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={clearSave}>\r\n                        Clear Save\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid item xs={3}>\r\n                    <TextField type=\"number\" value={manualSpeedMultiplier} onChange={e => {\r\n                        const newValue = Number.parseInt(e.target.value);\r\n                        _.set(getGlobalState(), [\"debug\", \"manualSpeedMultiplier\"], newValue);\r\n                        setManualSpeedMultiplier(newValue);\r\n                    }} label=\"Manual speed multiplier\"/>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TextField type=\"number\" min=\"0\" value={playerAbsorbedPower} onChange={e => {\r\n                        e.target.value = e.target.value === \"\" ? 0 : e.target.value;\r\n                        const newValue = Decimal(Number.parseInt(e.target.value));\r\n                        if(newValue.lt(0)) {\r\n                            getCharacter(0).absorbedPower = Decimal(0);\r\n                            setPlayerAbsorbedPower(Decimal(0));\r\n                        } else {\r\n                            getCharacter(0).absorbedPower = newValue;\r\n                            setPlayerAbsorbedPower(newValue);\r\n                        }\r\n\r\n                    }} label=\"Current player absorbed power\"/>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <h3>Creatures</h3>\r\n            </Grid>\r\n            <Grid container item xs={12}>\r\n                {Object.keys(Creatures).map(id => {\r\n                    const enabled = creatures[id] !== false && _.get(creatures, [id, \"enabled\"]) !== false;\r\n                    return <Grid item xs={3} style={{height: \"100%\"}}>\r\n                        <Button variant=\"contained\" color={enabled ? \"default\" : \"secondary\"}\r\n                                style={{width: \"100%\", height: \"100%\"}}\r\n                                onClick={() => {\r\n                                    _.set(getGlobalState(), [\"debug\", \"creatures\", id, \"enabled\"], !enabled);\r\n                                    setCreatures({...creatures, [id]: {enabled: !enabled}})\r\n                                }}\r\n                        >\r\n                            <img src={`./monsters/${Creatures[id].texture}`}/>\r\n                            {Creatures[id].name}\r\n                        </Button>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid item style={{textAlign: \"center\"}}>\r\n                <h4>Regions</h4>\r\n            </Grid>\r\n            <Grid container item xs={12}>\r\n                {Object.keys(Regions).map(regionId => {\r\n                    return <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                        <h4>{Regions[regionId].name}</h4>\r\n                        <Grid item container xs={12}>\r\n                            {Object.keys(Regions[regionId].encounters).map(encounterId => {\r\n                                const enabled = _.get(regions, [regionId, \"encounters\", encounterId, \"enabled\"]) !== false;\r\n                                return <Grid item xs={3}>\r\n                                    <Button variant=\"contained\" color={enabled ? \"default\" : \"secondary\"}\r\n                                            style={{width: \"100%\", height: \"100%\"}}\r\n                                            onClick={() => {\r\n                                                _.set(getGlobalState(), [\"debug\", \"regions\", regionId, \"encounters\", encounterId, \"enabled\"], !enabled);\r\n                                                setRegions({\r\n                                                    ...regions, [regionId]: _.set(regions[regionId],\r\n                                                        [\"encounters\", encounterId, \"enabled\"],\r\n                                                        !enabled\r\n                                                    )\r\n                                                })\r\n                                            }}\r\n                                    >\r\n                                        {Regions[regionId].encounters[encounterId].description}\r\n                                    </Button>\r\n                                </Grid>;\r\n                            })}\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                    <h4>Encounter rules</h4>\r\n                </Grid>\r\n                <Grid container item xs={3}>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            setMinLevel(minLevel.plus(1));\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], minLevel.plus(1));\r\n                            if (minLevel.plus(1).gt(maxLevel)) {\r\n                                setMaxLevel(minLevel.plus(1));\r\n                                _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], minLevel.plus(1));\r\n                            }\r\n                        }}>\r\n                            <AddCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        Minimum level {minLevel.toFixed()}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], minLevel.minus(1));\r\n                            setMinLevel(minLevel.minus(1));\r\n                        }}>\r\n                            <RemoveCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container item xs={3}>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            setMaxLevel(maxLevel.plus(1));\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], maxLevel.plus(1));\r\n                        }}>\r\n                            <AddCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        Maximum level {maxLevel.toFixed()}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], maxLevel.minus(1));\r\n                            setMaxLevel(maxLevel.minus(1));\r\n                            if (maxLevel.minus(1).lt(minLevel)) {\r\n                                setMinLevel(maxLevel.minus(1));\r\n                                _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], maxLevel.minus(1));\r\n                            }\r\n                        }}>\r\n                            <RemoveCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useEffect} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport {getGlobalState} from \"../../engine\";\r\nconst pkg = require(\"../../../package.json\");\r\nconst changelog = require(\"../../changelog.json\");\r\n\r\nexport default function SplashPage(props) {\r\n    useEffect(() => {\r\n        getGlobalState().paused = true;\r\n    })\r\n    const history = useHistory();\r\n    return <Paper>\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                Conquest of Hell Ver. {pkg.version}\r\n            </Grid>\r\n            <Grid item container>\r\n                {Object.keys(changelog).map(version => {\r\n                    return <Grid key={version} item container xs={12}>\r\n                        <Grid item xs={12}>\r\n                            {version}\r\n                        </Grid>\r\n                        <ul>\r\n                        {changelog[version].map(entry => {\r\n                            return <li key={entry}>\r\n                                {entry}\r\n                            </li>\r\n                        })}\r\n                        </ul>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <Button onClick={() => {\r\n                    if(getGlobalState().currentAction === null) {\r\n                        history.push(\"/reincarnating\")\r\n                    } else {\r\n                        getGlobalState().paused = false;\r\n                        history.push(\"/adventuring\")\r\n                    }\r\n                }}>\r\n                    Start\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>\r\n}","import './App.css';\nimport {v4} from \"node-uuid\";\nimport * as _ from \"lodash\";\nimport React, {useEffect, useRef, useState} from \"react\";\nimport 'react-circular-progressbar/dist/styles.css';\nimport {Regions} from \"./data/Regions\";\nimport {Actions} from \"./data/Actions\";\nimport { Decimal } from \"decimal.js\";\nimport {\n    evaluateExpression,\n    getCharacter,\n    getGlobalState, getManualSpeedMultiplier,\n    loadGlobalState, reincarnateAs,\n    resolveCombat, saveGlobalState, unpause\n} from \"./engine\";\nimport * as seedrandom from \"seedrandom\";\nimport {config} from \"./config\";\nimport {MemoryRouter, Route, Switch} from \"react-router-dom\";\nimport ReincarnationSelectionPage from \"./components/scene/ReincarnationSelectionPage\";\nimport AdventuringPage from \"./components/scene/AdventuringPage\";\nimport DebugUi from \"./components/DebugUi\";\nimport {useHotkeys} from \"react-hotkeys-hook\";\nimport {debugMessage} from \"./debugging\";\nimport SplashPage from \"./components/scene/SplashPage\";\n\nloadGlobalState();\n\nconst rng = seedrandom();\n\nlet lastTime;\n\nfunction changeCurrentAction(newAction) {\n    getGlobalState().currentAction = newAction;\n    return getGlobalState().currentAction;\n}\n\nfunction pushLogItem(item) {\n    if (getGlobalState().actionLog.length > (config.actionLog.maxSize || 10)) {\n        getGlobalState().actionLog.pop();\n    }\n    getGlobalState().actionLog.unshift(item);\n}\n\n\nfunction App() {\n    const [currentEncounter, setCurrentEncounter] = useState(getGlobalState().currentEncounter);\n    const accruedTime = useRef(0);\n    const manualSpeedUpActive = useRef(false);\n    const [displayedTime, setDisplayedTime] = useState(0);\n    const [currentAction, setCurrentAction] = useState(Actions[getGlobalState().currentAction]);\n    const [actionLog, setActionLog] = useState(getGlobalState().actionLog);\n    const [nextAction, setNextAction] = useState(getGlobalState().nextAction);\n    const player = useRef(getCharacter(0));\n    const [debugUiEnabled, setDebugUiEnabled] = useState(false);\n    const [paused, setPaused] = useState(getGlobalState().paused);\n\n    useHotkeys(\"p\", () => getGlobalState().paused = !getGlobalState().paused);\n    useHotkeys(\"`\", () => {\n        setDebugUiEnabled(enabled => {\n            if (config.debug) {\n                if (!enabled) {\n                    getGlobalState().paused = true;\n                    setPaused(getGlobalState().paused);\n                }\n                saveGlobalState();\n                return !enabled\n            } else {\n                return false;\n            }\n        });\n    });\n\n    useEffect(() => {\n        function applyAction(action) {\n            pushLogItem(action);\n            switch (action.result) {\n                case \"combat-end\":\n                    if (player.current.currentHp < player.current.maximumHp) {\n                        setCurrentAction(Actions[changeCurrentAction(\"recovering\")]);\n                    } else {\n                        if (config.artifacts.enabled) {\n                            setCurrentAction(Actions[changeCurrentAction(\"looting\")]);\n                        } else {\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                        }\n                    }\n                    setCurrentEncounter(getGlobalState().currentEncounter = null);\n                    break;\n                case \"kill\":\n                    if (getGlobalState().currentEncounter.pendingActions[0].result === \"combat-end\") {\n                        if (getCharacter(0).isDamaged) {\n                            getGlobalState().nextAction = \"healing\";\n                            setNextAction(getGlobalState().nextAction);\n                        }\n                        applyAction(getGlobalState().currentEncounter.pendingActions.shift());\n                    }\n                    const enemy = getCharacter(action.target);\n                    const enemyIsLesserDemon = getCharacter(0).otherDemonIsLesserDemon(enemy);\n                    if (enemyIsLesserDemon) {\n                        debugMessage(`Not gaining power because enemy ${action.target} was a Lesser Demon.`);\n                    }\n                    if (action.actor === 0 && action.target !== 0 && !enemyIsLesserDemon) {\n                        debugMessage(\"Player killed a non-lesser enemy and gained power.\");\n                        const player = getCharacter(0);\n                        const powerToGain = enemy.powerLevel.mul(2);\n                        const powerGained = player.gainPower(powerToGain);\n                        pushLogItem(wrapLogItem({\n                            result: \"gainedPower\",\n                            value: powerGained\n                        }))\n                    }\n                    break;\n                case \"hit\":\n                case \"miss\":\n                    (action.effects || []).forEach(effect => {\n                        const targetCharacter = getCharacter(effect.target);\n                        switch (effect.event) {\n                            case \"damage\":\n                                targetCharacter.currentHp = targetCharacter.currentHp.minus(effect.value);\n                                if (targetCharacter.currentHp.lt(Decimal(0))) {\n                                    targetCharacter.currentHp = Decimal(0);\n                                }\n                                if (getGlobalState().currentEncounter.pendingActions[0].result === \"kill\") {\n                                    applyAction(getGlobalState().currentEncounter.pendingActions.shift());\n                                }\n                                break;\n                            case \"apply_effect\":\n                                targetCharacter.addModifier({\n                                    effect: effect.effect,\n                                    magnitude: effect.value\n                                });\n                                break;\n                        }\n                    });\n                    break;\n                case \"action_skipped\":\n                    break;\n                default:\n                    throw new Error();\n            }\n            saveGlobalState();\n        }\n\n        function clearActionLog() {\n            setActionLog(getGlobalState().actionLog = []);\n        }\n\n        function tick(timestamp) {\n            if (!lastTime) {\n                lastTime = timestamp;\n            } else if (!getGlobalState().paused) {\n                if (accruedTime.current >= _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration)) {\n                    saveGlobalState();\n                    accruedTime.current = 0;\n                    switch (getGlobalState().currentAction) {\n                        case \"exploring\":\n                            if (getCharacter(0).currentHp.lt(getCharacter(0).maximumHp)) {\n                                setCurrentAction(Actions[changeCurrentAction(\"recovering\")]);\n                                // TODO: Implement random encounter chance\n                            } else {\n                                const player = getCharacter(0);\n                                getGlobalState().currentEncounter = Regions[getGlobalState().currentRegion].startEncounter(getCharacter(0), rng);\n                                setCurrentEncounter(getGlobalState().currentEncounter);\n                                setCurrentAction(Actions[changeCurrentAction(\"approaching\")]);\n                                getGlobalState().nextAction = getGlobalState().currentEncounter.enemies.reduce((actionSoFar, nextEnemy) => {\n                                    if (actionSoFar !== \"fighting\") {\n                                        return actionSoFar;\n                                    }\n\n                                    if (player.otherDemonIsLesserDemon(nextEnemy)) {\n                                        return \"intimidating\";\n                                    } else if (player.otherDemonIsGreaterDemon(nextEnemy)) {\n                                        return \"fleeing\";\n                                    } else {\n                                        return \"fighting\";\n                                    }\n                                }, \"fighting\");\n                                setNextAction(getGlobalState().nextAction);\n                                clearActionLog();\n                                if(getGlobalState().passivePowerIncome.gt(0)) {\n                                    getCharacter(0).absorbedPower = getCharacter(0).absorbedPower.plus(getGlobalState().passivePowerIncome);\n                                    pushLogItem({\n                                        message: `Your Bound lesser demons grant you ${getGlobalState().passivePowerIncome.toFixed()} power.`,\n                                        uuid: v4()\n                                    })\n                                }\n\n                                const enemies = getGlobalState().currentEncounter.enemies;\n                                if (player.otherDemonIsGreaterDemon(enemies[0])) {\n                                    pushLogItem({\n                                        message: `💀Approaching Greater ${enemies[0].name}.💀`,\n                                        uuid: v4()\n                                    });\n                                } else if (player.otherDemonIsLesserDemon(enemies[0])) {\n                                    pushLogItem({\n                                        message: `Approaching Lesser ${enemies[0].name}.`,\n                                        uuid: v4()\n                                    });\n                                } else {\n                                    pushLogItem({\n                                        message: `Approaching ${enemies[0].name}.`,\n                                        uuid: v4()\n                                    });\n                                }\n                                saveGlobalState();\n                            }\n                            break;\n                        case \"approaching\": {\n                            // Since we're starting a new combat, remove any old, dead characters\n                            const player = getCharacter(0);\n                            switch (getGlobalState().nextAction) {\n                                case \"fighting\":\n                                    const enemies = getGlobalState().currentEncounter.enemies;\n                                    resolveCombat(rng, {\n                                        parties: [[player], enemies]\n                                    }).onRoundResolved((result, lastRound) => {\n                                        if (lastRound !== undefined) {\n                                            getGlobalState().currentEncounter.pendingActions.push(lastRound);\n                                        }\n                                    });\n                                    break;\n                            }\n                            setCurrentAction(Actions[changeCurrentAction(getGlobalState().nextAction)]);\n                            setNextAction();\n                            const deadCharacters = Object.keys(getGlobalState().characters)\n                                .filter(id => id !== '0' && !getGlobalState().currentEncounter.enemies.find(c => c.id == id));\n                            deadCharacters.forEach(id => {\n                                delete getGlobalState().characters[id]\n                            });\n                            break;\n                        }\n                        case \"intimidating\": {\n                            const enemy = getGlobalState().currentEncounter.enemies[0];\n                            const chanceToIntimidate = Decimal(5).times(Decimal(2).pow(getCharacter(0).powerLevel.minus(1).minus(enemy.powerLevel).toNumber()));\n                            const roll = Math.floor(rng.double() * 100) + 1;\n                            if (chanceToIntimidate.gte(roll)) {\n                                const periodicPowerIncreases = Decimal(1);\n                                pushLogItem(wrapLogItem({\n                                    result: \"intimidated\",\n                                    target: enemy.id,\n                                    value: periodicPowerIncreases\n                                }));\n                                getGlobalState().passivePowerIncome = getGlobalState().passivePowerIncome.plus(periodicPowerIncreases);\n                            } else {\n                                pushLogItem(wrapLogItem({\n                                    result: \"enemy-fled\",\n                                    target: enemy.id\n                                }));\n                            }\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            break;\n                        }\n                        case \"fleeing\":\n                            const player = getCharacter(0);\n                            const enemy = getGlobalState().currentEncounter.enemies[0];\n                            getGlobalState().currentEncounter = null;\n                            setCurrentEncounter(null);\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            pushLogItem({\n                                result: \"escaped\",\n                                uuid: v4()\n                            });\n                            if (player.otherDemonIsGreaterDemon(enemy)) {\n                                const powerToGain = evaluateExpression(config.mechanics.xpFromGreaterDemon, {\n                                    $enemy: enemy\n                                });\n                                const powerGained = player.gainPower(powerToGain);\n                                pushLogItem(wrapLogItem({\n                                    result: \"gainedPower\",\n                                    value: powerGained,\n                                }));\n                            }\n                            break;\n                        case \"fighting\" : {\n                            if (getGlobalState().currentEncounter.pendingActions.length) {\n                                const nextAction = getGlobalState().currentEncounter.pendingActions.shift();\n                                applyAction(nextAction);\n                                setActionLog([...getGlobalState().actionLog]);\n                            } else {\n                                setCurrentAction(Actions[changeCurrentAction(\"fleeing\")]);\n                            }\n                            break;\n                        }\n                        case \"looting\":\n                            const lootRoll = Math.floor(rng.double() * 666);\n                            if (lootRoll <= getGlobalState().currentEncounter.encounterLevel) {\n\n                            }\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            break;\n                        case \"recovering\": {\n                            const player = getCharacter(0);\n                            if (player.currentHp.lt(player.maximumHp)) {\n                                const amountToHeal = player.currentHp.plus(player.healing).gt(player.maximumHp) ?\n                                    player.maximumHp.minus(player.currentHp) : player.healing;\n                                player.currentHp = player.currentHp.plus(amountToHeal);\n                                pushLogItem({\n                                    target: player.id,\n                                    value: amountToHeal,\n                                    result: \"healed\",\n                                    uuid: v4()\n                                })\n                            }\n                            if (player.currentHp.gte(player.maximumHp)) {\n                                setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            }\n                            break;\n                        }\n                        case \"reincarnating\":\n                            setCurrentEncounter();\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            setActionLog([]);\n                            getGlobalState().actionLog = [];\n                            break;\n                        default:\n                            throw new Error(`Action ${getGlobalState().currentAction} not supported.`);\n                    }\n                }\n\n                setDisplayedTime(accruedTime.current);\n                const passedTime = timestamp - lastTime;\n                const adjustedTime = passedTime * (manualSpeedUpActive.current ? getManualSpeedMultiplier() : 1);\n                accruedTime.current = Math.min(accruedTime.current + adjustedTime, _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration));\n            }\n            lastTime = timestamp;\n            requestAnimationFrame(tick);\n            setActionLog([...getGlobalState().actionLog]);\n        }\n\n        requestAnimationFrame(tick)\n    }, []);\n\n    return (\n        <MemoryRouter initialEntries={[\n            getGlobalState().currentAction === \"reincarnating\" ? \"/reincarnatin\" : (\n                getGlobalState().currentAction === \"adventuring\" ? \"/adventuring\" : \"/\")\n        ]} basename=\"%PUBLIC_URL%\">\n            <Switch>\n                <Route path=\"/\" exact>\n                    <SplashPage/>\n                </Route>\n                <Route path=\"/reincarnating\" exact>\n                    <ReincarnationSelectionPage reincarnate={(monster, attributes) => {\n                        reincarnateAs(monster, attributes);\n                        setCurrentAction(getGlobalState().currentAction);\n                        unpause();\n                        setPaused(false);\n                        accruedTime.current = 10000000;\n                    }}/>\n                </Route>\n                <Route path=\"/adventuring\" exact>\n                    <AdventuringPage player={player.current}\n                                     paused={paused}\n                                     togglePause={(newValue) => setPaused(newValue)}\n                                     setNextAction={newAction => setNextAction(newAction)}\n                                     actionTime={displayedTime}\n                                     currentEncounter={currentEncounter}\n                                     startManualSpeedup={() => {\n                                         manualSpeedUpActive.current = config.manualSpeedup.enabled;\n                                     }}\n                                     stopManualSpeedup={() => {\n                                         manualSpeedUpActive.current = false\n                                     }}\n                                     currentAction={currentAction}\n                                     nextAction={nextAction}\n                                     actionLog={actionLog}\n                    />\n                </Route>\n            </Switch>\n            {debugUiEnabled && <DebugUi/>}\n        </MemoryRouter>\n    );\n}\n\nexport default App;\n\nfunction wrapLogItem(item) {\n    return {\n        uuid: v4(),\n        ...item\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}