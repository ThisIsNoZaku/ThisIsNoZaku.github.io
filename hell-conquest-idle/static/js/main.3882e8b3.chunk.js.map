{"version":3,"sources":["data/creatures.js","config.js","debugging.js","character.js","engine/index.js","data/Regions.js","data/Actions.js","data/Traits.js","components/scene/ReincarnationSelectionPage.js","components/charactersheet/PowerLevelDisplay.js","components/charactersheet/CharacterAttributes.js","components/charactersheet/CharacterTraits.js","components/CharacterSheet.js","components/PlayerStats.js","components/TopSection.js","components/BottomSection.js","components/EnemySidebar.js","components/scene/AdventuringPage.js","components/DebugUi.js","components/scene/SplashPage.js","engine/CharacterCombatState.js","engine/combat/index.js","combatResult.js","App.js","reportWebVitals.js","index.js"],"names":["Creatures","bloodthirstyKnight","name","traits","appearance","texture","description","rapaciousHighwayman","enabled","condemnedSlasher","crushingSnake","skitteringHorror","deadlyHornet","assertCreatureExists","id","Error","console","log","process","REACT_APP_DEBUG_MODE","config","manualSpeedup","multiplier","artifacts","REACT_APP_FEATURE_ARTIFACTS_ENABLED","actionLog","maxSize","REACT_APP_MAX_ACTIONLOG_SIZE","encounters","lesserEncounterChanceWeight","greaterEncounterChanceWeight","evenEncounterChanceWeight","lesserLevelScale","greaterLevelScale","characters","player","attributesPerLevel","mechanics","xpFromGreaterDemon","levelToPowerEquation","powerToLevelEquation","latentPowerGainOnReincarnate","maxLevel","accuracy","baseAttribute","attributeBonusScale","defense","evasion","attackDamage","pointsPerLevel","traitRank","fatigue","evasionPenaltyPerPoint","hp","base","healingPerLevel","attributes","brutality","label","globalScaling","_","icon","cunning","deceit","madness","combat","baseHitChance","attributeDamageModifier","defaultMinimumDamageMultiplier","defaultMedianDamageMultiplier","defaultMaximumDamageMultiplier","baseMinimumDamageWeight","baseMedianDamageWeight","baseMaximumDamageWeight","debug","debugMessage","apply","arguments","Character","props","this","_isPc","isPc","_name","_absorbedPower","Decimal","absorbedPower","_latentPower","latentPower","_currentHp","maximumHp","_attributes","Attributes","_combat","CombatStats","_traits","Object","keys","reduce","transformed","next","_appearance","_modifiers","modifiers","newAppearance","newTraits","other","greaterDemonScale","evaluateExpression","enemy","powerLevel","gte","plus","lesserDemonScale","lte","minus","powerGained","times","div","floor","getLevelForPower","gt","getPowerNeededForLevel","forEach","trait","getGlobalState","unlockedTraits","modifier","push","newHealth","lt","currentHp","newLatentPower","mul","value","character","_brutality","_cunning","_deceit","_madness","defineProperty","latentPowerMultiplier","targetCharacter","targetEvasionModifier","undefined","selfAccuracyModifier","minimum","median","max","calculateDamage","hitTypeDamageMultiplier","attributeScore","effectivePowerLevel","attributeModifier","ceil","saveKey","require","Package","expressionCache","globalState","loadGlobalState","saveGlobalState","window","localStorage","setItem","JSON","stringify","state","loaded","getItem","parse","stateReviver","creatures","regions","passivePowerIncome","unlockedMonsters","paused","currentAction","nextAction","highestLevelReached","startingTraits","currentEncounter","manualSpeedMultiplier","currentRegion","exploration","explorationTime","approachTime","combatTime","lootingTime","recoveryTime","fleeingTime","intimidateTime","reincarnationTime","0","statuses","items","minimumDamageMultiplier","medianDamageMultiplier","maximumDamageMultiplier","tutorials","getCharacter","assertCharacterExists","nextMonsterId","getSpriteForCreature","expression","context","Function","call","level","$level","powerPoints","$powerPoints","key","map","parsed","Number","parseFloat","isNaN","Region","available","background","rng","encounterType","combinedEncounterChances","encounterTypeRoll","Math","double","encounterLevel","encounterOffset","difference","min","encounterDef","region","possibleEncounters","filter","encounterId","encounterEnabled","debugNotDisabled","randomKey","random","length","chooseRandomEncounter","pendingActions","enemies","flatMap","enemyDef","count","i","nextId","generateCreature","Regions","forest","type","far","mid","close","caves","mountains","desert","Actions","exploring","duration","approaching","looting","fleeing","fighting","reincarnating","recovering","intimidating","Traits","bloodrage","on_hitting","conditions","health_percentage","target","below","effects","damage_modifier","percent","cupidity","on_intimidate","chance","steal_item_chance","murderousFrenzy","add_modifier","speed","rounds","inescapableGrasp","terrifyingSkitter","on_combat_start","stunned","piercingStrike","defense_modifier","getTrait","traitId","ReincarnationSelectionPage","useRef","history","useHistory","useState","substring","setAttributes","setStartingTraits","spendableBonusPoints","availableBonusPoints","values","sum","useEffect","Grid","container","item","xs","style","textAlign","toFixed","attribute","Tooltip","title","rank","src","Button","disabled","onClick","justify","height","variant","color","dangerouslySetInnerHTML","__html","alignItems","creatureEnabled","debugEnabled","width","reincarnate","PowerLevelDisplay","powerLevelDisplay","useMemo","Fragment","CharacterAttributes","Help","toNumber","CharacterTraits","CharacterSheet","spriteSrc","hitChances","getHitChancesAgainst","combinedHitWeights","total","powerRequiredForCurrentLevel","powerNeededForNextLevel","progressToNextLevel","round","minimumDamage","medianDamage","maximumDamage","styles","root","backgroundColor","PlayerStats","Paper","elevation","display","flex","buttons","TopSection","reincarnateEnabled","justifyContent","flexDirection","actions","alignSelf","action","maxHeight","actionProgress","overflowY","BottomSection","onMouseEnter","startManualSpeedup","onMouseLeave","stopManualSpeedup","togglePause","actionButton","details","direction","low","high","optimum","actionTime","message","uuid","result","actor","tick","effect","describeEffect","join","printActionItem","event","mod","percentModifier","text","setNextAction","nextActionName","EnemySidebar","overflow","image","position","left","AdventuringPage","className","zIndex","newAction","minHeight","bottom","padding","DebugUi","setCreatures","setRegions","minLevel","setMinLevel","setMaxLevel","setManualSpeedMultiplier","playerAbsorbedPower","setPlayerAbsorbedPower","removeItem","alert","TextField","onChange","e","newValue","parseInt","regionId","pkg","changelog","SplashPage","version","changes","entry","CharacterCombatState","party","_speed","_fatigue","lastActed","baseSpeed","currentValue","canAct","nextModifier","resolveHit","combatResult","actingCharacter","damageToInflict","hitTypeChances","damageRoll","attackResult","baseDamage","attackerDamageMultiplier","targetDefenseMultiplier","otherEffects","applyTrait","attack","damageFactor","finalDamage","combatantCombatStats","source","attackingCharacterId","targetCharacterId","damageDone","v4","generateHitCombatResult","resolveMiss","generateMissCombatResult","resolveSkippedAction","actingCharacterId","generateSkipActionResult","sourceCharacter","rankModifier","every","condition","targetPercent","targetCurrentHealth","targetMaxHealth","currentHealthPercent","conditionMet","chanceToTrigger","$rank","roll","traitEffect","percentDamageModifier","newMultiplier","defenseModifier","modifierToAddDefinition","effectType","effectTarget","roundDuration","ability","combatantId","existingEffect","find","makeAttackRoll","combatState","attackAccuracy","rawRoll","lastTime","seedrandom","changeCurrentAction","pushLogItem","pop","unshift","App","setCurrentEncounter","accruedTime","manualSpeedUpActive","displayedTime","setDisplayedTime","setCurrentAction","setActionLog","debugUiEnabled","setDebugUiEnabled","setPaused","useHotkeys","applyAction","current","isDamaged","shift","enemyIsLesserDemon","otherDemonIsLesserDemon","powerToGain","wrapLogItem","gainPower","addModifier","magnitude","requestAnimationFrame","timestamp","startEncounter","actionSoFar","nextEnemy","otherDemonIsGreaterDemon","gainedPower","definition","winner","combatants","parties","partyIndex","characterIndex","combatant","otherCombatant","sort","a","b","initiativeCount","wrapped","isAlive","alive","characterSpeed","acting","enemyParty","livingEnemies","attackRollResult","playerPartyDead","enemyPartyDead","resolveCombat","c","chanceToIntimidate","pow","periodicPowerIncreases","$enemy","amountToHeal","healing","adjustedTime","debugMultiplier","baseMultiplier","getManualSpeedMultiplier","initialEntries","basename","path","exact","monster","monsterId","newAttributes","currentDemon","options","m","latentPowerGain","reincarnateAs","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3882e8b3.chunk.js","sourcesContent":["export const Creatures  = {\r\n    bloodthirstyKnight: {\r\n        name: \"Bloodthirsty Knight\",\r\n        traits: [\"bloodrage\"],\r\n        appearance: \"bloodthirstyKnight\",\r\n        texture: \"01_warrior.png\",\r\n        description: \"A ruthless warrior who delighted in slaughtering whoever they encounter on the battlefield.\",\r\n    },\r\n    rapaciousHighwayman: {\r\n        name: \"Rapacious Highwayman\",\r\n        traits: [\"cupidity\"],\r\n        enabled: false,\r\n        appearance: \"rapaciousHighwayman\",\r\n        texture: \"02_hunter.png\",\r\n        description: \"A thief who stole from whomever he could get away with, from wealthy merchants to starving vagrants.\",\r\n    },\r\n    condemnedSlasher: {\r\n        name: \"Condemned Slasher\",\r\n        traits: [\"murderousFrenzy\"],\r\n        appearance: \"condemnedSlasher\",\r\n        texture: \"03_rogue.png\",\r\n        description: \"A madman who gained exquisite pleasure from seeing how many cuts could be made in a victim's body before they died.\",\r\n    },\r\n    crushingSnake: {\r\n        name: \"Crushing Snake\",\r\n        traits: [\"inescapableGrasp\"],\r\n        appearance: \"crushingSnake\",\r\n        texture: \"06_snake_01.png\",\r\n        description: \"A monstrous reptile which\",\r\n    },\r\n    skitteringHorror: {\r\n        name: \"Skittering Horror\",\r\n        traits: [\"terrifyingSkitter\"],\r\n        appearance: \"skitteringHorror\",\r\n        texture: \"10_spider.png\",\r\n        description: \"A massive spider that enjoys stalking its prey, frightening it by the sickening skittering of it's arachnid legs.\"\r\n    },\r\n    deadlyHornet: {\r\n        name: \"Deadly Hornet\",\r\n        traits: [\"piercingStrike\"],\r\n        appearance: \"deadlyHornet\",\r\n        texture: \"12_wasp.png\",\r\n        description: \"An insect whose stinger is able to pierce even metal protection.\"\r\n    }\r\n}\r\n\r\nexport function assertCreatureExists(id) {\r\n    if(!Creatures[id]) {\r\n        throw new Error(`No creature with id ${id} is defined`);\r\n    }\r\n}","import * as _ from \"lodash\";\r\nconsole.log(process.env.REACT_APP_DEBUG_MODE, typeof process.env.REACT_APP_DEBUG_MODE);\r\n\r\nexport const config = {\r\n    manualSpeedup: {\r\n        enabled: true,\r\n        multiplier: 2\r\n    },\r\n    artifacts: {\r\n        enabled: process.env.REACT_APP_FEATURE_ARTIFACTS_ENABLED || false\r\n    },\r\n    actionLog: {\r\n        maxSize:  process.env.REACT_APP_MAX_ACTIONLOG_SIZE || 20,\r\n    },\r\n    encounters: {\r\n        lesserEncounterChanceWeight: 10,\r\n        greaterEncounterChanceWeight: 10,\r\n        evenEncounterChanceWeight: 80,\r\n        lesserLevelScale: 3, // A demon is \"lesser\" than another when its level is this much lower.\r\n        greaterLevelScale: 1 // A demon is \"greater\" than another when its level is this much higher.\r\n    },\r\n    characters: {\r\n        player: {\r\n            attributesPerLevel: 2\r\n        }\r\n    },\r\n    mechanics: {\r\n        xpFromGreaterDemon: \"$enemy.powerLevel\",\r\n        levelToPowerEquation: \"$level.eq(1) ? Decimal(0) : Decimal(5).pow($level.minus(1).toNumber())\",\r\n        powerToLevelEquation: \"Decimal(0).eq($powerPoints) ? Decimal(1) : Decimal.log($powerPoints, 5).plus(1).floor()\",\r\n        latentPowerGainOnReincarnate: \"player.powerLevel.minus(1).pow(2).times(10)\",\r\n        maxLevel: 100,\r\n        accuracy: { // Determines how accuracy rolls work\r\n            baseAttribute: \"deceit\",\r\n            attributeBonusScale: 10\r\n        },\r\n        defense: {\r\n            baseAttribute: \"brutality\",\r\n            attributeBonusScale: 10\r\n        },\r\n        evasion: {\r\n            baseAttribute: \"cunning\",\r\n            attributeBonusScale: 10\r\n        },\r\n        attackDamage: {\r\n            pointsPerLevel: 10,\r\n            baseAttribute: \"brutality\",\r\n            attributeBonusScale: 10\r\n        },\r\n        traitRank: {\r\n            baseAttribute: \"madness\",\r\n            attributeBonusScale: 10\r\n        },\r\n        fatigue: {\r\n            evasionPenaltyPerPoint: 2\r\n        },\r\n        hp: {\r\n            base: 50,\r\n            pointsPerLevel: 50,\r\n            healingPerLevel: 100\r\n        }\r\n    },\r\n    attributes: {\r\n        brutality: {\r\n            label: \"Brutality\",\r\n            globalScaling: 1,\r\n            description: _.template(`Brutality is how savage and ruthless a Demon is. It gives a \\${5 * rank}% bonus to attack damage, defense and intimidation checks.`),\r\n            icon: \"icons/icons-92.png\"\r\n        },\r\n        cunning: {\r\n            label: \"Cunning\",\r\n            globalScaling: 1,\r\n            description: _.template(\"Cunning is how quick thinking a Demon is. It gives a ${5 * rank}% bonus to Evasion, and non-combat encounters.\"),\r\n            icon: \"icons/icons-24.png\"\r\n        },\r\n        deceit: {\r\n            label: \"Deceit\",\r\n            globalScaling: 1,\r\n            description: _.template(\"Deceit is how underhanded and manipulative a Demon is. It gives a ${5 * rank}% bonus to Accuracy and social encounters.\"),\r\n            icon: \"icons/icons-17.png\"\r\n        },\r\n        madness: {\r\n            label: \"Madness\",\r\n            globalScaling: 1,\r\n            description: _.template(\"Madness is how disconnected from the limits of reality the Demon is. It gives a ${5 * rank}% bonus to the effect of wielded Artifacts and the effects of Traits.\"),\r\n            icon: \"icons/icons-124.png\"\r\n        }\r\n    },\r\n    combat: {\r\n        baseHitChance: 90,\r\n        attributeDamageModifier: .02,\r\n        defaultMinimumDamageMultiplier: .5,\r\n        defaultMedianDamageMultiplier: 1,\r\n        defaultMaximumDamageMultiplier: 1.5,\r\n        baseMinimumDamageWeight: 20,\r\n        baseMedianDamageWeight: 60,\r\n        baseMaximumDamageWeight: 20\r\n    },\r\n    debug: process.env.REACT_APP_DEBUG_MODE === \"true\"\r\n}","import {config} from \"./config\";\r\n\r\nexport function debugMessage() {\r\n    if(config.debug) {\r\n        console.debug.apply(null, arguments);\r\n    }\r\n}","import {config} from \"./config\";\r\nimport {evaluateExpression, getGlobalState, getLevelForPower, getPowerNeededForLevel} from \"./engine\";\r\nimport {Creatures} from \"./data/creatures\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nexport class Character {\r\n    constructor(props) {\r\n        this._isPc = props.isPc || props._isPc;\r\n        this.id = props.id;\r\n        this._name = props.name || props._name;\r\n        this._absorbedPower = Decimal(props.absorbedPower || props._absorbedPower || 0);\r\n        this._latentPower = Decimal(props.latentPower || props._latentPower || 0);\r\n        this._currentHp = Decimal(props._currentHp || this.maximumHp);\r\n        this._attributes = new Attributes(props.attributes || props._attributes, this);\r\n        this._combat = new CombatStats(props.combat || props._combat, this);\r\n        this._traits = Object.keys(props.traits || props._traits).reduce((transformed, next) => {\r\n            transformed[next] = Decimal((props.traits || props._traits)[next]);\r\n            return transformed;\r\n        }, {});\r\n        this._appearance = props.appearance || props._appearance;\r\n        this._modifiers = props.modifiers || props._modifiers || [];\r\n    }\r\n\r\n    get isPc() {\r\n        return this._isPc;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get powerLevel() {\r\n        return getLevelForPower(this._absorbedPower);\r\n    }\r\n\r\n    get currentHp() {\r\n        return Decimal(this._currentHp);\r\n    }\r\n\r\n    set currentHp(newHealth) {\r\n        if (this.maximumHp.lt(newHealth)) {\r\n            this._currentHp = this.maximumHp;\r\n        } else {\r\n            this._currentHp = newHealth;\r\n        }\r\n    }\r\n\r\n    get alive() {\r\n        return this.currentHp > 0;\r\n    }\r\n\r\n    get latentPower() {\r\n        return this._latentPower;\r\n    }\r\n\r\n    set latentPower(newLatentPower) {\r\n        this._latentPower = newLatentPower;\r\n    }\r\n\r\n    get maximumHp() {\r\n        return this.powerLevel\r\n            .mul(this.latentPower.div(100).plus(1))\r\n            .mul(config.mechanics.hp.pointsPerLevel)\r\n            .floor();\r\n    }\r\n\r\n    get attributes() {\r\n        return this._attributes;\r\n    }\r\n\r\n    get combat() {\r\n        return this._combat;\r\n    }\r\n\r\n    get traits() {\r\n        return this._traits;\r\n    }\r\n\r\n    set traits(newTraits) {\r\n        this._traits = newTraits;\r\n    }\r\n\r\n    get appearance() {\r\n        return this._appearance;\r\n    }\r\n\r\n    reincarnate(newAppearance, newTraits) {\r\n        this._appearance = newAppearance;\r\n        this._traits = newTraits;\r\n    }\r\n\r\n    otherDemonIsGreaterDemon(other) {\r\n        const greaterDemonScale = evaluateExpression(config.encounters.greaterLevelScale, {\r\n            player: this,\r\n            enemy: other\r\n        });\r\n        return other.powerLevel.gte(this.powerLevel.plus(greaterDemonScale));\r\n    }\r\n\r\n    otherDemonIsLesserDemon(other) {\r\n        const lesserDemonScale = evaluateExpression(config.encounters.lesserLevelScale, {\r\n            player: this,\r\n            enemy: other\r\n        });\r\n        return other.powerLevel.lte(this.powerLevel.minus(lesserDemonScale));\r\n    }\r\n\r\n    gainPower(powerGained) {\r\n        powerGained = powerGained.times(this.latentPower.div(100).plus(1)).floor();\r\n        this._absorbedPower = this._absorbedPower.plus(powerGained);\r\n        if (getLevelForPower(this._absorbedPower).gt(config.mechanics.maxLevel)) {\r\n            this._absorbedPower = getPowerNeededForLevel(config.mechanics.maxLevel);\r\n        }\r\n        Creatures[this.appearance].traits.forEach(trait => {\r\n            this._traits[trait] = getLevelForPower(this._absorbedPower);\r\n            getGlobalState().unlockedTraits[trait] = getLevelForPower(this._absorbedPower);\r\n        });\r\n        return powerGained;\r\n    }\r\n\r\n    get healing() {\r\n        return Decimal(this.powerLevel.times(config.mechanics.hp.healingPerLevel));\r\n    }\r\n\r\n    get absorbedPower() {\r\n        return this._absorbedPower;\r\n    }\r\n\r\n    set absorbedPower(value) {\r\n        this._absorbedPower = value;\r\n        if (getLevelForPower(this._absorbedPower).gt(config.mechanics.maxLevel)) {\r\n            this._absorbedPower = getPowerNeededForLevel(config.mechanics.maxLevel);\r\n        }\r\n        if (this.appearance) {\r\n            Creatures[this.appearance].traits.forEach(trait => {\r\n                this._traits[trait] = getLevelForPower(this._absorbedPower);\r\n                getGlobalState().unlockedTraits[trait] = getLevelForPower(this._absorbedPower);\r\n            });\r\n        }\r\n    }\r\n\r\n    get speed() {\r\n        return Decimal(100);\r\n    }\r\n\r\n    addModifier(modifier) {\r\n        this._modifiers.push(modifier);\r\n    }\r\n\r\n    get modifiers() {\r\n        return this._modifiers;\r\n    }\r\n}\r\n\r\nclass Attributes {\r\n    constructor(attributes, character) {\r\n        this._brutality = attributes.brutality || attributes._brutality || 0;\r\n        this._cunning = attributes.cunning || attributes._cunning || 0;\r\n        this._deceit = attributes.deceit || attributes._deceit || 0;\r\n        this._madness = attributes.madness || attributes._madness || 0;\r\n        Object.defineProperty(this, \"character\", {\r\n            value: () => character\r\n        })\r\n    }\r\n\r\n    get brutality() {\r\n        const latentPowerMultiplier = this.character().latentPower.div(100).plus(1);\r\n        return Decimal(this._brutality).times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get cunning() {\r\n        const latentPowerMultiplier = this.character().latentPower.div(100).plus(1);\r\n        return Decimal(this._cunning).times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get deceit() {\r\n        const latentPowerMultiplier = this.character().latentPower.div(100).plus(1);\r\n        return Decimal(this._deceit).times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get madness() {\r\n        const latentPowerMultiplier = this.character().latentPower.div(100).plus(1);\r\n        return Decimal(this._madness).times(latentPowerMultiplier).floor();\r\n    }\r\n}\r\n\r\nclass CombatStats {\r\n    constructor(props, character) {\r\n        this.character = function () {\r\n            return character;\r\n        }\r\n        this.fatigue = 0;\r\n    }\r\n\r\n    getHitChancesAgainst(targetCharacter) {\r\n        const targetEvasionModifier = targetCharacter !== undefined ? targetCharacter.attributes[config.mechanics.evasion.baseAttribute]\r\n            .times(config.mechanics.evasion.attributeBonusScale) : Decimal(0);\r\n        const selfAccuracyModifier = this.character().attributes[config.mechanics.accuracy.baseAttribute]\r\n            .times(config.mechanics.accuracy.attributeBonusScale);\r\n        return {\r\n            minimum: Decimal(config.combat.baseMinimumDamageWeight)\r\n                .plus(targetEvasionModifier.times(2)).floor(),\r\n            median: Decimal(config.combat.baseMedianDamageWeight)\r\n                .plus(targetEvasionModifier).plus(selfAccuracyModifier).floor(),\r\n            max: Decimal(config.combat.baseMaximumDamageWeight)\r\n                .plus(selfAccuracyModifier.times(2))\r\n                .floor()\r\n        }\r\n    }\r\n\r\n    get minimumDamage() {\r\n        return calculateDamage(config.combat.defaultMinimumDamageMultiplier, this.character().powerLevel, this.character().latentPower, this.character().attributes.brutality);\r\n    }\r\n\r\n    get medianDamage() {\r\n        return calculateDamage(config.combat.defaultMedianDamageMultiplier, this.character().powerLevel, this.character().latentPower, this.character().attributes.brutality);\r\n    }\r\n\r\n    get maximumDamage() {\r\n        return calculateDamage(config.combat.defaultMaximumDamageMultiplier, this.character().powerLevel, this.character().latentPower, this.character().attributes.brutality);\r\n    }\r\n\r\n    get canAct() {\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction calculateDamage(hitTypeDamageMultiplier, powerLevel, latentPower, attributeScore) {\r\n    const effectivePowerLevel = powerLevel.times(latentPower.div(100).plus(1));\r\n    const attributeModifier = attributeScore.times(config.combat.attributeDamageModifier).div(100).plus(1);\r\n    return effectivePowerLevel\r\n        .times(config.mechanics.attackDamage.pointsPerLevel)\r\n        .times(hitTypeDamageMultiplier)\r\n        .times(attributeModifier).ceil();\r\n}","import * as _ from \"lodash\";\r\nimport {assertCreatureExists, Creatures} from \"../data/creatures\";\r\nimport {debugMessage} from \"../debugging\";\r\nimport { Decimal } from \"decimal.js\";\r\nimport {Character} from \"../character\";\r\nimport {config} from \"../config\";\r\nimport * as Package from \"../../package.json\";\r\n\r\nexport const saveKey = require(\"md5\")(`hell-conquest-${Package.version}`);\r\n\r\nconst expressionCache = {};\r\n\r\nlet globalState = loadGlobalState()\r\n\r\nexport function getGlobalState() {\r\n    return globalState;\r\n}\r\n\r\nexport function saveGlobalState() {\r\n    window.localStorage.setItem(saveKey, JSON.stringify(globalState));\r\n}\r\n\r\nexport function loadGlobalState(state) {\r\n    const loaded = window.localStorage.getItem(saveKey);\r\n    return loaded ? JSON.parse(loaded, stateReviver) : {\r\n        debug: {\r\n            creatures: {},\r\n            regions: {}\r\n        },\r\n        passivePowerIncome: Decimal(0),\r\n        unlockedMonsters: {},\r\n        unlockedTraits: {},\r\n        paused: true,\r\n        currentAction: null,\r\n        nextAction: null,\r\n        id: 0,\r\n        highestLevelReached: Decimal(0),\r\n        startingTraits: {},\r\n        currentEncounter: null,\r\n        manualSpeedMultiplier: config.manualSpeedup.multiplier,\r\n        currentRegion: \"forest\",\r\n        actionLog: [],\r\n        exploration: {\r\n            explorationTime: 15 * 1000,\r\n            approachTime: 15 * 1000,\r\n            combatTime: 5 * 1000,\r\n            lootingTime: 15 * 1000,\r\n            recoveryTime: 2 * 1000,\r\n            fleeingTime: 15 * 1000,\r\n            intimidateTime: 15 * 1000,\r\n            reincarnationTime: 1\r\n        },\r\n        characters: {\r\n            0: new Character({\r\n                id: 0,\r\n                isPc: true,\r\n                name: \"You\",\r\n                powerLevel: Decimal(1),\r\n                absorbedPower: Decimal(0),\r\n                appearance: \"\",\r\n                statuses: {},\r\n                traits: {},\r\n                items: [],\r\n                attributes: {\r\n                    brutality: Decimal(0),\r\n                    cunning: Decimal(0),\r\n                    deceit: Decimal(0),\r\n                    madness: Decimal(0)\r\n                },\r\n                combat: {\r\n                    fatigue: 0,\r\n                    minimumDamageMultiplier: .5,\r\n                    medianDamageMultiplier: 1,\r\n                    maximumDamageMultiplier: 1.5\r\n                }\r\n            })\r\n        },\r\n        tutorials: {}\r\n    }\r\n}\r\n\r\nexport function getCharacter(id) {\r\n    assertCharacterExists(id);\r\n    return globalState.characters[id];\r\n}\r\n\r\nlet nextMonsterId = 1;\r\n\r\nexport function generateCreature(id, powerLevel, rng) {\r\n    assertCreatureExists(id);\r\n    if (config.debug) {\r\n        debugMessage(`Generating creature with id ${id} and level ${powerLevel}`);\r\n    }\r\n    if (powerLevel === undefined) {\r\n        throw new Error(\"No powerLevel\");\r\n    }\r\n    if (Number.isNaN(powerLevel)) {\r\n        throw new Error(\"Level cannot be NaN\");\r\n    }\r\n    const nextId = nextMonsterId++;\r\n    globalState.characters[nextId] = new Character({\r\n        id: nextId,\r\n        ...Creatures[id],\r\n        latentPower: evaluateExpression(config.mechanics.latentPowerGainOnReincarnate, {\r\n            player: {\r\n                powerLevel\r\n            }\r\n        }).times(5),\r\n        traits: Creatures[id].traits.reduce((traits, next) => {\r\n            traits[next] = powerLevel;\r\n            return traits;\r\n        }, {}),\r\n        absorbedPower: getPowerNeededForLevel(powerLevel),\r\n        artifacts: [],\r\n        statuses: [],\r\n        attributes: {\r\n            brutality: powerLevel.div(2).floor(),\r\n            cunning: powerLevel.div(2).floor(),\r\n            deceit: powerLevel.div(2).floor(),\r\n            madness: powerLevel.div(2).floor(),\r\n        },\r\n        combat: {\r\n            fatigue: 0,\r\n            minimumDamageMultiplier: .5,\r\n            medianDamageMultiplier: 1,\r\n            maximumDamageMultiplier: 1.5\r\n        }\r\n    });\r\n    saveGlobalState();\r\n    return globalState.characters[nextId];\r\n}\r\n\r\n\r\nexport function getSpriteForCreature(name) {\r\n    assertCreatureExists(name);\r\n    return `monsters/${Creatures[name].texture}`;\r\n}\r\n\r\nfunction assertCharacterExists(id) {\r\n    if (!globalState.characters[id]) {\r\n        throw new Error(`No creature exists for '${id}'`);\r\n    }\r\n}\r\n\r\nexport function evaluateExpression(expression, context) {\r\n    if(expression === null || expression === undefined) {\r\n        return expression;\r\n    }\r\n    if (!expressionCache[expression]) {\r\n        expressionCache[expression] = new Function(\"context\", `with(context) {return ${expression}}`);\r\n    }\r\n    context.Decimal = Decimal;\r\n    return expressionCache[expression].call(null, context);\r\n}\r\n\r\nexport function getPowerNeededForLevel(level) {\r\n    return evaluateExpression(config.mechanics.levelToPowerEquation, {\r\n        $level: Decimal(level)\r\n    });\r\n}\r\n\r\nexport function getLevelForPower(powerPoints) {\r\n    return evaluateExpression(config.mechanics.powerToLevelEquation, {\r\n        $powerPoints: Decimal(powerPoints)\r\n    });\r\n}\r\n\r\nexport function reincarnateAs(monsterId, newAttributes) {\r\n    const player = getCharacter(0);\r\n    // Improve your starting traits\r\n    const currentDemon = Creatures[player.appearance];\r\n    if (currentDemon) {\r\n        currentDemon.traits.forEach(trait => {\r\n            if (!globalState.unlockedTraits[trait] || player.powerLevel.gt(globalState.unlockedTraits[trait])) {\r\n                globalState.unlockedTraits[trait] = player.powerLevel;\r\n            }\r\n        });\r\n    }\r\n\r\n    if(Decimal(globalState.highestLevelReached).lt(player.powerLevel)) {\r\n        globalState.highestLevelReached = player.powerLevel;\r\n    }\r\n\r\n    if (monsterId === \"random\") {\r\n        const options = _.difference(Object.keys(Creatures).filter(m => {\r\n            return _.get(globalState, [\"debug\", \"creatures\", m, \"enabled\"], true) &&\r\n                Creatures[m].enabled !== false\r\n        }), Object.keys(globalState.unlockedMonsters)\r\n            .filter(m => globalState.unlockedMonsters[m]));\r\n        monsterId = options[Math.floor(Math.random() * options.length)];\r\n    }\r\n\r\n    // Update player attributes\r\n    Object.keys(player.attributes).forEach(attribute => {\r\n        player.attributes[attribute] = Decimal(newAttributes[attribute.substring(1)]);\r\n    })\r\n\r\n    // Add your level to your starting energy.\r\n    const latentPowerGain = evaluateExpression(config.mechanics.latentPowerGainOnReincarnate, {\r\n        player\r\n    })\r\n    globalState.characters[0].latentPower = globalState.characters[0].latentPower.plus(latentPowerGain);\r\n    globalState.characters[0].absorbedPower = Decimal(0);\r\n    globalState.characters[0].reincarnate(monsterId, globalState.startingTraits);\r\n    globalState.unlockedMonsters[monsterId] = true;\r\n\r\n    getCharacter(0).traits = Object.keys(globalState.startingTraits).reduce((startingTraits, trait) => {\r\n        startingTraits[trait] = globalState.unlockedTraits[trait];\r\n        return startingTraits;\r\n    }, {});\r\n    Creatures[monsterId].traits.forEach(trait => {\r\n        getCharacter(0).traits[trait] = 1;\r\n    })\r\n\r\n    globalState.currentEncounter = null;\r\n    globalState.currentAction = \"reincarnating\";\r\n    getCharacter(0).currentHp = getCharacter(0).maximumHp;\r\n    getGlobalState().passivePowerIncome = Decimal(0);\r\n\r\n    saveGlobalState();\r\n}\r\n\r\nexport function unpause() {\r\n    globalState.paused = false;\r\n}\r\n\r\nfunction stateReviver(key, value) {\r\n    switch (key) {\r\n        case \"characters\":\r\n            return Object.keys(value).reduce((characters, id) => {\r\n                characters[id] = new Character(value[id]);\r\n                return characters;\r\n            }, {});\r\n        case \"enemies\":\r\n            return Object.keys(value).map(character => {\r\n                return new Character(value[character]);\r\n            });\r\n        case \"paused\":\r\n            return false;\r\n        case \"passivePowerIncome\":\r\n            return Decimal(value);\r\n        case \"value\":\r\n            const parsed = Number.parseFloat(value);\r\n            if (Number.isNaN(parsed)) {\r\n                return value;\r\n            }\r\n            return Decimal(value);\r\n        default:\r\n            return value;\r\n    }\r\n}\r\n\r\nexport function resetDebug() {\r\n    globalState.debug.creatures = {};\r\n    globalState.debug.regions = {};\r\n}\r\n\r\nexport function getManualSpeedMultiplier() {\r\n    const debugMultiplier = _.get(globalState, [\"debug\", \"manualSpeedMultiplier\"]);\r\n    const baseMultiplier = globalState.manualSpeedMultiplier;\r\n    return debugMultiplier || baseMultiplier;\r\n}","import * as _ from \"lodash\";\r\nimport {evaluateExpression, generateCreature, getGlobalState} from \"../engine\";\r\nimport {config} from \"../config\";\r\nimport {debugMessage} from \"../debugging\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nclass Region {\r\n    constructor(name, available, encounters, background) {\r\n        this.name = name;\r\n        this.encounters = encounters;\r\n        this.background = background;\r\n    }\r\n\r\n    startEncounter(player, rng) {\r\n        let encounterType;\r\n        const combinedEncounterChances = config.encounters.lesserEncounterChanceWeight +\r\n            config.encounters.greaterLevelScale +\r\n            config.encounters.evenEncounterChanceWeight;\r\n        const encounterTypeRoll = Math.floor(rng.double() * combinedEncounterChances) + 1;\r\n        if (encounterTypeRoll <= config.encounters.lesserEncounterChanceWeight) {\r\n            encounterType = \"lesser\";\r\n        } else if (encounterTypeRoll <= config.encounters.lesserEncounterChanceWeight + config.encounters.evenEncounterChanceWeight) {\r\n            encounterType = \"even\";\r\n        } else {\r\n            encounterType = \"greater\";\r\n        }\r\n        let encounterLevel = player.powerLevel;\r\n        switch (encounterType) {\r\n            case \"greater\": {\r\n                const encounterOffset = Math.floor(rng.double() * config.encounters.greaterLevelScale);\r\n                encounterLevel = encounterLevel.plus(encounterOffset);\r\n                break;\r\n            }\r\n            case \"lesser\": {\r\n                const encounterOffset = Math.floor(rng.double() * config.encounters.lesserLevelScale);\r\n                encounterLevel = Decimal.max(1, encounterLevel.minus(encounterOffset));\r\n                break;\r\n            }\r\n            case \"even\": {\r\n                const difference = Math.max(config.encounters.greaterLevelScale, config.encounters.lesserLevelScale) - Math.min(config.encounters.greaterLevelScale, config.encounters.lesserLevelScale) + 1;\r\n                const encounterOffset = Math.floor(rng.double() * difference) - difference;\r\n                encounterLevel = Decimal.max(1, encounterLevel.plus(encounterOffset));\r\n            }\r\n        }\r\n        if (config.debug) {\r\n            debugMessage(`Generated encounter level is ${encounterLevel}`);\r\n        }\r\n        const encounterDef = chooseRandomEncounter(this);\r\n        if (encounterDef === undefined) {\r\n            throw new Error(\"No encounter selected\");\r\n        }\r\n        const encounter = {\r\n            encounterLevel,\r\n            ...encounterDef,\r\n            pendingActions: [],\r\n            enemies: encounterDef.enemies.flatMap(enemyDef => _.range(0, enemyDef.count).map(i => {\r\n                return generateCreature(enemyDef.name, encounterLevel, rng)\r\n            }))\r\n        };\r\n        return encounter;\r\n    }\r\n}\r\n\r\nexport const Regions = {\r\n    forest: new Region(\"The Prey's Lament\", true, {\r\n            bloodthirstyKnight: {\r\n                description: \"1 Bloodthirsty Knight\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"bloodthirstyKnight\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            rapaciousHighwayman: {\r\n                description: \"1 Rapacious Highwayman\",\r\n                type: \"combat\",\r\n                enabled: false,\r\n                enemies: [\r\n                    {\r\n                        name: \"rapaciousHighwayman\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            crushingSnake: {\r\n                description: \"1 Crushing Snake\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"crushingSnake\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            skitteringHorror: {\r\n                description: \"1 Skittering Horror\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"skitteringHorror\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            deadlyHornet: {\r\n                description: \"1 Deadly Hornet\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"deadlyHornet\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            }\r\n\r\n        },\r\n        {\r\n            background: \"backgrounds/parallax-demon-woods-bg.png\",\r\n            far: \"backgrounds/parallax-demon-woods-far-trees.png\",\r\n            mid: \"backgrounds/parallax-demon-woods-mid-trees.png\",\r\n            close: \"backgrounds/parallax-demon-woods-close-trees.png\"\r\n        }\r\n    ),\r\n    caves: new Region(\"The Bottomless Caverns\", false, {}, {}),\r\n    mountains: new Region(\"The Crags of Futility\", false, {}, {}),\r\n    desert: new Region(\"The Desert of Isolation\", false, {}, {})\r\n}\r\n\r\nfunction chooseRandomEncounter(region) {\r\n    const possibleEncounters = Object.keys(region.encounters).filter(encounterId => {\r\n        debugMessage(`Determining if '${encounterId}' is enabled.`);\r\n        const encounterEnabled = region.encounters[encounterId].enabled !== false;\r\n        if (!encounterEnabled) {\r\n            debugMessage(`Encounter '${encounterId}' disabled`);\r\n        }\r\n        const debugNotDisabled = _.get(getGlobalState(), [\"debug\", \"regions\", region.id, \"encounters\", encounterId]) !== false;\r\n        if (!debugNotDisabled) {\r\n            debugMessage(`Encounter '${encounterId}' disabled by debug.`);\r\n        }\r\n        return encounterEnabled && debugNotDisabled;\r\n    });\r\n    const randomKey = possibleEncounters[Math.floor(Math.random() * Object.keys(possibleEncounters).length)];\r\n    debugMessage(`Selected encounter '${randomKey}'`);\r\n    return region.encounters[randomKey];\r\n}","import React from \"react\";\r\n\r\nexport const Actions = {\r\n    exploring: {\r\n        id: \"exploring\",\r\n        duration: \"exploration.explorationTime\",\r\n        description: \"Exploring...\"\r\n    },\r\n    approaching: {\r\n        id: \"approaching\",\r\n        duration: \"exploration.approachTime\",\r\n        description: \"Approaching Enemy...\"\r\n    },\r\n    looting: {\r\n        id: \"looting\",\r\n        duration: \"exploration.lootingTime\",\r\n        description: \"Looting the body...\"\r\n    },\r\n    fleeing: {\r\n        id: \"fleeing\",\r\n        duration: \"exploration.fleeingTime\",\r\n        description: \"Fleeing in terror!\"\r\n    },\r\n    fighting: {\r\n        id: \"fighting\",\r\n        duration: \"exploration.combatTime\",\r\n        description: \"In Combat!\",\r\n    },\r\n    reincarnating: {\r\n        id: \"resurrecting\",\r\n        duration: \"exploration.reincarnationTime\",\r\n        description: \"Reincarnating...\"\r\n    },\r\n    recovering: {\r\n        id:\"recovering\",\r\n        duration: \"exploration.recoveryTime\",\r\n        description: \"Healing...\"\r\n    },\r\n    intimidating: {\r\n        id:\"intimidating\",\r\n        duration: \"exploration.intimidateTime\",\r\n        description: \"Intimidating...\"\r\n    }\r\n}","import * as _ from \"lodash\";\r\n// FIXME: Implement validation\r\nexport const Traits = {\r\n    bloodrage: {\r\n        name: \"Blood Rage\",\r\n        icon: \"icons/icons-139.png\",\r\n        description: _.template(\"This demon's unquenchable thirst for blood gives a <span style='color: red'>${rank.times(25)}%</span> bonus to Damage against enemies with <span style='color: red'>25% or less</span> health.\"),\r\n        on_hitting: {\r\n            conditions : {\r\n                health_percentage: {\r\n                    target: \"target\",\r\n                    below: 25\r\n                }\r\n            },\r\n            effects: {\r\n                damage_modifier: {\r\n                    percent: \"$rank.times(25)\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    cupidity: {\r\n        name: \"Cupidity\",\r\n        icon: \"icons/icons-2503.png\",\r\n        description: _.template(\"When this demon successfully Intimidates another demon, it gains a <span style='color: red'>${rank}%</span> chance to seize the intimidated demon's Artifacts as though it were killed.\"),\r\n        on_intimidate: {\r\n            conditions: {\r\n                chance: \"$rank\"\r\n            },\r\n            effects: {\r\n                steal_item_chance: {\r\n                    target: \"enemies\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    murderousFrenzy: {\r\n        name: \"Murderous Frenzy\",\r\n        icon: \"icons/icons-118.png\",\r\n        description: _.template(\"After hitting with an attack this Demon frenzies, gaining a <span style='color: orangered'>${rank}%</span> bonus to <span style='color: lightgreen'>Attack Speed</span> for 2 rounds.\"),\r\n        on_hitting: {\r\n            effects: {\r\n                add_modifier: {\r\n                    speed: {\r\n                        target: \"attacker\",\r\n                        percent: \"$rank\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: 2\r\n            }\r\n        }\r\n    },\r\n    inescapableGrasp: {\r\n        name: \"Inescapable Grasp\",\r\n        icon: \"icons/icons-2221.png\",\r\n        description: _.template(\"You bind your victims when you strike, causing a <span style='color: orangered'>${rank}%</span> penalty to their <span style='color: lightgreen'>Action Speed</span> for 2 rounds.\"),\r\n        on_hitting: {\r\n            effects: {\r\n                add_modifier: {\r\n                    speed: {\r\n                        target: \"attacked\",\r\n                        percent: \"$rank.times(-1)\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: 2\r\n            }\r\n        }\r\n    },\r\n    terrifyingSkitter: {\r\n        name: \"Terrifying Skitter\",\r\n        icon: \"icons/icons-2260.png\",\r\n        description: _.template(\"The sickening sound of your feet on the ground unnerves even other demons, making the enemy <span style='color: violet'>Terrified</span> for <span style='color: lightblue'>${rank.div(10).round(0, 0).plus(1).toFixed()}</span> round(s), stunning them.\"),\r\n        on_combat_start: {\r\n            effects: {\r\n                add_modifier: {\r\n                    stunned: {\r\n                        target: \"all_enemies\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: \"$rank.div(10).round(0, 0).plus(1)\"\r\n            }\r\n        }\r\n    },\r\n    piercingStrike: {\r\n        name: \"Piercing Strike\",\r\n        icon: \"icons/icons-113.png\",\r\n        description: _.template(\"Your relentless attacks are designed to get around the enemy's defenses. Against your attacks the enemy's <span style='color: lightgreen'>Defense</span> is reduced by <span style='color: orangered'>${rank}%</span>\"),\r\n        on_hitting: {\r\n            effects: {\r\n                defense_modifier: {\r\n                    percent: \"$rank.times(-1)\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTrait(traitId) {\r\n    return Traits[traitId];\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {Creatures} from \"../../data/creatures\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport {evaluateExpression, getCharacter, getGlobalState, getLevelForPower, getSpriteForCreature} from \"../../engine\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport * as _ from \"lodash\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {config} from \"../../config\";\r\nimport \"../../App.css\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nexport default function ReincarnationSelectionPage(props) {\r\n    const globalState = useRef(getGlobalState());\r\n    const history = useHistory();\r\n    const player = getCharacter(0);\r\n    const [attributes, setAttributes] = useState(Object.keys(player.attributes)\r\n        .reduce((attributes, next) => {\r\n            attributes[next.substring(1)] = player.attributes[next];\r\n            return attributes;\r\n        }, {}));\r\n    const [startingTraits, setStartingTraits] = useState(getGlobalState().startingTraits);\r\n    const newLatentPower = getCharacter(0).latentPower.plus(\r\n        evaluateExpression(config.mechanics.latentPowerGainOnReincarnate, {\r\n            player\r\n        }));\r\n    const spendableBonusPoints = Decimal(getGlobalState().highestLevelReached).times(config.characters.player.attributesPerLevel);\r\n    const availableBonusPoints= spendableBonusPoints\r\n        .minus(Object.values(attributes).reduce((sum, next) => Decimal(sum).plus(next)))\r\n        .minus(Object.keys(startingTraits).length * 4);\r\n\r\n    useEffect(() => {\r\n        getGlobalState().paused = true;\r\n    }, []);\r\n\r\n    return <Grid container>\r\n        <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n            <strong>Reincarnate</strong>\r\n        </Grid>\r\n        <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n            Select a soul to reincarnate as.\r\n            <br/>\r\n            You will reincarnate with a <strong>{newLatentPower.toFixed()}%</strong> bonus to Attributes, Damage and\r\n            absorbed power due to your Latent Power acquired from previous reincarnations.\r\n            <br/>\r\n        </Grid>\r\n\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Spend {availableBonusPoints.toFixed()} {player.powerLevel.gt(1) ? \"points\" : \"point\"} on\r\n                    bonuses </strong> (Reach higher levels to gain more points)\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Attributes</strong>\r\n            </Grid>\r\n            {Object.keys(config.attributes).map(attribute => {\r\n                return <Grid item xs={3}>\r\n                    <Tooltip title={config.attributes[attribute].description({\r\n                        rank: Decimal(attributes[attribute]).toFixed()\r\n                    })}>\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <img src={config.attributes[attribute].icon}/>\r\n                            <div>\r\n                                <Button disabled={availableBonusPoints.lte(0)}\r\n                                        onClick={() => {\r\n                                            setAttributes({...attributes, [attribute]: Decimal(attributes[attribute]).plus(1)})\r\n                                        }}>\r\n                                    <AddIcon/>\r\n                                </Button>\r\n                                {Decimal(attributes[attribute]).toFixed()}\r\n                                <Button disabled={Decimal(attributes[attribute]).lte(0)} onClick={() => {\r\n                                    setAttributes({...attributes, [attribute]: Decimal(attributes[attribute]).minus(1)})\r\n                                }}>\r\n                                    <RemoveIcon/>\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </Tooltip>\r\n                </Grid>\r\n            })}\r\n            {Object.keys(getGlobalState().unlockedTraits).length > 0 &&\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Bonus Starting Traits</strong> (Start with traits in addition to that innate to your new demon form)\r\n            </Grid>}\r\n            {Object.keys(getGlobalState().unlockedTraits).map(traitId => {\r\n                return <Grid item container xs={3} justify=\"space-around\" style={{height: \"138px\"}}>\r\n                    <Grid item xs={12} style={{textAlign: \"center\", height: \"64%\"}}>\r\n                        <Button variant=\"contained\" color={getGlobalState().startingTraits[traitId] ? \"secondary\" : \"default\" }\r\n                                disabled={spendableBonusPoints.lt(4)}\r\n                                onClick={() => {\r\n                                    getGlobalState().startingTraits[traitId] = !getGlobalState().startingTraits[traitId];\r\n                                    setStartingTraits(getGlobalState.startingTraits);\r\n                                } }\r\n                        >\r\n                            <Tooltip title={<div dangerouslySetInnerHTML={{\r\n                                __html: `Rank ${Decimal(getGlobalState().unlockedTraits[traitId]).toFixed()}: ${Traits[traitId].description({\r\n                                    rank: Decimal(getGlobalState().unlockedTraits[traitId])\r\n                                })}`\r\n                            }}>\r\n                            </div>}>\r\n                                <Grid container>\r\n                                    <Grid item xs={12}>\r\n                                        <img src={Traits[traitId].icon}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        {Traits[traitId].name} {Decimal(getGlobalState().unlockedTraits[traitId]).toFixed()}\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <em>4 pts</em>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Tooltip>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n\r\n        <Grid container item xs={12} alignItems=\"stretch\" justify=\"flex-start\">\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Choose a demon to reincarnate as.</strong>\r\n            </Grid>\r\n            {\r\n                Object.keys(Creatures)\r\n                    .filter(id => {\r\n                            const creatureEnabled = Creatures[id].enabled !== false;\r\n                            const debugEnabled = _.get(getGlobalState(), [\"debug\", \"creatures\", id, \"enabled\"], true);\r\n                            return creatureEnabled && debugEnabled;\r\n                        }\r\n                    )\r\n                    .map(name => {\r\n                        if (!getGlobalState().unlockedMonsters[name]) {\r\n                            return <Grid container xs={3} justify=\"space-around\" style={{height: \"138px\"}}>\r\n                                <Grid item xs={12} style={{textAlign: \"center\", height: \"64%\"}}>\r\n                                    <Tooltip\r\n                                        title={<div>An unknown type of Demon. Selects a random Demon you have not\r\n                                            already\r\n                                            played as.</div>}>\r\n                                        <Button variant=\"contained\" style={{height: \"100%\", width: \"50%\"}}\r\n                                                onClick={() => {\r\n                                                    props.reincarnate(\"random\", attributes);\r\n                                                    history.push(\"/adventuring\");\r\n                                                }}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={12}>\r\n                                                    ???\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                            </Grid>\r\n                        } else {\r\n                            return <Grid container xs={3} justify=\"space-around\">\r\n                                <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                                    <Tooltip title={<div>{Creatures[name].description}</div>}>\r\n                                        <Button variant=\"contained\" style={{height: \"100%\", width: \"50%\"}}\r\n                                                onClick={() => {\r\n                                                    props.reincarnate(name, attributes);\r\n                                                    history.push(\"/adventuring\");\r\n                                                }}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={12}>\r\n                                                    <img src={getSpriteForCreature(name)}/>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    {Creatures[name].name}\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    })\r\n            }\r\n        </Grid>\r\n    </Grid>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useMemo} from \"react\";\r\n\r\nexport default function PowerLevelDisplay(props) {\r\n    const powerLevelDisplay = useMemo(() => props.powerLevel.toFixed(), [props.powerLevel]);\r\n    return <React.Fragment>\r\n        <Grid item xs={6}>\r\n            Level\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n            {powerLevelDisplay}\r\n        </Grid>\r\n    </React.Fragment>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Help} from \"@material-ui/icons\";\r\nimport {config} from \"../../config\";\r\nimport React from \"react\";\r\n\r\nexport default function CharacterAttributes(props) {\r\n    return <React.Fragment>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                Health\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.currentHp.toFixed()} / {props.character.maximumHp.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={\r\n                        <span>Health is how much damage needed to destroy you. If you die, you forcibly reincarnate.</span>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.brutality.label}\r\n            </Grid>\r\n            <Grid item xs={5} title={``}>\r\n                {props.character.attributes.brutality.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={<span\r\n                        dangerouslySetInnerHTML={{__html: config.attributes.brutality.description(\r\n                                {\r\n                                    rank: props.character.attributes.brutality.toNumber()\r\n                                }\r\n                            )}}></span>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.cunning.label}\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.attributes.cunning.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={\r\n                        <span\r\n                            dangerouslySetInnerHTML={{__html: config.attributes.cunning.description(\r\n                                    {\r\n                                        rank: props.character.attributes.cunning.toNumber()\r\n                                    }\r\n                                )}}></span>\r\n                    }>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.deceit.label}\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.attributes.deceit.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={\r\n                        <span\r\n                            dangerouslySetInnerHTML={{__html: config.attributes.deceit.description(\r\n                                    {\r\n                                        rank: props.character.attributes.deceit.toNumber()\r\n                                    }\r\n                                )}}>\r\n                            </span>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.madness.label}\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.attributes.madness.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={<span\r\n                        dangerouslySetInnerHTML={{__html: config.attributes.madness.description(\r\n                                {\r\n                                    rank: props.character.attributes.madness.toNumber()\r\n                                }\r\n                            )}}/>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n    </React.Fragment>\r\n}","import Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport React from \"react\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nexport default function CharacterTraits(props) {\r\n    return <React.Fragment>\r\n        {Object.keys(props.character.traits).map(trait => <Tooltip key={trait} title={\r\n            <React.Fragment>\r\n                <span>Rank {props.character.traits[trait].toFixed()}: </span>\r\n            <span dangerouslySetInnerHTML={{\r\n                __html: Traits[trait].description({\r\n                    rank: Decimal(props.character.traits[trait])\r\n                })\r\n            }}></span>\r\n            </React.Fragment>}>\r\n            <img src={Traits[trait].icon}></img>\r\n        </Tooltip>)\r\n        }\r\n    </React.Fragment>\r\n\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useMemo} from \"react\";\r\nimport {getPowerNeededForLevel, getSpriteForCreature} from \"../engine\";\r\nimport {config} from \"../config\";\r\nimport PowerLevelDisplay from \"./charactersheet/PowerLevelDisplay\";\r\nimport CharacterAttributes from \"./charactersheet/CharacterAttributes\";\r\nimport CharacterTraits from \"./charactersheet/CharacterTraits\";\r\n\r\nconst styles = {\r\n    tooltip: {\r\n        fontSize: \"12pt\"\r\n    }\r\n}\r\n\r\nexport default function CharacterSheet(props) {\r\n    const spriteSrc = useMemo(() => getSpriteForCreature(props.character.appearance), [props.character.appearance]);\r\n    const hitChances = props.character.combat.getHitChancesAgainst(props.enemy);\r\n    const combinedHitWeights = Object.values(hitChances).reduce((total, next) => total.plus(next));\r\n    const powerRequiredForCurrentLevel = getPowerNeededForLevel(props.character.powerLevel);\r\n    const powerNeededForNextLevel = getPowerNeededForLevel(props.character.powerLevel.plus(1));\r\n    const progressToNextLevel = props.character.absorbedPower.minus(powerRequiredForCurrentLevel);\r\n\r\n    return <Grid container>\r\n        <Grid item xs={12}>\r\n            <img src={spriteSrc} style={{height: \"75px\"}}/>\r\n        </Grid>\r\n        <Grid item container>\r\n            <PowerLevelDisplay powerLevel={props.character.powerLevel}/>\r\n        </Grid>\r\n        {props.character.absorbedPower !== undefined && <Grid item xs={12}>\r\n            <progress\r\n                value={progressToNextLevel.div(powerNeededForNextLevel).times(100).toNumber()}\r\n                max={100}\r\n                title={`${progressToNextLevel.toFixed()}/${powerNeededForNextLevel.toFixed()}`}\r\n            ></progress>\r\n        </Grid>}\r\n        <Grid container>\r\n            <Grid item container>\r\n                <Grid item xs>\r\n                    <strong>Combat Attributes</strong>\r\n                </Grid>\r\n            </Grid>\r\n            <CharacterAttributes character={props.character}/>\r\n        </Grid>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Derived</strong>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={4}>\r\n                    Glancing Blow\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {hitChances.minimum.div(combinedHitWeights).times(100).round().toFixed()}%\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.minimumDamage.toFixed()}\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={4}>\r\n                    Solid Hit\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {hitChances.median.div(combinedHitWeights).times(100).round().toFixed()}%\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.medianDamage.toFixed()}\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={4}>\r\n                    Serious Hit\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {hitChances.max.div(combinedHitWeights).times(100).round().toFixed()}%\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.maximumDamage.toFixed()}\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Traits</strong>\r\n            </Grid>\r\n            <CharacterTraits character={props.character}/>\r\n        </Grid>\r\n        {config.artifacts.enabled && <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Artifacts</strong>\r\n            </Grid>\r\n            <Grid>\r\n                {\r\n                    JSON.stringify(props.character.items)\r\n                }\r\n            </Grid>\r\n        </Grid>}\r\n    </Grid>\r\n\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React from \"react\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nconst styles = {\r\n    root: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#eeeeee\"\r\n    }\r\n}\r\n\r\nexport default function PlayerStats(props) {\r\n    return <Paper style={styles.root} elevation={2}>\r\n        <CharacterSheet character={props.player} enemy={props.enemy}/>\r\n    </Paper>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useMemo} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {getCharacter, getGlobalState, getLevelForPower, getPowerNeededForLevel} from \"../engine\";\r\n\r\nconst styles = {\r\n    root: {\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flex: \"0\"\r\n    },\r\n    buttons: {\r\n        width: \"100%\"\r\n    }\r\n}\r\n\r\nexport default function TopSection(props) {\r\n    const history = useHistory();\r\n    const reincarnateEnabled = useMemo(() => getCharacter(0).powerLevel.gt(1), [\r\n        getCharacter(0).powerLevel\r\n    ])\r\n    return <div style={styles.root}>\r\n        <Button onClick={() => history.push(\"/reincarnating\")} style={styles.buttons} variant=\"contained\" color=\"secondary\" disabled={!reincarnateEnabled}>\r\n            Reincarnate\r\n        </Button>\r\n    </div>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {getCharacter, getGlobalState} from \"../engine\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { config } from \"../config\";\r\nimport { Decimal } from \"decimal.js\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flex: \"1 0 auto\",\r\n        justifyContent: \"flex-end\",\r\n        flexDirection: \"column\"\r\n    },\r\n    actions: {\r\n        container: {\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            flexDirection: \"row\"\r\n        },\r\n        buttons: {\r\n            alignSelf: \"flex-end\",\r\n            flex: \"1\"\r\n        }\r\n    },\r\n    action: {\r\n        maxHeight: \"15%\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    },\r\n    actionProgress: {\r\n        width: \"100%\"\r\n    },\r\n    history: {\r\n        height: \"15%\",\r\n        flexDirection: \"column\",\r\n        overflowY: \"scroll\"\r\n    },\r\n    combat: {\r\n\r\n    }\r\n}\r\nexport default function BottomSection(props) {\r\n    if (!props.currentAction) {\r\n        throw new Error(\"No current action\");\r\n    }\r\n    return <div style={styles.root} onMouseEnter={props.startManualSpeedup} onMouseLeave={props.stopManualSpeedup}>\r\n        <Paper style={styles.actions.container}>\r\n            <Button style={styles.actions.buttons} onClick={() => {\r\n                getGlobalState().paused = !getGlobalState().paused;\r\n                props.togglePause(getGlobalState().paused);\r\n            }}>\r\n                {props.paused ? \"Unpause\" : \"Pause\"}\r\n            </Button>\r\n        </Paper>\r\n        <Paper style={styles.actions.container}>\r\n            {actionButton(\"fighting\", \"Fight\", \"Combat the enemy. On victory, steal some of the power of the vanquished foe.\", props)}\r\n            {actionButton(\"fleeing\", \"Flee\", \"Attempt to escape. You will automatically escape from Greater Demons.\", props)}\r\n            {actionButton(\"intimidating\", \"Intimidate\", \"Try to cow the enemy, compelling them to continuously provide you a portion of their life force.\", props)}\r\n            {_.get(config, \"features.negotiating.enabled\") && actionButton(\"negotiating\", \"Negotiate\", \"Combat the enemy. On victory, steal some of the power of the vanquished foe.\", props)}\r\n        </Paper>\r\n        <Paper style={styles.combat.details}>\r\n            <Grid container>\r\n                <Grid item container xs={6} direction=\"row\">\r\n                    <Grid item xs={6}>\r\n                        Player\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <meter style={{width: \"80%\"}} low={33} high={66} optimum={100} min={0} max={100} value={props.player.currentHp.div(props.player.maximumHp).times(100).floor().toNumber()} max={100}></meter>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item container xs={6} direction=\"row\">\r\n                    <Grid item xs={6}>\r\n                        <meter style={{width: \"80%\"}} low={33} high={66} optimum={100} min={0} max={100} value={_.get(props.enemy,[\"currentHp\"], Decimal(0)).div(_.get(props.enemy,[\"maximumHp\"], Decimal(1))).times(100).floor().toNumber()} max={100}></meter>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        {_.get(props.enemy, \"name\")}\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n        <Paper style={styles.action}>\r\n            <strong>{props.currentAction.description}</strong>\r\n            <progress style={styles.actionProgress} value={props.actionTime}\r\n                      max={_.get(props.state, props.currentAction.duration)}/>\r\n        </Paper>\r\n        <Paper style={styles.history}>\r\n            {\r\n                props.actionLog.map(item => printActionItem(item))\r\n            }\r\n        </Paper>\r\n    </div>\r\n}\r\n\r\nfunction printActionItem(item) {\r\n    if (item.message) {\r\n        return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n            <Grid item xs={11}>\r\n            <span dangerouslySetInnerHTML={{\r\n                __html: item.message\r\n            }}></span>\r\n            </Grid>\r\n        </Grid>\r\n    } else {\r\n        switch (item.result) {\r\n            case \"add_modifier\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{`${getCharacter(item.actor).name}`}</Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"hit\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item\r\n                          xs={11}>{getCharacter(item.actor).name} hit! {item.effects.map(effect => describeEffect(item.target, effect)).join(\" \")}</Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"miss\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        {getCharacter(item.actor).name} Missed! {item.effects.map(effect => describeEffect(item.target, effect)).join(\" \")}\r\n                    </Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"kill\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item\r\n                          xs={11}><strong>{getCharacter(item.target).name} {item.target === 0 ? 'Were' : 'Was'} Killed!</strong></Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"gainedPower\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        You absorbed {item.value.toFixed()} power.\r\n                    </Grid>\r\n                </Grid>\r\n            case \"healed\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        {`${getCharacter(item.target).name} gained ${item.value} health.`}\r\n                    </Grid>\r\n                </Grid>\r\n            case \"escaped\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        You escaped.\r\n                    </Grid>\r\n                </Grid>\r\n            case \"action_skipped\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{getCharacter(item.actor).name} lost {item.actor === 0 ? 'your' : 'their'} action.</Grid>\r\n                    <Grid item xs={1}>\r\n                        {item.tick}\r\n                    </Grid>\r\n                </Grid>\r\n            case \"intimidated\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{getCharacter(item.target).name} was Bound to you, granting you {item.value.toFixed()} power while you explore. </Grid>\r\n                </Grid>\r\n            case \"enemy-fled\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{getCharacter(item.target).name} Fled!</Grid>\r\n                </Grid>\r\n        }\r\n    }\r\n}\r\n\r\nfunction describeEffect(target, effect) {\r\n    switch (effect.event) {\r\n        case \"damage\":\r\n            return `${getCharacter(target).name} ${target === 0 ? 'take' : 'takes'} ${effect.value} Damage.`;\r\n        default:\r\n            return Object.keys(effect.effect.effects).map(mod => {\r\n                switch (mod) {\r\n                    case \"speed\":\r\n                        const percentModifier = Decimal(effect.effect.effects.speed.percent); // FIXME: 3 layers, the same name?\r\n                        if (percentModifier.lt(0)) {\r\n                            return `${getCharacter(effect.target).name} ${effect.target == 0 ? 'suffer' : 'suffers'} a ${percentModifier.toFixed()}% penalty to Action Speed.`;\r\n                        } else {\r\n                            return `${getCharacter(effect.target).name} ${effect.target == 0 ? 'gain' : 'gains'} a ${percentModifier.toFixed()}% bonus to Action Speed.`;\r\n                        }\r\n                }\r\n            })\r\n            switch (effect.effect.modifier) {\r\n                case \"speed_modifier\":\r\n\r\n\r\n            }\r\n\r\n    }\r\n}\r\n\r\nfunction actionButton(action, text, description, props) {\r\n    return <Tooltip title={description}>\r\n        <Button onClick={() => props.setNextAction(action)} style={styles.actions.buttons}\r\n                disabled={props.currentAction.id !== \"approaching\"}\r\n                variant={props.nextActionName === action ? \"contained\" : \"outlined\"}\r\n                color={props.nextActionName === action ? \"primary\" : \"default\"}>\r\n            {text}\r\n        </Button>\r\n    </Tooltip>\r\n}","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nconst styles = {\r\n    root: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#eeeeee\"\r\n    }\r\n}\r\n\r\nexport default function EnemySidebar(props) {\r\n    return <Paper style={styles.root}>\r\n        {props.currentEncounter && <CharacterSheet enemy={props.player} character={props.currentEncounter.enemies[0]} /> }\r\n    </Paper>\r\n}","import PlayerStats from \"../PlayerStats\";\r\nimport TopSection from \"../TopSection\";\r\nimport {getCharacter, getGlobalState} from \"../../engine\";\r\nimport BottomSection from \"../BottomSection\";\r\nimport EnemySidebar from \"../EnemySidebar\";\r\nimport React from \"react\";\r\nimport * as _ from \"lodash\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flex: \"1\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        overflow: \"hidden\"\r\n    },\r\n    image: {\r\n        position: \"absolute\",\r\n        height: \"100%\",\r\n        left: 0\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        left: 0\r\n    }\r\n}\r\n\r\nexport default function AdventuringPage(props) {\r\n    return <div className=\"App\" style={styles.root}>\r\n        <div id=\"background\" style={{\r\n            position: \"absolute\",\r\n            zIndex: \"-10\",\r\n            overflow: \"hidden\",\r\n            height: \"100vh\",\r\n            width: \"100vw\"\r\n        }}>\r\n            <img style={styles.background} src={\"./backgrounds/parallax-demon-woods-bg.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-far-trees.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-mid-trees.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-close-trees.png\"}/>\r\n        </div>\r\n        <PlayerStats player={props.player} enemy={_.get(props, \"currentEncounter.enemies[0]\")}/>\r\n        <div style={{display: \"flex\", flex: \"1 0 auto\", flexDirection: \"column\"}}>\r\n            <TopSection character={getCharacter(0)}/>\r\n            <BottomSection state={getGlobalState()} actionLog={props.actionLog}\r\n                           player={getCharacter(0)}\r\n                           enemy={_.get(props, [\"currentEncounter\", \"enemies\", 0])}\r\n                           togglePause={props.togglePause}\r\n                           paused={props.paused}\r\n                           nextActionName={props.nextAction}\r\n                           currentAction={props.currentAction}\r\n                           setNextAction={(newAction) => {\r\n                               props.setNextAction(newAction);\r\n                               getGlobalState().nextAction = newAction;\r\n                           }}\r\n                           actionTime={props.actionTime}\r\n                           startManualSpeedup={props.startManualSpeedup}\r\n                           stopManualSpeedup={props.stopManualSpeedup}\r\n            />\r\n        </div>\r\n        <EnemySidebar player={props.player} currentEncounter={props.currentEncounter} actionLog={props.actionLog}/>\r\n\r\n    </div>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useState} from \"react\";\r\nimport { Decimal } from \"decimal.js\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {Creatures} from \"../data/creatures\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddCircleOutlineRoundedIcon from '@material-ui/icons/AddCircleOutlineRounded';\r\nimport RemoveCircleOutlineRoundedIcon from '@material-ui/icons/RemoveCircleOutlineRounded';\r\nimport {getCharacter, getGlobalState, resetDebug, saveKey} from \"../engine\";\r\nimport * as _ from \"lodash\";\r\nimport {Regions} from \"../data/Regions\";\r\nimport {config} from \"../config\";\r\n\r\nconst styles = {\r\n    root: {\r\n        position: \"absolute\",\r\n        minHeight: \"100vh\",\r\n        bottom: 0,\r\n        left: 0,\r\n        padding: \"20px\"\r\n    }\r\n}\r\n\r\nexport default function DebugUi(props) {\r\n    const [creatures, setCreatures] = useState(_.get(getGlobalState(), [\"debug\", \"creatures\"]));\r\n    const [regions, setRegions] = useState(_.get(getGlobalState(), [\"debug\", \"regions\"]));\r\n    const [minLevel, setMinLevel] = useState(_.get(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale).lt(Decimal(1)) ?\r\n        Decimal(1) : getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale)));\r\n    const [maxLevel, setMaxLevel] = useState(_.get(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale).gt(100) ?\r\n        Decimal(100) : getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale * 2)));\r\n    const [manualSpeedMultiplier, setManualSpeedMultiplier] = useState(_.get(getGlobalState(), [\"debug\", \"manualSpeedMultiplier\"],\r\n        getGlobalState().manualSpeedMultiplier));\r\n    const [playerAbsorbedPower, setPlayerAbsorbedPower] = useState(getCharacter(0).absorbedPower);\r\n\r\n    function reset() {\r\n        resetDebug();\r\n        setCreatures(_.get(getGlobalState(), [\"debug\", \"creatures\"]));\r\n        setRegions(_.get(getGlobalState(), [\"debug\", \"regions\"]));\r\n        setMinLevel(getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale).lt(Decimal(1)) ?\r\n            Decimal(1) : getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale));\r\n        setMaxLevel(getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale).gt(100) ?\r\n            Decimal(100) : getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale * 2));\r\n    }\r\n\r\n    function clearSave() {\r\n        window.localStorage.removeItem(saveKey);\r\n        alert(\"local storage cleared\");\r\n    }\r\n\r\n    return <Paper style={styles.root} disabled={true}>\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <h3>Debug Menu</h3>\r\n            </Grid>\r\n            <Grid item container xs={12}>\r\n                <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={reset}>\r\n                        Reset Debug Settings\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={clearSave}>\r\n                        Clear Save\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid item xs={3}>\r\n                    <TextField type=\"number\" value={manualSpeedMultiplier} onChange={e => {\r\n                        const newValue = Number.parseInt(e.target.value);\r\n                        _.set(getGlobalState(), [\"debug\", \"manualSpeedMultiplier\"], newValue);\r\n                        setManualSpeedMultiplier(newValue);\r\n                    }} label=\"Manual speed multiplier\"/>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TextField type=\"number\" min=\"0\" value={playerAbsorbedPower} onChange={e => {\r\n                        e.target.value = e.target.value === \"\" ? 0 : e.target.value;\r\n                        const newValue = Decimal(Number.parseInt(e.target.value));\r\n                        if(newValue.lt(0)) {\r\n                            getCharacter(0).absorbedPower = Decimal(0);\r\n                            setPlayerAbsorbedPower(Decimal(0));\r\n                        } else {\r\n                            getCharacter(0).absorbedPower = newValue;\r\n                            setPlayerAbsorbedPower(newValue);\r\n                        }\r\n\r\n                    }} label=\"Current player absorbed power\"/>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <h3>Creatures</h3>\r\n            </Grid>\r\n            <Grid container item xs={12}>\r\n                {Object.keys(Creatures).map(id => {\r\n                    const enabled = creatures[id] !== false && _.get(creatures, [id, \"enabled\"]) !== false;\r\n                    return <Grid item xs={3} style={{height: \"100%\"}}>\r\n                        <Button variant=\"contained\" color={enabled ? \"default\" : \"secondary\"}\r\n                                style={{width: \"100%\", height: \"100%\"}}\r\n                                onClick={() => {\r\n                                    _.set(getGlobalState(), [\"debug\", \"creatures\", id, \"enabled\"], !enabled);\r\n                                    setCreatures({...creatures, [id]: {enabled: !enabled}})\r\n                                }}\r\n                        >\r\n                            <img src={`./monsters/${Creatures[id].texture}`}/>\r\n                            {Creatures[id].name}\r\n                        </Button>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid item style={{textAlign: \"center\"}}>\r\n                <h4>Regions</h4>\r\n            </Grid>\r\n            <Grid container item xs={12}>\r\n                {Object.keys(Regions).map(regionId => {\r\n                    return <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                        <h4>{Regions[regionId].name}</h4>\r\n                        <Grid item container xs={12}>\r\n                            {Object.keys(Regions[regionId].encounters).map(encounterId => {\r\n                                const enabled = _.get(regions, [regionId, \"encounters\", encounterId, \"enabled\"]) !== false;\r\n                                return <Grid item xs={3}>\r\n                                    <Button variant=\"contained\" color={enabled ? \"default\" : \"secondary\"}\r\n                                            style={{width: \"100%\", height: \"100%\"}}\r\n                                            onClick={() => {\r\n                                                _.set(getGlobalState(), [\"debug\", \"regions\", regionId, \"encounters\", encounterId, \"enabled\"], !enabled);\r\n                                                setRegions({\r\n                                                    ...regions, [regionId]: _.set(regions[regionId],\r\n                                                        [\"encounters\", encounterId, \"enabled\"],\r\n                                                        !enabled\r\n                                                    )\r\n                                                })\r\n                                            }}\r\n                                    >\r\n                                        {Regions[regionId].encounters[encounterId].description}\r\n                                    </Button>\r\n                                </Grid>;\r\n                            })}\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                    <h4>Encounter rules</h4>\r\n                </Grid>\r\n                <Grid container item xs={3}>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            setMinLevel(minLevel.plus(1));\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], minLevel.plus(1));\r\n                            if (minLevel.plus(1).gt(maxLevel)) {\r\n                                setMaxLevel(minLevel.plus(1));\r\n                                _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], minLevel.plus(1));\r\n                            }\r\n                        }}>\r\n                            <AddCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        Minimum level {minLevel.toFixed()}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], minLevel.minus(1));\r\n                            setMinLevel(minLevel.minus(1));\r\n                        }}>\r\n                            <RemoveCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container item xs={3}>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            setMaxLevel(maxLevel.plus(1));\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], maxLevel.plus(1));\r\n                        }}>\r\n                            <AddCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        Maximum level {maxLevel.toFixed()}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], maxLevel.minus(1));\r\n                            setMaxLevel(maxLevel.minus(1));\r\n                            if (maxLevel.minus(1).lt(minLevel)) {\r\n                                setMinLevel(maxLevel.minus(1));\r\n                                _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], maxLevel.minus(1));\r\n                            }\r\n                        }}>\r\n                            <RemoveCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useEffect} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport {getGlobalState} from \"../../engine\";\r\nconst pkg = require(\"../../../package.json\");\r\nconst changelog = require(\"../../changelog.json\");\r\n\r\nexport default function SplashPage(props) {\r\n    useEffect(() => {\r\n        getGlobalState().paused = true;\r\n    })\r\n    const history = useHistory();\r\n    return <Paper>\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                Conquest of Hell Ver. {pkg.version} Save Compatibility NOT Guaranteed\r\n            </Grid>\r\n            <Grid item container>\r\n                {Object.keys(changelog).map(version => {\r\n                    return <Grid key={version} item container xs={12}>\r\n                        <Grid item xs={12}>\r\n                            {version}\r\n                        </Grid>\r\n                        <ul>\r\n                        {changelog[version].changes.map(entry => {\r\n                            return <li key={entry}>\r\n                                {entry}\r\n                            </li>\r\n                        })}\r\n                        </ul>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <Button onClick={() => {\r\n                    if(getGlobalState().currentAction === null) {\r\n                        history.push(\"/reincarnating\")\r\n                    } else {\r\n                        getGlobalState().paused = false;\r\n                        history.push(\"/adventuring\")\r\n                    }\r\n                }}>\r\n                    Start\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>\r\n}","export default class CharacterCombatState {\r\n    constructor(props) {\r\n        this.party = props.party;\r\n        this.hp = props.hp;\r\n        this._speed = props.speed;\r\n        this._fatigue = 0;\r\n        this.lastActed = 0;\r\n        this.modifiers = [];\r\n    }\r\n\r\n    get speed() {\r\n        const baseSpeed = this._speed;\r\n        const modifiedSpeed = this.modifiers.reduce((currentValue, modifier) => {\r\n            if(modifier.effects.speed) {\r\n                const multiplier = (modifier.effects.speed.percent.plus(100))/100\r\n                return currentValue.mul(multiplier);\r\n            }\r\n            return currentValue;\r\n        }, baseSpeed);\r\n        return modifiedSpeed;\r\n    }\r\n\r\n    get fatigue() {\r\n        return this._fatigue;\r\n    }\r\n\r\n    set fatigue(fatigue) {\r\n        this._fatigue = fatigue;\r\n    }\r\n\r\n    get canAct() {\r\n        return this.modifiers.reduce((canAct, nextModifier) => {\r\n            if(nextModifier.effects.stunned !== undefined) {\r\n                return false;\r\n            } else {\r\n                return canAct;\r\n            }\r\n        }, true)\r\n    }\r\n}","import CharacterCombatState from \"../CharacterCombatState\";\r\nimport {debugMessage} from \"../../debugging\";\r\nimport {getTrait} from \"../../data/Traits\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {config} from \"../../config\";\r\nimport {v4} from \"node-uuid\";\r\nimport {generateHitCombatResult, generateMissCombatResult, generateSkipActionResult} from \"../../combatResult\";\r\nimport {evaluateExpression, getCharacter} from \"../index\";\r\nimport * as _ from \"lodash\";\r\n\r\nexport function resolveCombat(rng, definition) {\r\n    const combatResult = {\r\n        rounds: [],\r\n        winner: null,\r\n        combatantCombatStats: {}\r\n    }\r\n\r\n    const combatants = _.flatMap(definition.parties.map((party, partyIndex) => {\r\n        return party.map((character, characterIndex) => {\r\n            combatResult.combatantCombatStats[character.id] = new CharacterCombatState({\r\n                hp: character.currentHp,\r\n                speed: character.speed,\r\n                party: partyIndex\r\n            });\r\n            return {\r\n                character,\r\n                party: partyIndex\r\n            }\r\n        })\r\n    }));\r\n    debugMessage(\"Beginning combat\")\r\n    // Trigger start of combat effects.\r\n    combatants.forEach(combatant => Object.keys(combatant.character.traits).forEach(trait => {\r\n        combatants.filter(other => other !== combatant).forEach(otherCombatant => {\r\n            applyTrait(combatant.character, otherCombatant.id, getTrait(trait), combatant.character.traits[trait], \"on_combat_start\", {combat: combatResult}, 0, rng);\r\n        });\r\n    }))\r\n    let tick = 0;\r\n    while(combatResult.winner === null) {\r\n        const initiatives = _.uniq(combatants.map(combatant => Math.floor(Decimal(10000).div(combatResult.combatantCombatStats[combatant.character.id].speed).toNumber())))\r\n            .sort((a, b) => a - b);\r\n        initiatives.forEach(initiativeCount => {\r\n            // TODO: Activate/deactivate traits\r\n            const actingCharacters = combatants\r\n                .filter(wrapped => {\r\n                    const isAlive = wrapped.character.alive;\r\n                    const characterSpeed = Math.floor(Decimal(10000).div(combatResult.combatantCombatStats[wrapped.character.id].speed).toNumber());\r\n                    const matchingSpeed = (initiativeCount % characterSpeed === 0);\r\n                    return isAlive && matchingSpeed;\r\n                });\r\n            actingCharacters.forEach(acting => {\r\n                const character = acting.character;\r\n                tick = combatResult.combatantCombatStats[character.id].lastActed + Math.floor(Decimal(10000).div(combatResult.combatantCombatStats[character.id].speed).toNumber());\r\n                combatResult.combatantCombatStats[character.id].lastActed = tick;\r\n                debugMessage(`Tick ${tick}: Resolving action by character '${character.id}'.`);\r\n                if (combatResult.combatantCombatStats[character.id].hp.lte(0)) {\r\n                    debugMessage(`Tick ${tick}: Character ${character.id} was dead when their turn to act came up, skipping their action.`);\r\n                    return;\r\n                }\r\n                // The acting character performs an accuracy.\r\n                const enemyParty = (acting.party + 1) % 2;\r\n                const livingEnemies = definition.parties[enemyParty]\r\n                    .filter(enemy => combatResult.combatantCombatStats[enemy.id].hp.gt(0));\r\n                const target = _.get(livingEnemies[Math.floor(rng.double() * livingEnemies.length)], \"id\");\r\n                if (target === undefined) {\r\n                    debugMessage(`Tick ${tick}: No valid target, skipping action by ${character.id}.`);\r\n                    return;\r\n                }\r\n                if (combatResult.combatantCombatStats[character.id].canAct) {\r\n                    debugMessage(`Tick ${tick}: Attacking ${target}`);\r\n                    const attackRollResult = makeAttackRoll(character, target, combatResult, rng);\r\n\r\n                    // Trigger on-accuracy effects\r\n                    if (attackRollResult.total >= (100 - config.combat.baseHitChance)) {\r\n                        debugMessage(`Tick ${tick}: ${character.id} rolled ${attackRollResult.total}, a hit.`);\r\n                        resolveHit(tick, combatResult, character, target, rng);\r\n                    } else {\r\n                        debugMessage(`Tick ${tick}: ${character.id} rolled ${attackRollResult.total}, a miss.`);\r\n                        resolveMiss(tick, combatResult, character, target, rng);\r\n                        // TODO: Trigger on-miss effects\r\n                    }\r\n                } else {\r\n                    debugMessage(`${tick}: Character skips their action.`);\r\n                    resolveSkippedAction(tick, combatResult, character);\r\n                }\r\n                Object.keys(combatResult.combatantCombatStats).forEach(combatantId => {\r\n                    if (combatResult.combatantCombatStats[combatantId].hp.lte(0)) {\r\n                        debugMessage(`Tick ${tick}: Combatant ${combatantId} died`);\r\n                        combatResult.rounds.push({\r\n                            uuid: v4(),\r\n                            tick,\r\n                            actor: character.id,\r\n                            target: Number.parseInt(combatantId),\r\n                            result: \"kill\"\r\n                        });\r\n                    }\r\n                });\r\n                combatResult.combatantCombatStats[acting.character.id].fatigue++;\r\n                // TODO: Add logs for when effects expire.\r\n                combatResult.combatantCombatStats[acting.character.id].modifiers = combatResult.combatantCombatStats[acting.character.id].modifiers\r\n                    .map(modifier => {\r\n                        modifier.roundDuration = Decimal(modifier.roundDuration).minus(1);\r\n                        return modifier;\r\n                    })\r\n                    .filter(modifier => Decimal(modifier.roundDuration).gt(0))\r\n\r\n            });\r\n        });\r\n        const playerPartyDead = definition.parties[0].every(character => combatResult.combatantCombatStats[character.id].hp.lte(0));\r\n        const enemyPartyDead = definition.parties[1].every(character => combatResult.combatantCombatStats[character.id].hp.lte(0));\r\n        if (playerPartyDead || enemyPartyDead) {\r\n            if (playerPartyDead) {\r\n                debugMessage(\"Every member of party 0 is dead\")\r\n                combatResult.rounds.push({\r\n                    uuid: v4(),\r\n                    tick,\r\n                    winner: 1,\r\n                    result: \"combat-end\"\r\n                })\r\n                combatResult.winner = 1;\r\n                // Clear all end of combat\r\n            } else if (enemyPartyDead) {\r\n                debugMessage(\"Every member of party 1 is dead\")\r\n                combatResult.rounds.push({\r\n                    uuid: v4(),\r\n                    tick,\r\n                    winner: 0,\r\n                    result: \"combat-end\",\r\n                });\r\n                combatResult.winner = 0;\r\n            }\r\n\r\n        } else {\r\n            debugMessage(\"No winner, combat continues\");\r\n        }\r\n    }\r\n    return combatResult\r\n\r\n}\r\n\r\n\r\nfunction resolveHit(tick, combatResult, actingCharacter, targetCharacter, rng) {\r\n    if (typeof actingCharacter !== \"object\") {\r\n        throw new Error(`Acting character was not an object!`);\r\n    }\r\n    if (typeof targetCharacter !== \"number\") {\r\n        throw new Error(`Target character was not an object!`);\r\n    }\r\n    const hitTypeChances = actingCharacter.combat.getHitChancesAgainst(getCharacter(targetCharacter));\r\n    const damageRoll = Math.floor(rng.double() * 100);\r\n    let damageToInflict;\r\n    if (damageRoll <= hitTypeChances.minimum) {\r\n        damageToInflict = actingCharacter.combat.minimumDamage;\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a glancing hit for ${damageToInflict}.`);\r\n    } else if (damageRoll <= hitTypeChances.median.plus(hitTypeChances.minimum)) {\r\n        damageToInflict = actingCharacter.combat.medianDamage;\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a solid hit for ${damageToInflict}.`);\r\n    } else {\r\n        damageToInflict = actingCharacter.combat.maximumDamage;\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a critical hit for ${damageToInflict}.`);\r\n    }\r\n    const attackResult = {\r\n        baseDamage: damageToInflict,\r\n        attackerDamageMultiplier: Decimal(actingCharacter.attributes[config.mechanics.attackDamage.baseAttribute])\r\n            .times(config.mechanics.attackDamage.attributeBonusScale),\r\n        targetDefenseMultiplier: Decimal(getCharacter(targetCharacter).attributes[config.mechanics.defense.baseAttribute])\r\n            .times(config.mechanics.defense.attributeBonusScale),\r\n        otherEffects: []\r\n    }\r\n    // Trigger on-hit effects\r\n    Object.keys(actingCharacter.traits).forEach(trait => applyTrait(actingCharacter, targetCharacter, getTrait(trait), actingCharacter.traits[trait], \"on_hitting\", {\r\n        combat: combatResult,\r\n        attack: attackResult\r\n    }, tick, rng));\r\n    const damageFactor = attackResult.attackerDamageMultiplier.plus(100) // FIXME: Evaluable expression\r\n        .div(Decimal.max(attackResult.targetDefenseMultiplier.plus(100), 1));\r\n    const finalDamage = attackResult.baseDamage.times(damageFactor).floor()\r\n\r\n    debugMessage(`Damage started off as ${attackResult.baseDamage.toFixed()}, with an attack factor of ${attackResult.attackerDamageMultiplier} and a target defense factor of ${attackResult.targetDefenseMultiplier}, for a total factor of ${damageFactor} and a final damage of ${finalDamage.toFixed()}`);\r\n    combatResult.combatantCombatStats[targetCharacter].hp = combatResult.combatantCombatStats[targetCharacter].hp.minus(damageToInflict);\r\n    debugMessage(`Tick ${tick}: Hit did ${finalDamage.toFixed()}. Additional effects: ${attackResult.otherEffects.map(effect => {\r\n        switch (effect.event) {\r\n            case \"apply_effect\":\r\n                return `Applying effect ${effect.effect} with from ${effect.source} to ${effect.target}.`\r\n        }\r\n\r\n    }).join(\", \")}. Target has ${combatResult.combatantCombatStats[targetCharacter].hp} remaining.`)\r\n    // TODO: Trigger on-damage effects\r\n    combatResult.rounds.push(generateHitCombatResult(tick, actingCharacter.id, targetCharacter, finalDamage, attackResult.otherEffects));\r\n}\r\n\r\nfunction resolveMiss(tick, combatResult, actingCharacter, targetCharacterId, rng) {\r\n    combatResult.rounds.push(generateMissCombatResult(tick, actingCharacter.id, targetCharacterId));\r\n}\r\n\r\nfunction resolveSkippedAction(tick, combatResult, actingCharacter) {\r\n    combatResult.rounds.push(generateSkipActionResult(tick, actingCharacter.id));\r\n}\r\n\r\nfunction applyTrait(sourceCharacter, targetCharacter, trait, rank, event, state, tick, rng) {\r\n    const rankModifier = sourceCharacter.attributes[config.mechanics.traitRank.baseAttribute].times(config.mechanics.traitRank.attributeBonusScale).div(100);\r\n    rank = Decimal.min(Decimal(rank).plus(Decimal(rank).times(rankModifier)).floor(), 100);\r\n    debugMessage(`Character has a bonus to rank of ${sourceCharacter.attributes.madness.toFixed()}% from madness, for an effective rank of ${rank}`);\r\n    debugMessage(`Tick ${tick}: Determining if trait ${trait.name} applies`);\r\n    if (trait[event]) {\r\n        const effect = trait[event];\r\n        if (effect.conditions !== undefined) {\r\n            debugMessage(\"Trait has conditions\");\r\n        }\r\n        const effectTriggers = effect.conditions === undefined || Object.keys(effect.conditions)\r\n            .every(condition => {\r\n                switch (condition) {\r\n                    case \"health_percentage\":\r\n                        // Fixme: Implement validation\r\n                        const target = getCharacter(effect.conditions[condition].target === \"attacker\" ? sourceCharacter : targetCharacter);\r\n                        const targetPercent = Decimal(effect.conditions[condition].below);\r\n                        const targetCurrentHealth = state.combat.combatantCombatStats[target.id].hp;\r\n                        const targetMaxHealth = target.maximumHp;\r\n                        const currentHealthPercent = (targetCurrentHealth.mul(100).div(targetMaxHealth));\r\n                        const conditionMet = targetPercent.gte(currentHealthPercent);\r\n                        debugMessage(`Tick ${tick}: Target health percentage is ${currentHealthPercent}, which is ${conditionMet ? \"\" : \"not\"} enough to trigger.`);\r\n                        return conditionMet;\r\n                    case \"chance\":\r\n                        const chanceToTrigger = evaluateExpression(trait[event].conditions[condition], {\r\n                            $rank: rank\r\n                        });\r\n                        const roll = Math.floor(rng.double() * 100) + 1;\r\n                        if (chanceToTrigger >= roll) {\r\n                            debugMessage(`Chance to trigger ${chanceToTrigger} with roll ${roll}: success`);\r\n                            return true;\r\n                        } else {\r\n                            debugMessage(`Chance to trigger ${chanceToTrigger} with roll ${roll}: failure.`);\r\n                            return false;\r\n                        }\r\n                    default:\r\n                        return false;\r\n                }\r\n            })\r\n        if (effectTriggers) {\r\n            debugMessage(`Tick ${tick}: Effect triggered, applying effects`);\r\n            Object.keys(trait[event].effects).forEach(traitEffect => {\r\n                    // FIXME\r\n                    switch (traitEffect) {\r\n                        case \"damage_modifier\":\r\n                            // FIXME: Validation\r\n                            const percentDamageModifier = evaluateExpression(trait[event].effects[traitEffect].percent, {\r\n                                $rank: rank\r\n                            });\r\n                            if(percentDamageModifier) {\r\n                                const newMultiplier = state.attack.attackerDamageMultiplier.plus(percentDamageModifier);\r\n                                debugMessage(`Tick ${tick}: Applying ${percentDamageModifier.toFixed()} modifier to damage, changing damage multiplier from ${state.attack.attackerDamageMultiplier.div(100).toFixed()} to ${newMultiplier.div(100).toFixed()}`);\r\n                                state.attack.attackerDamageMultiplier = newMultiplier;\r\n                            }\r\n                            break;\r\n                        case \"defense_modifier\": {\r\n                            const defenseModifier = evaluateExpression(trait[event].effects[traitEffect].percent, {\r\n                                $rank: rank\r\n                            }).div(100).plus(1);\r\n                            const newMultiplier = state.attack.targetDefenseMultiplier.times(defenseModifier);\r\n                            debugMessage(`Tick ${tick}: Applying ${defenseModifier} modifier to defense, changing defense multiplier from ${state.attack.targetDefenseMultiplier.toFixed()} to ${newMultiplier.toFixed()}`);\r\n                            state.attack.targetDefenseMultiplier = newMultiplier;\r\n                            break;\r\n                        }\r\n                        // case \"speed_modifier\" :\r\n                        //     const percentageSpeedMultiplier = evaluateExpression(trait[event].effects[traitEffect].percent, {\r\n                        //         $rank: rank\r\n                        //     });\r\n                        //\r\n                        //     const effect = {\r\n                        //         effect: {\r\n                        //             speed_bonus_percent: percentageSpeedMultiplier\r\n                        //         },\r\n                        //         roundDuration: evaluateExpression(trait[event].duration.rounds, {$rank: rank}),\r\n                        //         source: {\r\n                        //             character: sourceCharacter.id,\r\n                        //             ability: trait\r\n                        //         }\r\n                        //     };\r\n                        //     const existingEffect = state.combat.combatantCombatStats[affectedCharacterId].modifiers.find(modifier => {\r\n                        //         return modifier.source.character === sourceCharacter.id && modifier.source.ability === trait;\r\n                        //     });\r\n                        //     if (existingEffect) {\r\n                        //         existingEffect.roundDuration = trait[event].duration.rounds;\r\n                        //     } else {\r\n                        //         state.combat.combatantCombatStats[affectedCharacterId].modifiers.push(effect);\r\n                        //     }\r\n                        //     debugMessage(`Applied ${percentageSpeedMultiplier}% modifier to speed of ${affectedCharacterId}`);\r\n                        //     break;\r\n                        case \"add_modifier\":\r\n                            const modifierToAddDefinition = trait[event].effects.add_modifier;\r\n                            Object.keys(modifierToAddDefinition).forEach(effectType => {\r\n                                const effectTarget = modifierToAddDefinition[effectType].target;\r\n                                const modifier = {\r\n                                    effects: {\r\n                                        [effectType]: {\r\n                                            percent: evaluateExpression(modifierToAddDefinition[effectType].percent, {$rank: rank})\r\n                                        }\r\n                                    },\r\n                                    roundDuration: evaluateExpression(trait[event].duration.rounds, {$rank: rank}),\r\n                                    source: {\r\n                                        character: sourceCharacter.id,\r\n                                        ability: trait\r\n                                    }\r\n                                };\r\n                                // Determine targets\r\n                                const targets = Object.keys(state.combat.combatantCombatStats).filter(combatantId => {\r\n                                    switch (effectTarget) {\r\n                                        case \"attacker\":\r\n                                            return sourceCharacter.id == combatantId;\r\n                                        case \"attacked\":\r\n                                            return targetCharacter == combatantId;\r\n                                        case \"all_enemies\":\r\n                                            const actingCharacterParty = sourceCharacter.id === 0 ? 0 : 1;\r\n                                            return actingCharacterParty !== state.combat.combatantCombatStats[combatantId].party;\r\n                                        default:\r\n                                            throw new Error();\r\n                                    }\r\n                                });\r\n                                targets.forEach(combatantId => {\r\n                                    const existingEffect = state.combat.combatantCombatStats[combatantId].modifiers.find(modifier => {\r\n                                        return modifier.source.character === sourceCharacter.id && modifier.source.ability === trait;\r\n                                    });\r\n                                    if (existingEffect) {\r\n                                        existingEffect.roundDuration = evaluateExpression(trait[event].duration.rounds, {$rank: rank});\r\n                                    } else {\r\n                                        state.combat.combatantCombatStats[combatantId].modifiers.push(modifier);\r\n                                    }\r\n                                    _.get(state, \"attack.otherEffects\", []).push({\r\n                                        event: \"add_modifier\",\r\n                                        source: sourceCharacter.id,\r\n                                        target: combatantId,\r\n                                        effect: modifier,\r\n                                    });\r\n                                });\r\n                            })\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nfunction makeAttackRoll(actingCharacter, target, combatState, rng) {\r\n    const attackAccuracy = Decimal(actingCharacter.attributes[config.mechanics.accuracy.baseAttribute]).times(config.mechanics.accuracy.attributeBonusScale);\r\n    // TODO: Validation\r\n    debugMessage(\"Making an accuracy roll. Attacker Accuracy:\", attackAccuracy.toFixed());\r\n    const roll = Math.floor((rng.double() * 100));\r\n    return {\r\n        rawRoll: roll,\r\n        attackAccuracy,\r\n        total: attackAccuracy.plus(roll)\r\n    };\r\n}","import {v4} from \"node-uuid\";\r\n\r\nexport function generateHitCombatResult(tick, attackingCharacterId, targetCharacterId, damageDone, otherEffects) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"hit\",\r\n        target: targetCharacterId,\r\n        actor: attackingCharacterId,\r\n        effects: [{\r\n            event: \"damage\",\r\n            value: damageDone,\r\n            target: targetCharacterId\r\n        }, ...otherEffects]\r\n    }\r\n}\r\n\r\nexport function generateMissCombatResult(tick, attackingCharacterId, targetCharacterId) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"miss\",\r\n        target: targetCharacterId,\r\n        actor: attackingCharacterId,\r\n        effects: []\r\n    }\r\n}\r\n\r\nexport function generateSkipActionResult(tick, actingCharacterId) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"action_skipped\",\r\n        actor: actingCharacterId,\r\n        effects: []\r\n    }\r\n}","import './App.css';\nimport {v4} from \"node-uuid\";\nimport * as _ from \"lodash\";\nimport React, {useEffect, useRef, useState} from \"react\";\nimport 'react-circular-progressbar/dist/styles.css';\nimport {Regions} from \"./data/Regions\";\nimport {Actions} from \"./data/Actions\";\nimport { Decimal } from \"decimal.js\";\nimport {\n    evaluateExpression,\n    getCharacter,\n    getGlobalState, getManualSpeedMultiplier,\n    loadGlobalState, reincarnateAs,\n     saveGlobalState, unpause\n} from \"./engine\";\nimport * as seedrandom from \"seedrandom\";\nimport {config} from \"./config\";\nimport {MemoryRouter, Route, Switch} from \"react-router-dom\";\nimport ReincarnationSelectionPage from \"./components/scene/ReincarnationSelectionPage\";\nimport AdventuringPage from \"./components/scene/AdventuringPage\";\nimport DebugUi from \"./components/DebugUi\";\nimport {useHotkeys} from \"react-hotkeys-hook\";\nimport {debugMessage} from \"./debugging\";\nimport SplashPage from \"./components/scene/SplashPage\";\nimport {resolveCombat} from \"./engine/combat\";\n\nloadGlobalState();\n\nconst rng = seedrandom();\n\nlet lastTime;\n\nfunction changeCurrentAction(newAction) {\n    getGlobalState().currentAction = newAction;\n    return getGlobalState().currentAction;\n}\n\nfunction pushLogItem(item) {\n    if (getGlobalState().actionLog.length > (config.actionLog.maxSize || 10)) {\n        getGlobalState().actionLog.pop();\n    }\n    getGlobalState().actionLog.unshift(item);\n}\n\n\nfunction App() {\n    const [currentEncounter, setCurrentEncounter] = useState(getGlobalState().currentEncounter);\n    const accruedTime = useRef(0);\n    const manualSpeedUpActive = useRef(false);\n    const [displayedTime, setDisplayedTime] = useState(0);\n    const [currentAction, setCurrentAction] = useState(Actions[getGlobalState().currentAction]);\n    const [actionLog, setActionLog] = useState(getGlobalState().actionLog);\n    const [nextAction, setNextAction] = useState(getGlobalState().nextAction);\n    const player = useRef(getCharacter(0));\n    const [debugUiEnabled, setDebugUiEnabled] = useState(false);\n    const [paused, setPaused] = useState(getGlobalState().paused);\n\n    useHotkeys(\"p\", () => getGlobalState().paused = !getGlobalState().paused);\n    useHotkeys(\"`\", () => {\n        setDebugUiEnabled(enabled => {\n            if (config.debug) {\n                if (!enabled) {\n                    getGlobalState().paused = true;\n                    setPaused(getGlobalState().paused);\n                }\n                saveGlobalState();\n                return !enabled\n            } else {\n                return false;\n            }\n        });\n    });\n\n    useEffect(() => {\n        function applyAction(action) {\n            pushLogItem(action);\n            switch (action.result) {\n                case \"combat-end\":\n                    if (player.current.currentHp < player.current.maximumHp) {\n                        setCurrentAction(Actions[changeCurrentAction(\"recovering\")]);\n                    } else {\n                        if (config.artifacts.enabled) {\n                            setCurrentAction(Actions[changeCurrentAction(\"looting\")]);\n                        } else {\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                        }\n                    }\n                    setCurrentEncounter(getGlobalState().currentEncounter = null);\n                    break;\n                case \"kill\":\n                    if (getGlobalState().currentEncounter.pendingActions[0].result === \"combat-end\") {\n                        if (getCharacter(0).isDamaged) {\n                            getGlobalState().nextAction = \"healing\";\n                            setNextAction(getGlobalState().nextAction);\n                        }\n                        applyAction(getGlobalState().currentEncounter.pendingActions.shift());\n                    }\n                    const enemy = getCharacter(action.target);\n                    const enemyIsLesserDemon = getCharacter(0).otherDemonIsLesserDemon(enemy);\n                    if (enemyIsLesserDemon) {\n                        debugMessage(`Not gaining power because enemy ${action.target} was a Lesser Demon.`);\n                    }\n                    if (action.actor === 0 && action.target !== 0 && !enemyIsLesserDemon) {\n                        debugMessage(\"Player killed a non-lesser enemy and gained power.\");\n                        const player = getCharacter(0);\n                        const powerToGain = enemy.powerLevel.mul(2);\n                        const powerGained = player.gainPower(powerToGain);\n                        pushLogItem(wrapLogItem({\n                            result: \"gainedPower\",\n                            value: powerGained\n                        }))\n                    }\n                    break;\n                case \"hit\":\n                case \"miss\":\n                    (action.effects || []).forEach(effect => {\n                        const targetCharacter = getCharacter(effect.target);\n                        switch (effect.event) {\n                            case \"damage\":\n                                targetCharacter.currentHp = targetCharacter.currentHp.minus(effect.value);\n                                if (targetCharacter.currentHp.lt(Decimal(0))) {\n                                    targetCharacter.currentHp = Decimal(0);\n                                }\n                                if (getGlobalState().currentEncounter.pendingActions[0].result === \"kill\") {\n                                    applyAction(getGlobalState().currentEncounter.pendingActions.shift());\n                                }\n                                break;\n                            case \"apply_effect\":\n                                targetCharacter.addModifier({\n                                    effect: effect.effect,\n                                    magnitude: effect.value\n                                });\n                                break;\n                        }\n                    });\n                    break;\n                case \"action_skipped\":\n                    break;\n                default:\n                    throw new Error();\n            }\n            saveGlobalState();\n        }\n\n        function clearActionLog() {\n            setActionLog(getGlobalState().actionLog = []);\n        }\n\n        function tick(timestamp) {\n            if (!lastTime) {\n                lastTime = timestamp;\n            } else if (!getGlobalState().paused) {\n                if (accruedTime.current >= _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration)) {\n                    saveGlobalState();\n                    accruedTime.current = 0;\n                    switch (getGlobalState().currentAction) {\n                        case \"exploring\":\n                            if (getCharacter(0).currentHp.lt(getCharacter(0).maximumHp)) {\n                                setCurrentAction(Actions[changeCurrentAction(\"recovering\")]);\n                                // TODO: Implement random encounter chance\n                            } else {\n                                const player = getCharacter(0);\n                                getGlobalState().currentEncounter = Regions[getGlobalState().currentRegion].startEncounter(getCharacter(0), rng);\n                                setCurrentEncounter(getGlobalState().currentEncounter);\n                                setCurrentAction(Actions[changeCurrentAction(\"approaching\")]);\n                                getGlobalState().nextAction = getGlobalState().currentEncounter.enemies.reduce((actionSoFar, nextEnemy) => {\n                                    if (actionSoFar !== \"fighting\") {\n                                        return actionSoFar;\n                                    }\n\n                                    if (player.otherDemonIsLesserDemon(nextEnemy)) {\n                                        return \"intimidating\";\n                                    } else if (player.otherDemonIsGreaterDemon(nextEnemy)) {\n                                        return \"fleeing\";\n                                    } else {\n                                        return \"fighting\";\n                                    }\n                                }, \"fighting\");\n                                setNextAction(getGlobalState().nextAction);\n                                clearActionLog();\n                                if(getGlobalState().passivePowerIncome.gt(0)) {\n                                    const gainedPower = getCharacter(0).gainPower(getGlobalState().passivePowerIncome);\n                                    pushLogItem({\n                                        message: `Your Bound lesser demons grant you ${gainedPower.toFixed()} power.`,\n                                        uuid: v4()\n                                    })\n                                }\n\n                                const enemies = getGlobalState().currentEncounter.enemies;\n                                if (player.otherDemonIsGreaterDemon(enemies[0])) {\n                                    pushLogItem({\n                                        message: `💀Approaching Greater ${enemies[0].name}.💀`,\n                                        uuid: v4()\n                                    });\n                                } else if (player.otherDemonIsLesserDemon(enemies[0])) {\n                                    pushLogItem({\n                                        message: `Approaching Lesser ${enemies[0].name}.`,\n                                        uuid: v4()\n                                    });\n                                } else {\n                                    pushLogItem({\n                                        message: `Approaching ${enemies[0].name}.`,\n                                        uuid: v4()\n                                    });\n                                }\n                                saveGlobalState();\n                            }\n                            break;\n                        case \"approaching\": {\n                            // Since we're starting a new combat, remove any old, dead characters\n                            const player = getCharacter(0);\n                            switch (getGlobalState().nextAction) {\n                                case \"fighting\":\n                                    const enemies = getGlobalState().currentEncounter.enemies;\n                                    const combatResult = resolveCombat(rng, {\n                                        parties: [[player], enemies]\n                                    });\n                                    getGlobalState().currentEncounter.pendingActions = combatResult.rounds;\n\n                                    break;\n                            }\n                            setCurrentAction(Actions[changeCurrentAction(getGlobalState().nextAction)]);\n                            setNextAction();\n                            const deadCharacters = Object.keys(getGlobalState().characters)\n                                .filter(id => id !== '0' && !getGlobalState().currentEncounter.enemies.find(c => c.id == id));\n                            deadCharacters.forEach(id => {\n                                delete getGlobalState().characters[id]\n                            });\n                            break;\n                        }\n                        case \"intimidating\": {\n                            const enemy = getGlobalState().currentEncounter.enemies[0];\n                            const chanceToIntimidate = Decimal(5).times(Decimal(2).pow(getCharacter(0).powerLevel.minus(1).minus(enemy.powerLevel).toNumber()));\n                            const roll = Math.floor(rng.double() * 100) + 1;\n                            if (chanceToIntimidate.gte(roll)) {\n                                const periodicPowerIncreases = enemy.powerLevel;\n                                pushLogItem(wrapLogItem({\n                                    result: \"intimidated\",\n                                    target: enemy.id,\n                                    value: periodicPowerIncreases\n                                }));\n                                getGlobalState().passivePowerIncome = getGlobalState().passivePowerIncome.plus(periodicPowerIncreases);\n                            } else {\n                                pushLogItem(wrapLogItem({\n                                    message: `${getCharacter(enemy.id).name} escaped! (You rolled ${roll} vs ${chanceToIntimidate} chance to Bind).`\n                                }));\n                            }\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            break;\n                        }\n                        case \"fleeing\":\n                            const player = getCharacter(0);\n                            const enemy = getGlobalState().currentEncounter.enemies[0];\n                            getGlobalState().currentEncounter = null;\n                            setCurrentEncounter(null);\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            pushLogItem({\n                                result: \"escaped\",\n                                uuid: v4()\n                            });\n                            if (player.otherDemonIsGreaterDemon(enemy)) {\n                                const powerToGain = evaluateExpression(config.mechanics.xpFromGreaterDemon, {\n                                    $enemy: enemy\n                                });\n                                const powerGained = player.gainPower(powerToGain);\n                                pushLogItem(wrapLogItem({\n                                    result: \"gainedPower\",\n                                    value: powerGained,\n                                }));\n                            }\n                            break;\n                        case \"fighting\" : {\n                            if (getGlobalState().currentEncounter.pendingActions.length) {\n                                const nextAction = getGlobalState().currentEncounter.pendingActions.shift();\n                                applyAction(nextAction);\n                                setActionLog([...getGlobalState().actionLog]);\n                            } else {\n                                setCurrentAction(Actions[changeCurrentAction(\"fleeing\")]);\n                            }\n                            break;\n                        }\n                        case \"looting\":\n                            const lootRoll = Math.floor(rng.double() * 666);\n                            if (lootRoll <= getGlobalState().currentEncounter.encounterLevel) {\n\n                            }\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            break;\n                        case \"recovering\": {\n                            const player = getCharacter(0);\n                            if (player.currentHp.lt(player.maximumHp)) {\n                                const amountToHeal = player.currentHp.plus(player.healing).gt(player.maximumHp) ?\n                                    player.maximumHp.minus(player.currentHp) : player.healing;\n                                player.currentHp = player.currentHp.plus(amountToHeal);\n                                pushLogItem({\n                                    target: player.id,\n                                    value: amountToHeal,\n                                    result: \"healed\",\n                                    uuid: v4()\n                                })\n                            }\n                            if (player.currentHp.gte(player.maximumHp)) {\n                                setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            }\n                            break;\n                        }\n                        case \"reincarnating\":\n                            setCurrentEncounter();\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            setActionLog([]);\n                            getGlobalState().actionLog = [];\n                            break;\n                        default:\n                            throw new Error(`Action ${getGlobalState().currentAction} not supported.`);\n                    }\n                }\n\n                setDisplayedTime(accruedTime.current);\n                const passedTime = timestamp - lastTime;\n                const adjustedTime = passedTime * (manualSpeedUpActive.current ? getManualSpeedMultiplier() : 1);\n                accruedTime.current = Math.min(accruedTime.current + adjustedTime, _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration));\n            }\n            lastTime = timestamp;\n            requestAnimationFrame(tick);\n            setActionLog([...getGlobalState().actionLog]);\n        }\n\n        requestAnimationFrame(tick)\n    }, []);\n\n    return (\n        <MemoryRouter initialEntries={[\n            getGlobalState().currentAction === \"reincarnating\" ? \"/reincarnatin\" : (\n                getGlobalState().currentAction === \"adventuring\" ? \"/adventuring\" : \"/\")\n        ]} basename=\"%PUBLIC_URL%\">\n            <Switch>\n                <Route path=\"/\" exact>\n                    <SplashPage/>\n                </Route>\n                <Route path=\"/reincarnating\" exact>\n                    <ReincarnationSelectionPage reincarnate={(monster, attributes) => {\n                        reincarnateAs(monster, attributes);\n                        setCurrentAction(getGlobalState().currentAction);\n                        unpause();\n                        setPaused(false);\n                        accruedTime.current = 10000000;\n                    }}/>\n                </Route>\n                <Route path=\"/adventuring\" exact>\n                    <AdventuringPage player={player.current}\n                                     paused={paused}\n                                     togglePause={(newValue) => setPaused(newValue)}\n                                     setNextAction={newAction => setNextAction(newAction)}\n                                     actionTime={displayedTime}\n                                     currentEncounter={currentEncounter}\n                                     startManualSpeedup={() => {\n                                         manualSpeedUpActive.current = config.manualSpeedup.enabled;\n                                     }}\n                                     stopManualSpeedup={() => {\n                                         manualSpeedUpActive.current = false\n                                     }}\n                                     currentAction={currentAction}\n                                     nextAction={nextAction}\n                                     actionLog={actionLog}\n                    />\n                </Route>\n            </Switch>\n            {debugUiEnabled && <DebugUi/>}\n        </MemoryRouter>\n    );\n}\n\nexport default App;\n\nfunction wrapLogItem(item) {\n    return {\n        uuid: v4(),\n        ...item\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}