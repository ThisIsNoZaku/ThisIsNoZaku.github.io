{"version":3,"sources":["data/creatures.js","config.js","debugging.js","data/Tactics.js","data/Statuses.js","data/Traits.js","character.js","engine/index.js","data/Regions.js","data/Actions.js","data/Attributes.js","components/charactersheet/TacticsDescription.js","components/scene/ReincarnationSelectionPage.js","components/charactersheet/CharacterAttributes.js","components/charactersheet/CharacterTraits.js","components/charactersheet/TacticsSection.js","engine/combat/getHitChanceBy.js","engine/combat/calculateDamageBy.js","components/charactersheet/CharacterCombatStatistics.js","components/CharacterSheet.js","components/PlayerStats.js","components/TopSection.js","components/CharacterCombatSummary.js","components/ActionLog.js","components/BottomSection.js","components/EnemySidebar.js","engine/CharacterCombatState.js","engine/combat/index.js","combatResult.js","generateLogItem.js","components/scene/AdventuringPage.js","components/DebugUi.js","components/scene/SplashPage.js","App.js","reportWebVitals.js","index.js"],"names":["Creatures","bloodthirstyKnight","name","traits","enabled","appearance","texture","description","rapaciousHighwayman","condemnedSlasher","crushingSnake","skitteringHorror","deadlyHornet","tormentedDead","wheezingApparition","monstrousTroll","assertCreatureExists","id","Error","console","log","process","REACT_APP_DEBUG_MODE","config","manualSpeedup","multiplier","actionLog","maxSize","REACT_APP_MAX_ACTIONLOG_SIZE","encounters","lesserEncounterChanceWeight","greaterEncounterChanceWeight","evenEncounterChanceWeight","lesserLevelScale","lesserLevelFloor","greaterLevelScale","greaterLevelCap","chanceToIntimidateLesser","chanceToEscapeGreater","lesserDemonInstantKillLevel","enemyLatentPower","minimumLevelForGreaterEncounters","mechanics","artifacts","REACT_APP_FEATURE_ARTIFACTS_ENABLED","reincarnation","bonusPointsForHighestLevel","latentPowerGainOnReincarnate","latentPowerEffectScale","traitPointCost","latentPowerCap","attributePointCost","xp","gainedFromGreaterDemon","gainedFromLesserDemon","gainedFromOtherDemon","levelToPowerEquation","powerToLevelEquation","maxLevel","combat","randomEncounterChance","determineHit","precision","baseAttribute","effectPerPoint","resilience","evasion","power","traitRank","playerAttributeMinimum","fatigue","evasionPenaltyPerPoint","hp","pcBonus","pointsPerLevel","healingPerLevel","baseHitChance","baseDamage","attributeDamageModifier","defaultMinDamageMultiplier","defaultMedDamageMultiplier","defaultMaxDamageMultiplier","baseMinimumDamageWeight","baseMedianDamageWeight","baseMaximumDamageWeight","debug","debugMessage","apply","arguments","Tactics","aggressive","title","modifiers","power_modifier","precision_modifier","defensive","resilience_modifier","fatigue_multiplier","deceptive","evasion_modifier","max_hit_damage_modifier","Statuses","berserk","icon","_","effects","terrified","decays","restrained","accuracy_modifier","famished","maximum_hp_multiplier","Traits","bloodrage","on_round_end","conditions","health_percentage","target","below","add_statuses","rank","cupidity","on_intimidate","chance","steal_item_chance","exhaustingTouch","inescapableGrasp","on_hitting","critical_hit","duration","rounds","sadisticJoy","on_kill","power_gain_modifier","piercingStrike","continuous","modifier","sharedPain","on_taking_damage","damage","terrifyingSkitter","on_combat_start","regeneration","heal","percent","on_trait","trait","Character","props","this","_isPc","isPc","_name","_absorbedPower","Decimal","absorbedPower","_latentPower","latentPower","_attributes","Attributes","attributes","_currentHp","maximumHp","_combat","CombatStats","_traits","Object","keys","reduce","transformed","next","_appearance","_modifiers","_tactics","tactics","_statuses","statuses","forEach","status","newAppearance","newTraits","other","greaterDemonScale","evaluateExpression","player","enemy","powerLevel","gte","plus","lesserDemonScale","lte","minus","powerGained","latentPowerMultiplier","times","floor","push","newTactics","getLevelForPower","newHealth","lt","currentHp","gt","newLatentPower","attributeMultiplier","madness","mul","baseHealing","tacticsMultiplier","healing_modifier","value","getPowerNeededForLevel","div","ceil","getGlobalState","unlockedTraits","character","_brutality","brutality","_cunning","cunning","_deceit","deceit","_madness","defineProperty","calculateDamage","calculateCombatStat","hitType","hitTypeDamageMultiplier","substring","toUpperCase","tacticsModifier","totalDamageMultiplier","combatAttribute","attributeBase","statusesModifier","currentValue","nextStatus","statusDefinition","traitModifier","previousValue","traitDefinition","saveKey","require","Package","expressionCache","globalState","loadGlobalState","saveGlobalState","window","localStorage","setItem","JSON","stringify","loaded","getItem","previousCompatibleVersions","changelog","pkg","version","compatiblePreviousVersions","latestVersion","nextKey","parse","stateReviver","creatures","regions","rival","reincarnationCount","passivePowerIncome","unlockedMonsters","paused","currentAction","nextAction","highestLevelReached","highestLevelEnemyDefeated","startingTraits","currentEncounter","manualSpeedMultiplier","currentRegion","exploration","explorationTime","approachTime","combatTime","lootingTime","recoveryTime","fleeingTime","intimidateTime","reincarnationTime","characters","0","items","minimumDamageMultiplier","medianDamageMultiplier","maximumDamageMultiplier","tutorials","getCharacter","assertCharacterExists","nextMonsterId","getSpriteForCreature","expression","context","undefined","Function","call","level","$level","powerPoints","$powerPoints","reincarnateAs","monsterId","newAttributes","currentDemon","options","filter","m","Math","random","length","attribute","latentPowerGain","min","reincarnate","t","key","map","parsed","Number","parseFloat","isNaN","Region","available","background","rng","encounterType","combinedEncounterChances","encounterTypeRoll","double","lesserChance","evenChance","encounterLevel","encounterOffset","max","difference","encounterWithRival","encounterDef","type","region","possibleEncounters","encounterId","encounterEnabled","debugNotDisabled","randomKey","chooseRandomEncounter","pendingActions","enemies","flatMap","enemyDef","count","i","generatedCreature","nextId","numberOfBonusTraits","alreadySelected","x","includes","index","generateCreature","isRival","Regions","forest","far","mid","close","caves","mountains","desert","Actions","exploring","approaching","dead","looting","fleeing","fighting","reincarnating","recovering","intimidating","label","Grid","container","tactic","Tooltip","style","color","textAlign","ReincarnationSelectionPage","history","useHistory","useState","baseAttributeProperty","setAttributes","setPlayerTactics","setStartingTraits","spendableBonusPoints","availableBonusPoints","values","sum","totalAttributeCost","traitsOwned","nextBonusTraitCost","nextAttributeCosts","attributeScore","useEffect","item","xs","toFixed","src","Button","disabled","onClick","traitId","justify","height","variant","dangerouslySetInnerHTML","__html","visibility","direction","TacticsDescription","alignItems","creatureEnabled","debugEnabled","width","CharacterAttributes","useMemo","characterAttributes","Fragment","fontSize","CharacterTraits","TacticsSection","characterTactics","getHitChanceBy","attackingCharacter","against","targetCharacter","attackerPrecision","targetEvasion","med","calculateDamageBy","attacker","debugOutput","attackerPower","powerMultiplier","pow","defenderResilience","resilienceMultiplier","damageModifier","minimumDamage","medianDamage","maximumDamage","CharacterCombatStatistics","combinedHitWeights","hitChances","total","calculatedDamage","powerTooltip","characterPower","resilienceTooltip","characterResilience","characterEvasion","characterPrecision","Help","CharacterSheet","spriteSrc","powerRequiredForCurrentLevel","powerNeededForNextLevel","progressToNextLevel","latentPowerModifier","toNumber","styles","root","backgroundColor","PlayerStats","Paper","elevation","display","flex","buttons","TopSection","reincarnateEnabled","isAlive","automaticReincarnateEnabled","CharacterCombatSummary","low","high","optimum","combined","abs","flexDirection","overflowY","message","tick","uuid","printActionItem","justifyContent","actions","alignSelf","action","maxHeight","actionProgress","BottomSection","escapeChance","intimidateChance","onMouseEnter","startManualSpeedup","onMouseLeave","stopManualSpeedup","togglePause","actionButton","details","actionTime","state","ActionLog","text","setNextAction","nextActionName","alive","EnemySidebar","CharacterCombatState","originalCharacter","party","baseBrutality","baseDeceit","baseCunning","baseMadness","_speed","speed","lastActed","totalMultiplier","newSpeed","baseSpeed","speedMultiplier","baseAccuracy","statusesMultiplier","canAct","skip_turn","resolveCombat","definition","combatResult","winner","combatantCombatStats","parties","partyIndex","combatant","startOfCombatEffects","triggerEvent","actor","round","effect","initiatives","initiativeCount","actingCharacter","beginningOfRoundEffects","enemyParty","livingEnemies","attackRollResult","combatState","roll","accuracy","rawRoll","makeAttackRoll","hitTypeChances","damageCategories","damageRoll","baseDamageToInflict","attackResult","attackMultiplier","defenseDivisor","attack","damageMultiplier","finalDamage","event","source","join","attackingCharacterId","targetCharacterId","damageDone","otherEffects","v4","result","generateHitCombatResult","resolveHit","generateMissCombatResult","resolveMiss","actingCharacterId","generateSkipActionResult","resolveSkippedAction","combatantId","parseInt","roundDuration","endOfRoundEffects","healthToLose","damageFromFatigue","playerPartyDead","every","enemyPartyDead","selectTargets","sourceCharacter","combatants","targetType","eventType","recordedEffects","roundEvents","rankModifier","condition","targetPercent","targetCurrentHealth","targetMaxHealth","currentHealthPercent","thisConditionMet","chanceToTrigger","$rank","traitEffect","percentDamageModifier","newMultiplier","damageToInflict","attackDamage","defenseModifier","statusesDefinition","statusType","effectTarget","targets","statusLevel","applyTrait","generateLogItem","original","describeEffect","eq","lastTime","overflow","image","position","left","changeCurrentAction","newAction","pushLogItem","pop","unshift","AdventuringPage","accruedTime","useRef","setEnemy","setActionLog","setCurrentEncounter","setCurrentAction","setPaused","displayedTime","setDisplayedTime","manualSpeedUpActive","automaticReincarnate","setAutomaticReincarnate","useHotkeys","lastFrame","applyAction","lastTick","powerToGain","traitMultiplier","pregainLevel","gainPower","shift","requestAnimationFrame","timestamp","current","clearStatuses","proceedingToEncounter","encounterChance","amountToHeal","healing","encounterRoll","startEncounter","actionSoFar","nextEnemy","otherDemonIsLesserDemon","otherDemonIsGreaterDemon","gainedPower","find","c","instantDeathLevel","chanceToIntimidate","periodicPowerIncreases","chanceToFlee","adjustedTime","debugMultiplier","baseMultiplier","getManualSpeedMultiplier","cancelAnimationFrame","className","onMouseOver","zIndex","p","minHeight","bottom","padding","DebugUi","setCreatures","setRegions","minLevel","setMinLevel","setMaxLevel","setManualSpeedMultiplier","playerAbsorbedPower","setPlayerAbsorbedPower","removeItem","alert","TextField","onChange","e","newValue","regionId","SplashPage","changes","entry","confirm","seedrandom","App","debugUiEnabled","setDebugUiEnabled","initialEntries","basename","path","exact","monster","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.927816c8.chunk.js","sourcesContent":["export const Creatures  = {\r\n    bloodthirstyKnight: {\r\n        name: \"Bloodthirsty Knight\",\r\n        traits: [\"bloodrage\"],\r\n        enabled: true,\r\n        appearance: \"bloodthirstyKnight\",\r\n        texture: \"01_warrior.png\",\r\n        description: \"A ruthless warrior who delighted in slaughtering whoever they encounter on the battlefield.\",\r\n    },\r\n    rapaciousHighwayman: {\r\n        name: \"Rapacious Highwayman\",\r\n        traits: [\"cupidity\"],\r\n        enabled: false,\r\n        appearance: \"rapaciousHighwayman\",\r\n        texture: \"02_hunter.png\",\r\n        description: \"A thief who stole from whomever he could get away with, from wealthy merchants to starving vagrants.\",\r\n    },\r\n    condemnedSlasher: {\r\n        name: \"Condemned Slasher\",\r\n        traits: [\"sadisticJoy\"],\r\n        enabled: true,\r\n        appearance: \"condemnedSlasher\",\r\n        texture: \"03_rogue.png\",\r\n        description: \"A madman who gained exquisite pleasure from seeing how many cuts could be made in a victim's body before they died.\",\r\n    },\r\n    crushingSnake: {\r\n        name: \"Crushing Snake\",\r\n        traits: [\"inescapableGrasp\"],\r\n        enabled: true,\r\n        appearance: \"crushingSnake\",\r\n        texture: \"06_snake_01.png\",\r\n        description: \"A monstrous reptile which\",\r\n    },\r\n    skitteringHorror: {\r\n        name: \"Skittering Horror\",\r\n        traits: [\"terrifyingSkitter\"],\r\n        enabled: true,\r\n        appearance: \"skitteringHorror\",\r\n        texture: \"10_spider.png\",\r\n        description: \"A massive spider that enjoys stalking its prey, frightening it by the sickening skittering of it's arachnid legs.\"\r\n    },\r\n    deadlyHornet: {\r\n        name: \"Deadly Hornet\",\r\n        traits: [\"piercingStrike\"],\r\n        enabled: true,\r\n        appearance: \"deadlyHornet\",\r\n        texture: \"12_wasp.png\",\r\n        description: \"An insect whose stinger is able to pierce even metal protection.\"\r\n    },\r\n    tormentedDead: {\r\n        name: \"Tormented Dead\",\r\n        traits: [\"sharedPain\"],\r\n        enabled: true,\r\n        appearance: \"tormentedDead\",\r\n        texture: \"29_zombie.png\",\r\n        description: \"A human denied eternal rest and in agony from its ruined flesh.\"\r\n    },\r\n    wheezingApparition: {\r\n        name: \"Wheezing Apparition\",\r\n        traits: [\"exhaustingTouch\"],\r\n        enabled: false,\r\n        appearance: \"wheezingApparition\",\r\n        texture: \"128_sorrowsworn.png\",\r\n        description: \"A soul of someone killed by strangulation, searching endlessly for victims upon which it can inflict the same fate.\"\r\n    },\r\n    monstrousTroll: {\r\n        name: \"Monstrous Troll\",\r\n        traits: [\"regeneration\"],\r\n        enabled: false,\r\n        appearance: \"monstrousTroll\",\r\n        texture: \"27_troll.png\",\r\n        description: \"A hulking\"\r\n    }\r\n}\r\n\r\nexport function assertCreatureExists(id) {\r\n    if(!Creatures[id]) {\r\n        throw new Error(`No creature with id ${id} is defined`);\r\n    }\r\n}","import * as _ from \"lodash\";\r\nconsole.log(process.env.REACT_APP_DEBUG_MODE, typeof process.env.REACT_APP_DEBUG_MODE);\r\n\r\nexport const config = {\r\n    manualSpeedup: {\r\n        enabled: false,\r\n        multiplier: 2\r\n    },\r\n\r\n    actionLog: {\r\n        maxSize:  process.env.REACT_APP_MAX_ACTIONLOG_SIZE || 20,\r\n    },\r\n    encounters: {\r\n        lesserEncounterChanceWeight: 20,\r\n        greaterEncounterChanceWeight: 20,\r\n        evenEncounterChanceWeight: 60,\r\n        lesserLevelScale: 1, // A demon is \"lesser\" than another when its level is this much lower.\r\n        lesserLevelFloor: 5,\r\n        greaterLevelScale: 1, // A demon is \"greater\" than another when its level is this much higher.\r\n        greaterLevelCap: 4,\r\n        chanceToIntimidateLesser: \"player.powerLevel.minus(enemy.powerLevel).times(25).plus(Decimal.max(Decimal(player.attributes.deceit).minus((enemy && enemy.attributes.cunning)), 0).times(5))\",\r\n        chanceToEscapeGreater: \"player.powerLevel.gt(enemy.powerLevel) ? 100 : Decimal.max(enemy.powerLevel.minus(player.powerLevel), 1).times(25).plus(Decimal.max(Decimal(player.attributes.cunning).minus((enemy && enemy.attributes.deceit) || 0), 0).times(5))\",\r\n        lesserDemonInstantKillLevel: \"Decimal(highestLevelEnemyDefeated).minus(5)\",\r\n        enemyLatentPower: \"Decimal.max(0, encounterLevel.minus(2).times(25))\",\r\n        minimumLevelForGreaterEncounters: 5\r\n    },\r\n\r\n    mechanics: {\r\n        artifacts: {\r\n            enabled: process.env.REACT_APP_FEATURE_ARTIFACTS_ENABLED || false\r\n        },\r\n        reincarnation: {\r\n            bonusPointsForHighestLevel: 2,\r\n            latentPowerGainOnReincarnate: \"player.powerLevel.times(5)\",\r\n            latentPowerEffectScale: .01,\r\n            traitPointCost: \"Decimal.max(1, traitsOwned.times(2))\",\r\n            latentPowerCap: \"highestLevelEnemyDefeated.times(25)\",\r\n            attributePointCost: \"Decimal.max(1, attributeScore)\"\r\n        },\r\n        xp: {\r\n            gainedFromGreaterDemon: \"enemy.powerLevel\",\r\n            gainedFromLesserDemon: \"enemy.powerLevel\",\r\n            gainedFromOtherDemon: \"enemy.powerLevel.times(5)\"\r\n        },\r\n        levelToPowerEquation: \"$level.eq(1) ? Decimal(0) : Decimal($level.minus(1).toNumber()).pow(2).times(10)\",\r\n        powerToLevelEquation: \"Decimal(0).eq($powerPoints) ? Decimal(1) : Decimal.sqrt($powerPoints.div(10)).plus(1).floor()\",\r\n        maxLevel: 25,\r\n        combat: {\r\n            randomEncounterChance: \"player.powerLevel.div(10).floor().times(10)\",\r\n            determineHit: \"roll >= target ? 'hit' : 'miss'\",\r\n            precision: { // Determines how precision rolls work\r\n                baseAttribute: \"deceit\",\r\n                effectPerPoint: .1\r\n            },\r\n            resilience: {\r\n                baseAttribute: \"brutality\",\r\n                effectPerPoint: .1\r\n            },\r\n            evasion: {\r\n                baseAttribute: \"cunning\",\r\n                effectPerPoint: .1\r\n            },\r\n            power: {\r\n                baseAttribute: \"brutality\",\r\n                effectPerPoint: .1\r\n            },\r\n            traitRank: {\r\n                baseAttribute: \"madness\",\r\n                effectPerPoint: .05\r\n            },\r\n            playerAttributeMinimum: 1,\r\n            fatigue: {\r\n                evasionPenaltyPerPoint: 2\r\n            },\r\n            hp: {\r\n                pcBonus: 10,\r\n                pointsPerLevel: 25,\r\n                healingPerLevel: 5,\r\n                baseAttribute: \"madness\",\r\n                effectPerPoint: .05\r\n            },\r\n            baseHitChance: 90,\r\n            baseDamage: \"player.powerLevel.times(10)\",\r\n            attributeDamageModifier: .02,\r\n            defaultMinDamageMultiplier: .8,\r\n            defaultMedDamageMultiplier: 1,\r\n            defaultMaxDamageMultiplier: 1.2,\r\n            baseMinimumDamageWeight: 5,\r\n            baseMedianDamageWeight: 90,\r\n            baseMaximumDamageWeight: 5\r\n        }\r\n    },\r\n    debug: process.env.REACT_APP_DEBUG_MODE === \"true\"\r\n}","import {config} from \"./config\";\r\n\r\nexport function debugMessage() {\r\n    if(config.debug) {\r\n        console.debug.apply(null, arguments);\r\n    }\r\n}","export const Tactics = {\r\n    aggressive: {\r\n        title: \"Aggressive\",\r\n        description: \"Your tactics emphasize overwhelming power and violence.\",\r\n        modifiers: {\r\n            power_modifier: .5,\r\n            precision_modifier: .25\r\n        }\r\n    },\r\n    defensive: {\r\n        title: \"Defensive\",\r\n        description: \"Your tactics emphasize caution and husbanding your strength.\",\r\n        modifiers: {\r\n            resilience_modifier: .50,\r\n            fatigue_multiplier: .75\r\n        }\r\n    },\r\n    deceptive: {\r\n        title: \"Deceptive\",\r\n        description: \"Your tactics emphasize disorientation and trickery.\",\r\n        modifiers: {\r\n            evasion_modifier: .5,\r\n            max_hit_damage_modifier: .3\r\n        }\r\n    }\r\n}","import * as _ from \"lodash\";\r\n\r\nexport const Statuses = {\r\n    berserk: {\r\n        name: \"Berserk\",\r\n        icon: \"./icons/icons-516.png\",\r\n        description: _.template(\"Your rage grants you a ${power_modifier}% bonus to Power but a ${evasion_modifier}% penalty to Evasion.\"),\r\n        effects: {\r\n            power_modifier: .2,\r\n            evasion_modifier: -.1\r\n        }\r\n    },\r\n    terrified: {\r\n        name: \"Terrified\",\r\n        icon: \"icons/icons-130.png\",\r\n        description: _.template(\"The fear in your heart inflicts a ${precision_modifier}% penalty to Precision and a ${power_modifier}% penalty to Power.\"),\r\n        effects: {\r\n            precision_modifier: -.2,\r\n            power_modifier: -.2\r\n        },\r\n        decays: true\r\n    },\r\n    restrained: {\r\n        name: \"Restrained\",\r\n        description: _.template(\"Your limbs are bound, causing a ${accuracy_modifier}% miss chance.\"),\r\n        icon: \"icons/icons-116.png\",\r\n        effects: {\r\n            accuracy_modifier: -.1\r\n        },\r\n        decays: true\r\n    },\r\n    famished: {\r\n        name: \"Famished\",\r\n        icon: \"icons/icons-149.png\",\r\n        effects: {\r\n            maximum_hp_multiplier: -.01\r\n        }\r\n    }\r\n}","import * as _ from \"lodash\";\r\n// FIXME: Implement validation\r\nexport const Traits = {\r\n    bloodrage: {\r\n        name: \"Blood Rage\",\r\n        icon: \"icons/icons-139.png\",\r\n        description: _.template(\"This demon's unquenchable thirst for blood causes it to gain ${rank} stacks of Berserk when an enemy has 50% or less health.\"),\r\n        on_round_end: {\r\n            conditions : {\r\n                health_percentage: {\r\n                    target: \"any_enemy\",\r\n                    below: 50\r\n                }\r\n            },\r\n            effects: {\r\n                add_statuses: {\r\n                    berserk: {\r\n                        target: \"attacker\",\r\n                        rank: \"rank\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    cupidity: {\r\n        name: \"Cupidity\",\r\n        icon: \"icons/icons-2503.png\",\r\n        description: _.template(\"When this demon successfully Intimidates another demon, it gains a <span style='color: red'>${rank}%</span> chance to seize the intimidated demon's Artifacts as though it were killed.\"),\r\n        on_intimidate: {\r\n            conditions: {\r\n                chance: \"$rank\"\r\n            },\r\n            effects: {\r\n                steal_item_chance: {\r\n                    target: \"enemies\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    exhaustingTouch: {\r\n        name: \"Strangulation\",\r\n        icon: \"icons/icons-115.png\",\r\n        description: _.template(\"The demon's touch saps the strength from the victims limbs, reducing both Damage and Defense by <span>${rank.times(5)}%</span> for 1 round.\")\r\n    },\r\n    inescapableGrasp: {\r\n        name: \"Inescapable Grasp\",\r\n        icon: \"icons/icons-2221.png\",\r\n        description: _.template(\"You bind your victims when you strike, causing ${rank} levels of Restrained when you hit with an attack.\"),\r\n        on_hitting: {\r\n            conditions: {\r\n                critical_hit: {\r\n                    chance: 100\r\n                }\r\n            },\r\n            effects: {\r\n                add_statuses: {\r\n                    restrained: {\r\n                        target: \"attacked\",\r\n                        rank: \"rank\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: 2\r\n            }\r\n        }\r\n    },\r\n    sadisticJoy: {\r\n        name: \"Sadistic Joy\",\r\n        icon: \"icons/icons-852.png\",\r\n        description: _.template(\"The demon gains vile pleasure from the pain it inflicts, absorbing an additional ${rank.times(25)}% power from killing other demons.\"),\r\n        on_kill: {\r\n            effects: {\r\n                power_gain_modifier: \"rank.times(.25)\"\r\n            }\r\n        }\r\n    },\r\n    piercingStrike: {\r\n        name: \"Piercing Strike\",\r\n        icon: \"icons/icons-113.png\",\r\n        description: _.template(\"Your fierce attacks can punch right through even armor. Your <span style='color: lightgreen'>Precision</span> is increased by <span style='color: orangered'>${rank.times(25)}%</span>\"),\r\n        continuous: {\r\n            effects: {\r\n                precision_modifier: {\r\n                    target: \"self\",\r\n                    modifier: \"rank.times(.1)\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    sharedPain: {\r\n        name: \"Shared Pain\",\r\n        icon: \"icons/icons-146.png\",\r\n        description: _.template(\"You return the pain of injuries inflicted on you, reflecting <span style='color: orangered'>${rank.times(20).toFixed()}%</span> of the damage back.\"),\r\n        on_taking_damage: {\r\n            effects: {\r\n                target: \"attacker\",\r\n                damage: \"$rank.times(20).div(100).times(attackDamage)\"\r\n            }\r\n        }\r\n    },\r\n    terrifyingSkitter: {\r\n        name: \"Terrifying Skitter\",\r\n        icon: \"icons/icons-2260.png\",\r\n        description: _.template(\"The sickening sound of your feet on the ground unnerves even other demons, making the enemy <span style='color: violet'>Terrified</span> for <span style='color: lightblue'>${rank.div(10).round(0, 0).plus(1).toFixed()}</span> round(s), reducing their Power and Precision.\"),\r\n        on_combat_start: {\r\n            effects: {\r\n                add_statuses: {\r\n                    terrified: {\r\n                        target: \"all_enemies\",\r\n                        rank: \"rank\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: \"$rank.div(10).round(0, 0).plus(1)\"\r\n            }\r\n        }\r\n    },\r\n    regeneration: {\r\n        name: \"Regeneration\",\r\n        icon: \"icons/icons-109.png\",\r\n        description: _.template(\"Your healing abilities restores you to full hp ${rank}% times per combat, but when you heal gain 1 stack of Famished.\"),\r\n        on_round_end: {\r\n            conditions: {\r\n                health_percentage: {\r\n                    target: \"self\",\r\n                    below: 100\r\n                }\r\n            },\r\n            effects: {\r\n                heal: {\r\n                    target: \"self\",\r\n                    percent: 100\r\n                }\r\n            }\r\n        },\r\n        on_trait: {\r\n            conditions: {\r\n                trait: \"regeneration\"\r\n            },\r\n            effects: {\r\n                add_statuses: {\r\n                    famished: {\r\n                        target: \"actor\",\r\n                        rank: 1\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTrait(traitId) {\r\n    return Traits[traitId];\r\n}","import {config} from \"./config\";\r\nimport {evaluateExpression, getGlobalState, getLevelForPower, getPowerNeededForLevel} from \"./engine\";\r\nimport {Creatures} from \"./data/creatures\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {Tactics} from \"./data/Tactics\";\r\nimport {Statuses} from \"./data/Statuses\";\r\nimport * as _ from \"lodash\";\r\nimport {Traits} from \"./data/Traits\";\r\n\r\nexport class Character {\r\n    constructor(props) {\r\n\r\n        this._isPc = props.isPc || props._isPc;\r\n        this.id = props.id;\r\n        this._name = props.name || props._name;\r\n        this._absorbedPower = Decimal(props.absorbedPower || props._absorbedPower || 0);\r\n        this._latentPower = Decimal(props.latentPower || props._latentPower || 0);\r\n        this._attributes = new Attributes(props.attributes || props._attributes, this);\r\n        this._currentHp = Decimal(props._currentHp || this.maximumHp);\r\n        this._combat = new CombatStats(props.combat || props._combat, this);\r\n        this._traits = Object.keys(props.traits || props._traits).reduce((transformed, next) => {\r\n            transformed[next] = Decimal((props.traits || props._traits)[next]);\r\n            return transformed;\r\n        }, {});\r\n        this._appearance = props.appearance || props._appearance;\r\n        this._modifiers = props.modifiers || props._modifiers || [];\r\n        this._tactics = props.tactics || props._tactics || \"defensive\";\r\n        this._statuses = props.statuses || props._statuses || {};\r\n    }\r\n\r\n    get tactics() {\r\n        return this._tactics;\r\n    }\r\n\r\n    get statuses() {\r\n        return this._statuses;\r\n    }\r\n\r\n    clearStatuses() {\r\n        Object.keys(this._statuses).forEach(status => delete this._statuses[status]);\r\n    }\r\n\r\n    set tactics(newTactics) {\r\n        this._tactics = newTactics;\r\n    }\r\n\r\n    get isPc() {\r\n        return this._isPc;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get powerLevel() {\r\n        return getLevelForPower(this._absorbedPower);\r\n    }\r\n\r\n    get currentHp() {\r\n        return Decimal(this._currentHp);\r\n    }\r\n\r\n    set currentHp(newHealth) {\r\n        if (this.maximumHp.lt(newHealth)) {\r\n            this._currentHp = this.maximumHp;\r\n        } else {\r\n            this._currentHp = newHealth;\r\n        }\r\n    }\r\n\r\n    get isAlive() {\r\n        return Decimal(this.currentHp).gt(0);\r\n    }\r\n\r\n    get latentPower() {\r\n        return this._latentPower;\r\n    }\r\n\r\n    set latentPower(newLatentPower) {\r\n        this._latentPower = newLatentPower;\r\n    }\r\n\r\n    get maximumHp() {\r\n        const attributeMultiplier = this.attributes.madness.times(config.mechanics.combat.hp.effectPerPoint);\r\n        return this.powerLevel\r\n            .times(attributeMultiplier.plus(1))\r\n            .mul(config.mechanics.combat.hp.pointsPerLevel)\r\n            .plus(this._isPc ? config.mechanics.combat.hp.pcBonus : 0)\r\n            .floor();\r\n    }\r\n\r\n    get attributes() {\r\n        return this._attributes;\r\n    }\r\n\r\n    get combat() {\r\n        return this._combat;\r\n    }\r\n\r\n    get traits() {\r\n        return this._traits;\r\n    }\r\n\r\n    set traits(newTraits) {\r\n        this._traits = newTraits;\r\n    }\r\n\r\n    get appearance() {\r\n        return this._appearance;\r\n    }\r\n\r\n    reincarnate(newAppearance, newTraits) {\r\n        this._appearance = newAppearance;\r\n        this._traits = newTraits;\r\n    }\r\n\r\n    otherDemonIsGreaterDemon(other) {\r\n        const greaterDemonScale = evaluateExpression(config.encounters.greaterLevelScale, {\r\n            player: this,\r\n            enemy: other\r\n        });\r\n        return other.powerLevel.gte(this.powerLevel.plus(greaterDemonScale));\r\n    }\r\n\r\n    otherDemonIsLesserDemon(other) {\r\n        const lesserDemonScale = evaluateExpression(config.encounters.lesserLevelScale, {\r\n            player: this,\r\n            enemy: other\r\n        });\r\n        return other.powerLevel.lte(this.powerLevel.minus(lesserDemonScale));\r\n    }\r\n\r\n    gainPower(powerGained) {\r\n        const latentPowerMultiplier = this.latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale)\r\n            .plus(1);\r\n        powerGained = powerGained.times(latentPowerMultiplier).floor();\r\n        this.absorbedPower = this.absorbedPower.plus(powerGained);\r\n        return powerGained;\r\n    }\r\n\r\n    get healing() {\r\n        const baseHealing = Decimal(this.powerLevel.times(config.mechanics.combat.hp.healingPerLevel));\r\n        const tacticsMultiplier = Decimal(1).plus(Tactics[this.tactics].modifiers.healing_modifier || 0);\r\n        return baseHealing.times(tacticsMultiplier);\r\n    }\r\n\r\n    get absorbedPower() {\r\n        return this._absorbedPower;\r\n    }\r\n\r\n    set absorbedPower(value) {\r\n        this._absorbedPower = value;\r\n        if (getLevelForPower(this._absorbedPower).gt(config.mechanics.maxLevel)) {\r\n            this._absorbedPower = getPowerNeededForLevel(config.mechanics.maxLevel);\r\n        }\r\n        if (this.appearance && this._isPc) {\r\n            Creatures[this.appearance].traits.forEach(trait => {\r\n                this._traits[trait] = getLevelForPower(this._absorbedPower).plus(1).div(10).ceil();\r\n                getGlobalState().unlockedTraits[trait] = this._traits[trait];\r\n            });\r\n        }\r\n    }\r\n\r\n    get speed() {\r\n        return Decimal(100);\r\n    }\r\n\r\n    addModifier(modifier) {\r\n        this._modifiers.push(modifier);\r\n    }\r\n\r\n    get modifiers() {\r\n        return this._modifiers;\r\n    }\r\n}\r\n\r\nexport class Attributes {\r\n    constructor(attributes, character) {\r\n        this._brutality = attributes.brutality || attributes._brutality || 0;\r\n        this._cunning = attributes.cunning || attributes._cunning || 0;\r\n        this._deceit = attributes.deceit || attributes._deceit || 0;\r\n        this._madness = attributes.madness || attributes._madness || 0;\r\n        Object.defineProperty(this, \"character\", {\r\n            value: () => character\r\n        })\r\n    }\r\n\r\n    get baseBrutality() {\r\n        return Decimal(this._brutality).floor();\r\n    }\r\n\r\n    get baseCunning() {\r\n        return Decimal(this._cunning).floor();\r\n    }\r\n\r\n    get baseDeceit() {\r\n        return Decimal(this._deceit).floor();\r\n    }\r\n\r\n    get baseMadness() {\r\n        return Decimal(this._madness).floor();\r\n    }\r\n\r\n    get brutality() {\r\n        const latentPowerMultiplier = this.character().latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale)\r\n            .plus(1);\r\n        return Decimal(this._brutality).times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get cunning() {\r\n        const latentPowerMultiplier = this.character().latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale)\r\n            .plus(1);\r\n        return Decimal(this._cunning).times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get deceit() {\r\n        const latentPowerMultiplier = this.character().latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale)\r\n            .plus(1);\r\n        return Decimal(this._deceit).times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get madness() {\r\n        const latentPowerMultiplier = this.character().latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale)\r\n            .plus(1);\r\n        return Decimal(this._madness).times(latentPowerMultiplier).floor();\r\n    }\r\n}\r\n\r\nclass CombatStats {\r\n    constructor(props, character) {\r\n        this.character = function () {\r\n            return character;\r\n        }\r\n    }\r\n\r\n    get minimumDamage() {\r\n        return calculateDamage(\"min\", this.character()).floor();\r\n    }\r\n\r\n    get medianDamage() {\r\n        return calculateDamage(\"med\", this.character()).floor();\r\n    }\r\n\r\n    get maximumDamage() {\r\n        return calculateDamage(\"max\", this.character()).floor();\r\n    }\r\n\r\n    get evasion() {\r\n        return calculateCombatStat(this.character(), \"evasion\");\r\n    }\r\n\r\n    get precision() {\r\n        return calculateCombatStat(this.character(), \"precision\");\r\n    }\r\n\r\n    get resilience() { // TODO: Refactor all these into a shared method.\r\n        return calculateCombatStat(this.character(), \"resilience\");\r\n    }\r\n\r\n    get power() {\r\n        return calculateCombatStat(this.character(), \"power\");\r\n    }\r\n\r\n}\r\n\r\nfunction calculateDamage(hitType, character) {\r\n    const baseDamage = evaluateExpression(config.mechanics.combat.baseDamage, {\r\n        player: character\r\n    });\r\n    const hitTypeDamageMultiplier = config.mechanics.combat[`default${hitType.substring(0, 1).toUpperCase()}${hitType.substring(1)}DamageMultiplier`];\r\n    const tacticsModifier = Tactics[character.tactics].modifiers[`${hitType}_hit_damage_modifier`] || 0;\r\n    const totalDamageMultiplier = Decimal(hitTypeDamageMultiplier).plus(tacticsModifier);\r\n    return baseDamage\r\n        .times(totalDamageMultiplier).ceil();\r\n}\r\n\r\nexport function calculateCombatStat(character, combatAttribute) {\r\n    const attributeBase = character.attributes[config.mechanics.combat[combatAttribute].baseAttribute];\r\n    const tacticsModifier = Decimal(0).plus(Tactics[character.tactics].modifiers[`${combatAttribute}_modifier`] || 0);\r\n    const statusesModifier = Object.keys(character.statuses).reduce((currentValue, nextStatus) => {\r\n        const statusDefinition = Statuses[nextStatus];\r\n        return currentValue.plus(statusDefinition.effects[`${combatAttribute}_modifier`] || 0);\r\n    }, Decimal(0));\r\n    const traitModifier = Object.keys(character.traits).reduce((previousValue, trait) => {\r\n        const traitDefinition = Traits[trait];\r\n        if(_.get(traitDefinition, [\"continuous\", \"effects\", `${combatAttribute}_modifier`, \"target\"]) === \"self\") {\r\n            return previousValue.plus(evaluateExpression(_.get(traitDefinition, [\"continuous\", \"effects\", `${combatAttribute}_modifier`, \"modifier\"]), {\r\n                rank: Decimal(character.traits[trait])\r\n            }));\r\n        }\r\n        return previousValue;\r\n    }, Decimal(0));\r\n    return attributeBase.times(tacticsModifier.plus(statusesModifier).plus(traitModifier).plus(1));\r\n}","import * as _ from \"lodash\";\r\nimport {assertCreatureExists, Creatures} from \"../data/creatures\";\r\nimport {debugMessage} from \"../debugging\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {Character} from \"../character\";\r\nimport {config} from \"../config\";\r\nimport * as Package from \"../../package.json\";\r\nimport {Tactics} from \"../data/Tactics\";\r\nimport changelog from \"../changelog.json\";\r\nimport pkg from \"../../package.json\";\r\n\r\nexport const saveKey = require(\"md5\")(`hell-conquest-${Package.version}`);\r\n\r\nconst expressionCache = {};\r\n\r\nlet globalState = loadGlobalState()\r\n\r\nexport function getGlobalState() {\r\n    return globalState;\r\n}\r\n\r\nexport function saveGlobalState() {\r\n    window.localStorage.setItem(saveKey, JSON.stringify(globalState));\r\n}\r\n\r\nexport function loadGlobalState() {\r\n    let loaded = window.localStorage.getItem(saveKey);\r\n    if (!loaded) {\r\n        // try to load previous versions\r\n        const previousCompatibleVersions = changelog[pkg.version].compatiblePreviousVersions;\r\n        if (previousCompatibleVersions) {\r\n            loaded = previousCompatibleVersions.reduce((latestVersion, version) => {\r\n                const nextKey = require(\"md5\")(`hell-conquest-${version}`);\r\n                return window.localStorage.getItem(nextKey) || latestVersion;\r\n            }, null);\r\n        }\r\n    }\r\n    return loaded ? JSON.parse(loaded, stateReviver) : {\r\n        debug: {\r\n            creatures: {},\r\n            regions: {}\r\n        },\r\n        rival: {},\r\n        reincarnationCount: 0,\r\n        latentPowerCap: 0,\r\n        passivePowerIncome: Decimal(0),\r\n        unlockedMonsters: {},\r\n        unlockedTraits: {},\r\n        paused: true,\r\n        currentAction: null,\r\n        nextAction: null,\r\n        id: 0,\r\n        highestLevelReached: Decimal(1),\r\n        highestLevelEnemyDefeated: 0,\r\n        startingTraits: {},\r\n        currentEncounter: null,\r\n        manualSpeedMultiplier: config.manualSpeedup.enabled ? config.manualSpeedup.multiplier : 1,\r\n        currentRegion: \"forest\",\r\n        actionLog: [],\r\n        exploration: {\r\n            explorationTime: 2.5 * 1000,\r\n            approachTime: 5 * 1000,\r\n            combatTime: 5 * 1000,\r\n            lootingTime: 5 * 1000,\r\n            recoveryTime: 2 * 1000,\r\n            fleeingTime: 5 * 1000,\r\n            intimidateTime: 2.5 * 1000,\r\n            reincarnationTime: 30 * 1000\r\n        },\r\n        characters: {\r\n            0: new Character({\r\n                id: 0,\r\n                isPc: true,\r\n                name: \"You\",\r\n                powerLevel: Decimal(1),\r\n                absorbedPower: Decimal(0),\r\n                appearance: \"\",\r\n                statuses: {},\r\n                traits: {},\r\n                tactics: \"defensive\",\r\n                items: [],\r\n                attributes: {\r\n                    brutality: Decimal(config.mechanics.combat.playerAttributeMinimum),\r\n                    cunning: Decimal(config.mechanics.combat.playerAttributeMinimum),\r\n                    deceit: Decimal(config.mechanics.combat.playerAttributeMinimum),\r\n                    madness: Decimal(config.mechanics.combat.playerAttributeMinimum)\r\n                },\r\n                combat: {\r\n                    fatigue: 0,\r\n                    minimumDamageMultiplier: .5,\r\n                    medianDamageMultiplier: 1,\r\n                    maximumDamageMultiplier: 1.5\r\n                }\r\n            })\r\n        },\r\n        tutorials: {}\r\n    }\r\n}\r\n\r\nexport function getCharacter(id) {\r\n    assertCharacterExists(id);\r\n    return globalState.characters[id];\r\n}\r\n\r\nlet nextMonsterId = 1;\r\n\r\nexport function generateCreature(id, powerLevel, rng) {\r\n    assertCreatureExists(id);\r\n    if (config.debug) {\r\n        debugMessage(`Generating creature with id ${id} and level ${powerLevel}`);\r\n    }\r\n    if (powerLevel === undefined) {\r\n        throw new Error(\"No powerLevel\");\r\n    }\r\n    if (Number.isNaN(powerLevel)) {\r\n        throw new Error(\"Level cannot be NaN\");\r\n    }\r\n    const tactics = Object.keys(Tactics)[Math.floor(rng.double() * 3)];\r\n    const nextId = nextMonsterId++;\r\n    // Bonus traits\r\n    const numberOfBonusTraits = powerLevel.div(20).floor();\r\n    const startingTraits = Creatures[id].traits.reduce((traits, next) => {\r\n        traits[next] = powerLevel.div(10).ceil();\r\n        return traits;\r\n    }, {});\r\n    const alreadySelected = [id];\r\n    for(let i = 0; i < numberOfBonusTraits; i++) {\r\n        const options = Object.keys(Creatures).filter(x => !alreadySelected.includes(x));\r\n        const index = rng.double() * options.length;\r\n        const selectedCreature = Creatures[options[index]];\r\n        selectedCreature.traits.forEach(trait => {\r\n            startingTraits[trait] = powerLevel.div(10).minus(1).ceil();\r\n        })\r\n    }\r\n    globalState.characters[nextId] = new Character({\r\n        id: nextId,\r\n        ...Creatures[id],\r\n        latentPower: Decimal(evaluateExpression(config.encounters.enemyLatentPower,  {\r\n            encounterLevel: powerLevel\r\n        })),\r\n        tactics,\r\n        traits: startingTraits,\r\n        absorbedPower: getPowerNeededForLevel(powerLevel),\r\n        artifacts: [],\r\n        statuses: {},\r\n        attributes: {\r\n            brutality: powerLevel.div(2).floor(),\r\n            cunning: powerLevel.div(2).floor(),\r\n            deceit: powerLevel.div(2).floor(),\r\n            madness: powerLevel.div(2).floor()\r\n        },\r\n        combat: {\r\n            fatigue: 0,\r\n            minimumDamageMultiplier: .5,\r\n            medianDamageMultiplier: 1,\r\n            maximumDamageMultiplier: 1.5\r\n        }\r\n    });\r\n    saveGlobalState();\r\n    return globalState.characters[nextId];\r\n}\r\n\r\n\r\nexport function getSpriteForCreature(name) {\r\n    assertCreatureExists(name);\r\n    return `monsters/${Creatures[name].texture}`;\r\n}\r\n\r\nfunction assertCharacterExists(id) {\r\n    if (!globalState.characters[id]) {\r\n        throw new Error(`No creature exists for '${id}'`);\r\n    }\r\n}\r\n\r\nexport function evaluateExpression(expression, context) {\r\n    if (expression === null || expression === undefined) {\r\n        return expression;\r\n    }\r\n    if (!expressionCache[expression]) {\r\n        expressionCache[expression] = new Function(\"context\", `with(context) {return ${expression}}`);\r\n    }\r\n    context.Decimal = Decimal;\r\n    context.config = config;\r\n    return expressionCache[expression].call(null, context);\r\n}\r\n\r\nexport function getPowerNeededForLevel(level) {\r\n    return evaluateExpression(config.mechanics.levelToPowerEquation, {\r\n        $level: Decimal(level)\r\n    });\r\n}\r\n\r\nexport function getLevelForPower(powerPoints) {\r\n    return evaluateExpression(config.mechanics.powerToLevelEquation, {\r\n        $powerPoints: Decimal(powerPoints)\r\n    });\r\n}\r\n\r\nexport function reincarnateAs(monsterId, newAttributes) {\r\n    const player = getCharacter(0);\r\n    // Improve your starting traits\r\n    const currentDemon = Creatures[player.appearance];\r\n    if (currentDemon) {\r\n        currentDemon.traits.forEach(trait => {\r\n            if (!globalState.unlockedTraits[trait] || player.powerLevel.gt(globalState.unlockedTraits[trait])) {\r\n                globalState.unlockedTraits[trait] = player.powerLevel;\r\n            }\r\n        });\r\n    }\r\n\r\n    if (Decimal(globalState.highestLevelReached).lt(player.powerLevel)) {\r\n        globalState.highestLevelReached = player.powerLevel;\r\n    }\r\n\r\n    if (monsterId === \"random\") {\r\n        const options = _.difference(Object.keys(Creatures).filter(m => {\r\n            return _.get(globalState, [\"debug\", \"creatures\", m, \"enabled\"], true) &&\r\n                Creatures[m].enabled !== false\r\n        }), Object.keys(globalState.unlockedMonsters)\r\n            .filter(m => globalState.unlockedMonsters[m]));\r\n        monsterId = options[Math.floor(Math.random() * options.length)];\r\n    }\r\n\r\n    // Update player attributes\r\n    Object.keys(player.attributes).forEach(attribute => {\r\n        player.attributes[attribute] = Decimal(newAttributes[attribute.substring(1)]);\r\n    })\r\n    if (globalState.reincarnationCount !== 0) {\r\n        // Calculate your new latent power cap\r\n        globalState.latentPowerCap = evaluateExpression(config.mechanics.reincarnation.latentPowerCap, {\r\n            highestLevelEnemyDefeated: Decimal(globalState.highestLevelEnemyDefeated)\r\n        })\r\n        // Add your level to your starting energy.\r\n        const latentPowerGain = evaluateExpression(config.mechanics.reincarnation.latentPowerGainOnReincarnate, {\r\n            player\r\n        });\r\n        globalState.characters[0].latentPower = Decimal.min(\r\n            evaluateExpression(config.mechanics.reincarnation.latentPowerCap, {\r\n                player,\r\n                highestLevelEnemyDefeated: Decimal(globalState.highestLevelEnemyDefeated)\r\n            }),\r\n            globalState.characters[0].latentPower.plus(latentPowerGain));\r\n    }\r\n\r\n\r\n    globalState.characters[0].absorbedPower = Decimal(0);\r\n    globalState.characters[0].reincarnate(monsterId, globalState.startingTraits);\r\n    globalState.unlockedMonsters[monsterId] = true;\r\n\r\n    getCharacter(0).traits = Object.keys(globalState.startingTraits)\r\n        .filter(t => globalState.startingTraits[t])\r\n        .reduce((startingTraits, trait) => {\r\n            startingTraits[trait] = globalState.unlockedTraits[trait];\r\n            return startingTraits;\r\n        }, {});\r\n    Creatures[monsterId].traits.forEach(trait => {\r\n        getCharacter(0).traits[trait] = 1;\r\n    })\r\n\r\n    globalState.currentEncounter = null;\r\n    getCharacter(0).currentHp = getCharacter(0).maximumHp;\r\n    getGlobalState().actionLog = [];\r\n    getGlobalState().passivePowerIncome = Decimal(0);\r\n    globalState.reincarnationCount++;\r\n    getGlobalState().currentAction = \"exploring\";\r\n\r\n    saveGlobalState();\r\n}\r\n\r\nexport function unpause() {\r\n    globalState.paused = false;\r\n}\r\n\r\nfunction stateReviver(key, value) {\r\n    switch (key) {\r\n        case \"characters\":\r\n            return Object.keys(value).reduce((characters, id) => {\r\n                characters[id] = new Character(value[id]);\r\n                return characters;\r\n            }, {});\r\n        case \"enemies\":\r\n            return Object.keys(value).map(character => {\r\n                return new Character(value[character]);\r\n            });\r\n        case \"paused\":\r\n        case \"automaticReincarnate\":\r\n            return false;\r\n        case \"passivePowerIncome\":\r\n            return Decimal(value);\r\n        case \"value\":\r\n            const parsed = Number.parseFloat(value);\r\n            if (Number.isNaN(parsed)) {\r\n                return value;\r\n            }\r\n            return Decimal(value);\r\n        default:\r\n            return value;\r\n    }\r\n}\r\n\r\nexport function resetDebug() {\r\n    globalState.debug.creatures = {};\r\n    globalState.debug.regions = {};\r\n}\r\n\r\nexport function getManualSpeedMultiplier() {\r\n    const debugMultiplier = _.get(globalState, [\"debug\", \"manualSpeedMultiplier\"]);\r\n    const baseMultiplier = globalState.manualSpeedMultiplier;\r\n    return debugMultiplier || baseMultiplier;\r\n}\r\n\r\nexport function clearGlobalState() {\r\n    const previousCompatibleVersions = changelog[pkg.version].compatiblePreviousVersions || [];\r\n    previousCompatibleVersions.forEach(version => window.localStorage.removeItem(require(\"md5\")(`hell-conquest-${version}`)));\r\n    window.localStorage.removeItem(require(\"md5\")(`hell-conquest-${pkg.version}`));\r\n    globalState = loadGlobalState()\r\n}","import * as _ from \"lodash\";\r\nimport {evaluateExpression, generateCreature, getGlobalState} from \"../engine\";\r\nimport {config} from \"../config\";\r\nimport {debugMessage} from \"../debugging\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nclass Region {\r\n    constructor(name, available, encounters, background) {\r\n        this.name = name;\r\n        this.encounters = encounters;\r\n        this.background = background;\r\n    }\r\n\r\n    startEncounter(player, rng) {\r\n        let encounterType;\r\n        const combinedEncounterChances = config.encounters.lesserEncounterChanceWeight +\r\n            config.encounters.greaterEncounterChanceWeight +\r\n            config.encounters.evenEncounterChanceWeight;\r\n        const encounterTypeRoll = Math.floor(rng.double() * combinedEncounterChances) + 1;\r\n        const lesserChance = config.encounters.lesserEncounterChanceWeight;\r\n        const evenChance = config.encounters.lesserEncounterChanceWeight + config.encounters.evenEncounterChanceWeight;\r\n        let encounterLevel = player.powerLevel;\r\n        debugMessage(`Determine encounter. Roll ${encounterTypeRoll} vs lesser (<=${lesserChance}), even (<=${evenChance})`);\r\n        if (encounterTypeRoll <= lesserChance) {\r\n            encounterType = \"lesser\";\r\n            debugMessage(`Lesser triggered`)\r\n        } else if (encounterTypeRoll > evenChance && player.powerLevel.gte(config.encounters.minimumLevelForGreaterEncounters)) {\r\n            encounterType = \"greater\";\r\n            debugMessage(`Greater encounter triggered`);\r\n        } else {\r\n            encounterType = \"even\";\r\n            debugMessage(`Even level encounter triggered`);\r\n        }\r\n\r\n        switch (encounterType) {\r\n            case \"greater\": {\r\n                const encounterOffset = Math.floor(rng.double() * config.encounters.greaterLevelCap) + config.encounters.greaterLevelScale;\r\n                encounterLevel = getGlobalState().rival.level ? Decimal.min(encounterLevel.plus(encounterOffset), Decimal(getGlobalState().rival.level).minus(1) ) : encounterLevel.plus(encounterOffset);\r\n                break;\r\n            }\r\n            case \"lesser\": {\r\n                const encounterOffset = Math.floor(rng.double() * config.encounters.lesserLevelFloor) + config.encounters.lesserLevelScale;\r\n                encounterLevel = Decimal.max(1, encounterLevel.minus(encounterOffset));\r\n                break;\r\n            }\r\n            default: {\r\n                const difference = Math.max(config.encounters.greaterLevelScale, config.encounters.lesserLevelScale) - Math.min(config.encounters.greaterLevelScale, config.encounters.lesserLevelScale);\r\n                const encounterOffset = Math.floor(rng.double() * difference) - difference;\r\n                encounterLevel = Decimal.max(1, encounterLevel.plus(encounterOffset));\r\n            }\r\n        }\r\n        const encounterWithRival = Decimal(getGlobalState().rival.level || 0).lte(encounterLevel);\r\n        if(encounterWithRival) {\r\n            encounterLevel = Decimal(getGlobalState().rival.level || 0);\r\n        }\r\n        if (config.debug) {\r\n            debugMessage(`Generated encounter level is ${encounterLevel}`);\r\n        }\r\n        const encounterDef = encounterWithRival ? this.encounters[getGlobalState().rival.type] : chooseRandomEncounter(this);\r\n        if (encounterDef === undefined) {\r\n            throw new Error(\"No encounter selected\");\r\n        }\r\n        const encounter = {\r\n            encounterLevel,\r\n            ...encounterDef,\r\n            pendingActions: [],\r\n            enemies: encounterDef.enemies.flatMap(enemyDef => _.range(0, enemyDef.count).map(i => {\r\n                const generatedCreature = generateCreature(enemyDef.name, encounterLevel, rng);\r\n                generatedCreature.isRival = encounterWithRival;\r\n                if(generatedCreature.isRival) {\r\n                    generatedCreature.traits = getGlobalState().rival.traits;\r\n                    generatedCreature.tactics = getGlobalState().rival.tactics;\r\n                }\r\n                return generatedCreature;\r\n            }))\r\n        };\r\n        return encounter;\r\n    }\r\n}\r\n\r\nexport const Regions = {\r\n    forest: new Region(\"The Prey's Lament\", true, {\r\n            bloodthirstyKnight: {\r\n                description: \"1 Bloodthirsty Knight\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"bloodthirstyKnight\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            rapaciousHighwayman: {\r\n                description: \"1 Rapacious Highwayman\",\r\n                type: \"combat\",\r\n                enabled: false,\r\n                enemies: [\r\n                    {\r\n                        name: \"rapaciousHighwayman\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            condemnedSlasher: {\r\n                description: \"1 Condemned Slasher\",\r\n                type: \"combat\",\r\n                enabled: true,\r\n                enemies: [\r\n                    {\r\n                        name: \"condemnedSlasher\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            crushingSnake: {\r\n                description: \"1 Crushing Snake\",\r\n                type: \"combat\",\r\n                enabled: true,\r\n                enemies: [\r\n                    {\r\n                        name: \"crushingSnake\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            skitteringHorror: {\r\n                description: \"1 Skittering Horror\",\r\n                type: \"combat\",\r\n                enabled: true,\r\n                enemies: [\r\n                    {\r\n                        name: \"skitteringHorror\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            deadlyHornet: {\r\n                description: \"1 Deadly Hornet\",\r\n                type: \"combat\",\r\n                enabled: true,\r\n                enemies: [\r\n                    {\r\n                        name: \"deadlyHornet\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            tormentedDead: {\r\n                description: \"1 Tormented Dead\",\r\n                type: \"combat\",\r\n                enabled: true,\r\n                enemies: [\r\n                    {\r\n                        name: \"tormentedDead\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            background: \"backgrounds/parallax-demon-woods-bg.png\",\r\n            far: \"backgrounds/parallax-demon-woods-far-trees.png\",\r\n            mid: \"backgrounds/parallax-demon-woods-mid-trees.png\",\r\n            close: \"backgrounds/parallax-demon-woods-close-trees.png\"\r\n        }\r\n    ),\r\n    caves: new Region(\"The Bottomless Caverns\", false, {}, {}),\r\n    mountains: new Region(\"The Crags of Futility\", false, {}, {}),\r\n    desert: new Region(\"The Desert of Isolation\", false, {}, {})\r\n}\r\n\r\nfunction chooseRandomEncounter(region) {\r\n    const possibleEncounters = Object.keys(region.encounters).filter(encounterId => {\r\n        debugMessage(`Determining if '${encounterId}' is enabled.`);\r\n        const encounterEnabled = region.encounters[encounterId].enabled !== false;\r\n        if (!encounterEnabled) {\r\n            debugMessage(`Encounter '${encounterId}' disabled`);\r\n        }\r\n        const debugNotDisabled = _.get(getGlobalState(), [\"debug\", \"regions\", region.id, \"encounters\", encounterId]) !== false;\r\n        if (!debugNotDisabled) {\r\n            debugMessage(`Encounter '${encounterId}' disabled by debug.`);\r\n        }\r\n        return encounterEnabled && debugNotDisabled;\r\n    });\r\n    const randomKey = possibleEncounters[Math.floor(Math.random() * Object.keys(possibleEncounters).length)];\r\n    debugMessage(`Selected encounter '${randomKey}'`);\r\n    return region.encounters[randomKey];\r\n}","import React from \"react\";\r\n\r\nexport const Actions = {\r\n    exploring: {\r\n        id: \"exploring\",\r\n        duration: \"exploration.explorationTime\",\r\n        description: \"Exploring...\"\r\n    },\r\n    approaching: {\r\n        id: \"approaching\",\r\n        duration: \"exploration.approachTime\",\r\n        description: \"Approaching Enemy...\"\r\n    },\r\n    dead: {\r\n        id: \"dead\",\r\n        duration: 100000000,\r\n        description: \"Rotting, time to reincarnate...\"\r\n    },\r\n    looting: {\r\n        id: \"looting\",\r\n        duration: \"exploration.lootingTime\",\r\n        description: \"Looting the body...\"\r\n    },\r\n    fleeing: {\r\n        id: \"fleeing\",\r\n        duration: \"exploration.fleeingTime\",\r\n        description: \"Fleeing in terror!\"\r\n    },\r\n    fighting: {\r\n        id: \"fighting\",\r\n        duration: \"exploration.combatTime\",\r\n        description: \"In Combat!\",\r\n    },\r\n    reincarnating: {\r\n        id: \"resurrecting\",\r\n        duration: \"exploration.reincarnationTime\",\r\n        description: \"Reincarnating...\"\r\n    },\r\n    recovering: {\r\n        id:\"recovering\",\r\n        duration: \"exploration.recoveryTime\",\r\n        description: \"Healing...\"\r\n    },\r\n    intimidating: {\r\n        id:\"intimidating\",\r\n        duration: \"exploration.intimidateTime\",\r\n        description: \"Intimidating...\"\r\n    }\r\n}","import { config } from \"../config\";\r\nimport * as _ from \"lodash\";\r\n\r\nexport const Attributes = {\r\n    brutality: {\r\n        label: \"Brutality\",\r\n            description: _.template(`Brutality is how savage and ruthless a Demon is. It adds to Power and Resilience.`),\r\n            icon: \"icons/icons-92.png\"\r\n    },\r\n    cunning: {\r\n        label: \"Cunning\",\r\n            description: _.template(\"Cunning is how quick thinking a Demon is. It adds to Evasion.\"),\r\n            icon: \"icons/icons-24.png\"\r\n    },\r\n    deceit: {\r\n        label: \"Deceit\",\r\n            description: _.template(\"Deceit is how underhanded and manipulative a Demon is. It adds to Precision.\"),\r\n            icon: \"icons/icons-17.png\"\r\n    },\r\n    madness: {\r\n        label: \"Madness\",\r\n            description: _.template(`Madness is how disconnected from the limits of reality the Demon is. It gives a \\${rank * ${ config.mechanics.combat.traitRank.effectPerPoint * 100}}% bonus to the effects of Traits and health.`),\r\n            icon: \"icons/icons-124.png\"\r\n    }\r\n}","import {Tactics} from \"../../data/Tactics\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport React from \"react\";\r\n\r\nexport default function (props) {\r\n    return <Grid container>\r\n        <ul>\r\n            {Tactics[props.tactic].modifiers.power_modifier &&\r\n            <Tooltip title=\"Power makes your hits deal additional damage.\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    +{Tactics[props.tactic].modifiers.power_modifier * 100}% to Power\r\n                </li>\r\n            </Tooltip>}\r\n            {Tactics[props.tactic].modifiers.precision_modifier &&\r\n            <Tooltip title=\"Precision makes your hits more severe.\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    +{Tactics[props.tactic].modifiers.precision_modifier * 100}% to Precision\r\n                </li>\r\n            </Tooltip>}\r\n            {Tactics[props.tactic].modifiers.resilience_modifier &&\r\n            <Tooltip title=\"Resilience makes you more resistant to damage.\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    +{Tactics[props.tactic].modifiers.resilience_modifier * 100}% to Resilience\r\n                </li>\r\n            </Tooltip>}\r\n            {Tactics[props.tactic].modifiers.fatigue_multiplier &&\r\n            <Tooltip title=\"Fatigue causes damage when combats last too long.\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    -{(1 - Tactics[props.tactic].modifiers.fatigue_multiplier) * 100}% to Fatigue Damage\r\n                </li>\r\n            </Tooltip>}\r\n            {Tactics[props.tactic].modifiers.evasion_modifier &&\r\n            <Tooltip title=\"Evasion makes incoming attacks less severe.\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    +{Tactics[props.tactic].modifiers.evasion_modifier * 100}% to Evasion\r\n                </li>\r\n            </Tooltip>}\r\n            {Tactics[props.tactic].modifiers.max_hit_damage_modifier &&\r\n            <Tooltip title=\"Critical hits deal extra damage\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    +{Tactics[props.tactic].modifiers.max_hit_damage_modifier * 100}% to Critical hit\r\n                    damage\r\n                </li>\r\n            </Tooltip>}\r\n        </ul>\r\n    </Grid>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {Creatures} from \"../../data/creatures\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport {evaluateExpression, getCharacter, getGlobalState, getLevelForPower, getSpriteForCreature} from \"../../engine\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport * as _ from \"lodash\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {config} from \"../../config\";\r\nimport \"../../App.css\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {Tactics} from \"../../data/Tactics\";\r\nimport { Attributes } from \"../../data/Attributes\";\r\nimport TacticsDescription from \"../charactersheet/TacticsDescription\";\r\n\r\nexport default function ReincarnationSelectionPage(props) {\r\n    const history = useHistory();\r\n    const player = getCharacter(0);\r\n    const [attributes, setAttributes] = useState(Object.keys(player.attributes)\r\n        .reduce((attributes, next) => {\r\n            const baseAttributeProperty = `base${next.substring(1, 2).toUpperCase()}${next.substring(2)}`;\r\n            attributes[next.substring(1)] = player.attributes[baseAttributeProperty];\r\n            return attributes;\r\n        }, {}));\r\n    const [playerTactics, setPlayerTactics] = useState(getCharacter(0).tactics);\r\n    const [startingTraits, setStartingTraits] = useState(getGlobalState().startingTraits);\r\n    const newLatentPower = getCharacter(0).latentPower.plus(\r\n        evaluateExpression(config.mechanics.reincarnation.latentPowerGainOnReincarnate, {\r\n            player\r\n        }));\r\n    const spendableBonusPoints = Decimal(getGlobalState().highestLevelReached).times(config.mechanics.reincarnation.bonusPointsForHighestLevel);\r\n    const latentPowerCap = evaluateExpression(config.mechanics.reincarnation.latentPowerCap, {\r\n        highestLevelEnemyDefeated: Decimal(getGlobalState().highestLevelEnemyDefeated || 0)\r\n    });\r\n    const availableBonusPoints = spendableBonusPoints\r\n        .minus(Object.values(attributes).reduce((sum, next) => {\r\n            next = Decimal(next).minus(config.mechanics.combat.playerAttributeMinimum);\r\n            const totalAttributeCost = Decimal(next).times(Decimal(next).plus(1)).div(2);\r\n            return Decimal(sum).plus(totalAttributeCost);\r\n        }, 0))\r\n        .minus(\r\n            Object.values(startingTraits).filter(x => x).reduce((previousValue, x, i) => {\r\n                return previousValue.plus(evaluateExpression(config.mechanics.reincarnation.traitPointCost, {\r\n                    traitsOwned: Decimal(i)\r\n                }))\r\n            }, Decimal(0))\r\n        );\r\n    const nextBonusTraitCost = evaluateExpression(config.mechanics.reincarnation.traitPointCost, {\r\n        traitsOwned: Decimal(Object.values(startingTraits).filter(x => x).length)\r\n    });\r\n    const nextAttributeCosts = {\r\n        brutality: evaluateExpression(config.mechanics.reincarnation.attributePointCost, {\r\n            attributeScore: attributes.brutality\r\n        }),\r\n        cunning:  evaluateExpression(config.mechanics.reincarnation.attributePointCost, {\r\n            attributeScore: attributes.cunning\r\n        }),\r\n        deceit:  evaluateExpression(config.mechanics.reincarnation.attributePointCost, {\r\n            attributeScore: attributes.deceit\r\n        }),\r\n        madness:  evaluateExpression(config.mechanics.reincarnation.attributePointCost, {\r\n            attributeScore: attributes.madness\r\n        }),\r\n    }\r\n\r\n    useEffect(() => {\r\n        getGlobalState().paused = true;\r\n    }, []);\r\n\r\n    return <Grid container>\r\n        <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n            <strong>Reincarnate</strong>\r\n        </Grid>\r\n        {getGlobalState().reincarnationCount !== 0 && <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n            Select a soul to reincarnate as.\r\n            <br/>\r\n            You will reincarnate with a <strong>{Decimal.min(newLatentPower, latentPowerCap).toFixed()}%</strong> bonus to Attributes and absorbed power due to your Latent Power acquired from previous reincarnations.\r\n            <br/>\r\n        </Grid>}\r\n\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>You have {availableBonusPoints.toFixed()} {player.powerLevel.gt(1) ? \"points\" : \"point\"} to spend out of a max of {spendableBonusPoints.toFixed()} from reaching level {Decimal(getGlobalState().highestLevelReached).toFixed()} on\r\n                    bonuses </strong>\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Attributes</strong>\r\n            </Grid>\r\n            {Object.keys(Attributes).map(attribute => {\r\n                return <Grid item xs={3}>\r\n                    <Tooltip title={Attributes[attribute].description({\r\n                        rank: Decimal(attributes[attribute]).toFixed()\r\n                    })}>\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <img src={Attributes[attribute].icon}/>\r\n                            <div>\r\n                                <Button disabled={availableBonusPoints.lt(nextAttributeCosts[attribute])}\r\n                                        onClick={() => {\r\n                                            setAttributes({\r\n                                                ...attributes,\r\n                                                [attribute]: Decimal(attributes[attribute]).plus(1)\r\n                                            })\r\n                                        }}>\r\n                                    <AddIcon/>\r\n                                </Button>\r\n                                {Decimal(attributes[attribute]).toFixed()}\r\n                                <Button disabled={Decimal(attributes[attribute]).lte(config.mechanics.combat.playerAttributeMinimum)} onClick={() => {\r\n                                    setAttributes({...attributes, [attribute]: Decimal(attributes[attribute]).minus(1)})\r\n                                }}>\r\n                                    <RemoveIcon/>\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </Tooltip>\r\n                </Grid>\r\n            })}\r\n            {Object.keys(getGlobalState().unlockedTraits).length > 0 &&\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Bonus Starting Traits</strong> (Start with traits in addition to that innate to your new demon form. Increase the Tier of your traits by reaching highest levels with the demons that possess them.)\r\n            </Grid>}\r\n            {Object.keys(getGlobalState().unlockedTraits).map(traitId => {\r\n                return <Grid item container xs={3} justify=\"space-around\" style={{height: \"138px\"}}>\r\n                    <Grid item xs={12} style={{textAlign: \"center\", height: \"64%\"}}>\r\n                        <Button variant=\"contained\"\r\n                                color={getGlobalState().startingTraits[traitId] ? \"secondary\" : \"default\"}\r\n                                disabled={availableBonusPoints.lt(nextBonusTraitCost) && !startingTraits[traitId]}\r\n                                onClick={() => {\r\n                                    getGlobalState().startingTraits[traitId] = !getGlobalState().startingTraits[traitId];\r\n                                    setStartingTraits({...getGlobalState().startingTraits});\r\n                                }}\r\n                        >\r\n                            <Tooltip title={<div dangerouslySetInnerHTML={{\r\n                                __html: `Rank ${Decimal(getGlobalState().unlockedTraits[traitId]).toFixed()}: ${Traits[traitId].description({\r\n                                    rank: Decimal(getGlobalState().unlockedTraits[traitId])\r\n                                })}`\r\n                            }}>\r\n                            </div>}>\r\n                                <Grid container>\r\n                                    <Grid item xs={12}>\r\n                                        <img src={Traits[traitId].icon}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        {Traits[traitId].name} {Decimal(getGlobalState().unlockedTraits[traitId]).toFixed()}\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <em style={{visibility: startingTraits[traitId] ? \"hidden\" : \"visible\" }}>{nextBonusTraitCost.toFixed()} pts</em>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Tooltip>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n        <Grid container item>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <Tooltip title=\"Tactics provide modifiers based on your fighting style\">\r\n                    <strong>Choose Tactics</strong>\r\n                </Tooltip>\r\n            </Grid>\r\n            <Grid container item xs={12} justify=\"space-around\" direction=\"row\">\r\n                {Object.keys(Tactics).map(tactic =>\r\n                    <Grid item>\r\n                        <Button variant=\"contained\" onClick={() => {\r\n                            setPlayerTactics(getCharacter(0).tactics = tactic)\r\n                        }}\r\n                                color={player.tactics === tactic ? \"primary\" : \"default\"}\r\n                        >{Tactics[tactic].title}</Button>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n            <Grid item style={{textAlign: \"center\"}}>\r\n                <em>{Tactics[player.tactics].description}</em>\r\n            </Grid>\r\n\r\n            <TacticsDescription tactic={player.tactics}/>\r\n\r\n        </Grid>\r\n\r\n        <Grid container item xs={12} alignItems=\"stretch\" justify=\"flex-start\">\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Choose a demon to reincarnate as.</strong>\r\n            </Grid>\r\n            {\r\n                Object.keys(Creatures)\r\n                    .filter(id => {\r\n                            const creatureEnabled = Creatures[id].enabled !== false;\r\n                            const debugEnabled = _.get(getGlobalState(), [\"debug\", \"creatures\", id, \"enabled\"], true);\r\n                            return creatureEnabled && debugEnabled;\r\n                        }\r\n                    )\r\n                    .map(name => {\r\n                        if (!getGlobalState().unlockedMonsters[name]) {\r\n                            return <Grid container xs={3} justify=\"space-around\" style={{height: \"150px\"}}>\r\n                                <Grid item xs={12} style={{textAlign: \"center\", height: \"64%\"}}>\r\n                                    <Tooltip\r\n                                        title={<div>An unknown type of Demon. Selects a random Demon you have not\r\n                                            already\r\n                                            played as.</div>}>\r\n                                        <Button variant=\"contained\" style={{height: \"100%\", width: \"50%\"}}\r\n                                                onClick={() => {\r\n                                                    props.reincarnate(\"random\", attributes);\r\n                                                    history.push(\"/adventuring\");\r\n                                                }}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={12}>\r\n                                                    ???\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                            </Grid>\r\n                        } else {\r\n                            return <Grid container xs={3} justify=\"space-around\">\r\n                                <Grid item xs={12} style={{textAlign: \"center\", height: \"150px\"}}>\r\n                                    <Tooltip title={<div>{Creatures[name].description}</div>}>\r\n                                        <Button variant=\"contained\" style={{height: \"75%\", width: \"50%\"}}\r\n                                                onClick={() => {\r\n                                                    props.reincarnate(name, attributes);\r\n                                                    history.push(\"/adventuring\");\r\n                                                }}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={12}>\r\n                                                    <img src={getSpriteForCreature(name)}/>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    {Creatures[name].name}\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    })\r\n            }\r\n        </Grid>\r\n    </Grid>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Help} from \"@material-ui/icons\";\r\nimport {config} from \"../../config\";\r\nimport React, {useMemo} from \"react\";\r\nimport { Attributes } from \"../../data/Attributes\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nexport default function CharacterAttributes(props) {\r\n    const currentHp = useMemo(() => props.character.currentHp, [\r\n        props.character.currentHp.toFixed()\r\n    ]);\r\n    const maximumHp = useMemo(() => props.character.maximumHp, [\r\n        props.character.maximumHp.toFixed()\r\n    ]);\r\n    const characterAttributes = useMemo(() => props.character.attributes, [\r\n        props.character.attributes\r\n    ]);\r\n    return <React.Fragment>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                Health\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {currentHp.toFixed()} / {maximumHp.toFixed()}\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container direction=\"row\">\r\n            {Object.keys(Attributes).map(attribute => {\r\n                return <Grid item xs>\r\n                    <Tooltip title={Attributes[attribute].description({\r\n                        rank: Decimal(characterAttributes[attribute]).toFixed()\r\n                    })}>\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <img src={Attributes[attribute].icon}/>\r\n                            <div>\r\n                                <span style={{fontSize: \"12\"}}>{Attributes[attribute].label}</span>\r\n                            </div>\r\n                            <div>\r\n                                {Decimal(characterAttributes[attribute]).toFixed()}\r\n                            </div>\r\n                        </div>\r\n                    </Tooltip>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n\r\n    </React.Fragment>\r\n}","import Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport React from \"react\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nexport default function CharacterTraits(props) {\r\n    return <React.Fragment>\r\n        {Object.keys(props.character.traits).map(trait => <Tooltip key={trait} title={\r\n            <React.Fragment>\r\n                <span>Tier {Decimal(props.character.traits[trait]).toFixed()}: </span>\r\n            <span dangerouslySetInnerHTML={{\r\n                __html: Traits[trait].description({\r\n                    rank: Decimal(props.character.traits[trait])\r\n                })\r\n            }}></span>\r\n            </React.Fragment>}>\r\n            <img src={Traits[trait].icon}></img>\r\n        </Tooltip>)\r\n        }\r\n    </React.Fragment>\r\n\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport React from \"react\";\r\nimport TacticsDescription from \"./TacticsDescription\";\r\nimport {Tactics} from \"../../data/Tactics\";\r\n\r\nexport default function TacticsSection(props) {\r\n    return <Grid container>\r\n        <Grid item xs={12}>\r\n            <Tooltip title=\"Your approach to combat\">\r\n                <span>Utilizing {Tactics[props.characterTactics].title} Tactics</span>\r\n            </Tooltip>\r\n        </Grid>\r\n        <Grid container direction=\"row\">\r\n            <TacticsDescription tactic={props.characterTactics}/>\r\n        </Grid>\r\n\r\n    </Grid>\r\n}","import {config} from \"../../config\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport * as _ from \"lodash\";\r\n\r\nexport default function getHitChanceBy(attackingCharacter) {\r\n    return {\r\n        against: function(targetCharacter) {\r\n            const attackerPrecision = attackingCharacter.combat.precision;\r\n            const targetEvasion = Decimal(_.get(targetCharacter, [\"combat\", \"evasion\"], 0));\r\n            return {\r\n                min: Decimal(config.mechanics.combat.baseMinimumDamageWeight)\r\n                    .plus(targetEvasion.times(3)),\r\n                med: Decimal(config.mechanics.combat.baseMedianDamageWeight)\r\n                    .plus(targetEvasion).plus(attackerPrecision),\r\n                max: Decimal(config.mechanics.combat.baseMaximumDamageWeight)\r\n                    .plus(attackerPrecision.times(2)),\r\n            }\r\n        }\r\n    }\r\n}","import {Decimal} from \"decimal.js\";\r\nimport * as _ from \"lodash\";\r\nimport { config } from \"../../config\";\r\nimport {debugMessage} from \"../../debugging\";\r\nimport {defaultMergeProps} from \"react-redux/lib/connect/mergeProps\";\r\nimport {DeckOutlined} from \"@material-ui/icons\";\r\n\r\nexport default function calculateDamageBy(attacker) {\r\n    return {\r\n        against: function (target, debugOutput) {\r\n            const attackerPower = attacker.combat.power;\r\n            const powerMultiplier = Decimal.min(Decimal(config.mechanics.combat.power.effectPerPoint).plus(1)\r\n                .pow(attackerPower), 100);\r\n            debugMessage(`Attacker ${attacker.id} has power ${attackerPower} for multiplier ${powerMultiplier}.`);\r\n            const defenderResilience = _.get(target, [\"combat\", \"resilience\"], attackerPower);\r\n            const resilienceMultiplier = Decimal.max(Decimal(1).minus(config.mechanics.combat.power.effectPerPoint)\r\n                .pow(defenderResilience), 0.01);\r\n            if(target) {\r\n                debugMessage(`Defender ${target.id} has resilience ${defenderResilience} for multiplier ${resilienceMultiplier}.`);\r\n            } else {\r\n                debugMessage(`No target means an effective resilience of ${defenderResilience} and a multiplier of ${resilienceMultiplier}`)\r\n            }\r\n            const damageModifier = powerMultiplier.times(resilienceMultiplier);\r\n            debugMessage(`Final damage multiplier = ${damageModifier}. Min: ${attacker.combat.minimumDamage.times(damageModifier).ceil()} Med: ${attacker.combat.medianDamage.times(damageModifier).ceil()} Max: ${attacker.combat.maximumDamage.times(damageModifier).ceil()}`);\r\n            return {\r\n                min: attacker.combat.minimumDamage.times(damageModifier).ceil(),\r\n                med: attacker.combat.medianDamage.times(damageModifier).ceil(),\r\n                max: attacker.combat.maximumDamage.times(damageModifier).ceil()\r\n            }\r\n        }\r\n    }\r\n\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Help} from \"@material-ui/icons\";\r\nimport React, {useMemo} from \"react\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {config} from \"../../config\";\r\n\r\nexport default function CharacterCombatStatistics(props) {\r\n    const combinedHitWeights = useMemo(() => Object.values(props.hitChances).reduce((total, next) => total.plus(next)), [\r\n        props.hitChances,\r\n        props.calculatedDamage\r\n    ]);\r\n    const powerTooltip = useMemo(() => `Your Power increases the damage your attacks deal by ${Decimal(config.mechanics.combat.power.effectPerPoint).times(props.characterPower).times(100).toFixed()}%.`, [\r\n        props.characterPower\r\n    ]);\r\n    const resilienceTooltip = useMemo(() => `Your Resilience reduces the damage attacks against you deal by ${Decimal(config.mechanics.combat.resilience.effectPerPoint).times(props.characterResilience).times(100).toFixed()}%.`, [\r\n        props.characterResilience\r\n    ]);\r\n    return <Grid container>\r\n        <Grid item xs={12}>\r\n            <strong>Combat Statistics</strong>\r\n        </Grid>\r\n        <Grid container>\r\n            <Tooltip title={powerTooltip}>\r\n                <Grid item container>\r\n                    <Grid item xs style={{textAlign: \"center\"}}>\r\n                        Power\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {props.characterPower}\r\n                    </Grid>\r\n                </Grid>\r\n            </Tooltip>\r\n            <Tooltip title={resilienceTooltip}>\r\n                <Grid item container>\r\n                    <Grid item xs style={{textAlign: \"center\"}}>\r\n                        Resilience\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {props.characterResilience}\r\n                    </Grid>\r\n                </Grid>\r\n            </Tooltip>\r\n            <Tooltip title={`Your Evasion reduces the severity of hits you take.`}>\r\n                <Grid item container>\r\n                    <Grid item xs style={{textAlign: \"center\"}}>\r\n                        Evasion\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {props.characterEvasion}\r\n                    </Grid>\r\n                </Grid>\r\n            </Tooltip>\r\n            <Tooltip title={`Your Precision increases the severity of hits you score.`}>\r\n                <Grid item container>\r\n                    <Grid item xs style={{textAlign: \"center\"}}>\r\n                        Precision\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {props.characterPrecision}\r\n                    </Grid>\r\n                </Grid>\r\n            </Tooltip>\r\n        </Grid>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Hit Chances</strong>\r\n            </Grid>\r\n            <Grid item container xs={12}>\r\n                <Grid item xs><em>Type</em></Grid>\r\n                <Grid item xs><em>Chance</em></Grid>\r\n                <Grid item xs><em>Damage</em></Grid>\r\n                <Grid item xs={1}></Grid>\r\n            </Grid>\r\n            <Grid item container xs={12}>\r\n                <Grid item xs>\r\n                    Glancing Hit\r\n                </Grid>\r\n                <Grid item xs>\r\n                    {props.hitChances.min.div(combinedHitWeights).times(100).toFixed(2)}%\r\n                </Grid>\r\n                <Grid item xs>\r\n                    {props.calculatedDamage.min.toFixed()}\r\n                </Grid>\r\n                <Grid item xs={1}>\r\n                    <Tooltip title=\"Glancing hits deal 50% less  damage\">\r\n                        <Help/>\r\n                    </Tooltip>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid item container xs={12}>\r\n                <Grid item xs>\r\n                    Solid Hit\r\n                </Grid>\r\n                <Grid item xs>\r\n                    {props.hitChances.med.div(combinedHitWeights).times(100).toFixed(2)}%\r\n                </Grid>\r\n                <Grid item xs>\r\n                    {props.calculatedDamage.med.toFixed()}\r\n                </Grid>\r\n                <Grid item xs={1}>\r\n                    <Tooltip title=\"Solid hits deal normal damage\">\r\n                        <Help/>\r\n                    </Tooltip>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item container xs={12}>\r\n                <Grid item xs>\r\n                    Critical Hit\r\n                </Grid>\r\n                <Grid item xs>\r\n                    {props.hitChances.max.div(combinedHitWeights).times(100).toFixed(2)}%\r\n                </Grid>\r\n                <Grid item xs>\r\n                    {props.calculatedDamage.max.toFixed()}\r\n                </Grid>\r\n                <Grid item xs={1}>\r\n                    <Tooltip title=\"Critical hits deal 50% more damage.\">\r\n                        <Help/>\r\n                    </Tooltip>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    </Grid>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useMemo} from \"react\";\r\nimport {\r\n    evaluateExpression,\r\n    getCharacter,\r\n    getGlobalState,\r\n    getPowerNeededForLevel,\r\n    getSpriteForCreature\r\n} from \"../engine\";\r\nimport {config} from \"../config\";\r\nimport PowerLevelDisplay from \"./charactersheet/PowerLevelDisplay\";\r\nimport CharacterAttributes from \"./charactersheet/CharacterAttributes\";\r\nimport CharacterTraits from \"./charactersheet/CharacterTraits\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport TacticsSection from \"./charactersheet/TacticsSection\";\r\nimport getHitChanceBy from \"../engine/combat/getHitChanceBy\";\r\nimport calculateDamageBy from \"../engine/combat/calculateDamageBy\";\r\nimport * as _ from \"lodash\";\r\nimport {Help} from \"@material-ui/icons\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport CharacterCombatStatistics from \"./charactersheet/CharacterCombatStatistics\";\r\n\r\nconst styles = {\r\n    tooltip: {\r\n        fontSize: \"12pt\"\r\n    }\r\n}\r\n\r\nexport default function CharacterSheet(props) {\r\n    const spriteSrc = useMemo(() => getSpriteForCreature(props.character.appearance), [props.character.appearance]);\r\n\r\n    const powerRequiredForCurrentLevel = getPowerNeededForLevel(props.character.powerLevel);\r\n    const powerNeededForNextLevel = getPowerNeededForLevel(props.character.powerLevel.plus(1));\r\n    const progressToNextLevel = props.character.absorbedPower.minus(powerRequiredForCurrentLevel);\r\n    const latentPowerModifier = useMemo(() => Decimal(props.character.latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale).times(100)), [\r\n        props.character.latentPower\r\n    ]);\r\n\r\n    const hitChances = useMemo(() => getHitChanceBy(props.character).against(props.enemy), [\r\n        props.character,\r\n        props.enemy\r\n    ]);\r\n    const calculatedDamage = useMemo(() => calculateDamageBy(props.character).against(props.enemy), [\r\n        props.character,\r\n        props.enemy\r\n    ]);\r\n\r\n    return <Grid container>\r\n        <Grid item xs={12}>\r\n            <img src={spriteSrc} style={{height: \"75px\"}}/>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs>\r\n                Level\r\n            </Grid>\r\n            <Grid item xs>\r\n                {props.character.powerLevel.toFixed()}\r\n            </Grid>\r\n            <Grid item xs>\r\n                Latent Power Bonus\r\n            </Grid>\r\n            <Grid item xs style={{color: props.character.latentPower.gte(getGlobalState().latentPowerCap) && props.character.isPc ? \"red\" : \"inherit\"}}>\r\n                <Tooltip\r\n                    title=\"Latent power multiplies power gain and attributes. Latent power is capped based on the strongest enemy defeated.\">\r\n                    <div>\r\n                        {latentPowerModifier.toFixed()}%\r\n                    </div>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        {props.character.absorbedPower !== undefined && <Grid item xs={12}>\r\n            <progress\r\n                value={progressToNextLevel.div(powerNeededForNextLevel).times(100).toNumber()}\r\n                max={100}\r\n                title={`${progressToNextLevel.toFixed()}/${powerNeededForNextLevel.toFixed()}`}\r\n            ></progress>\r\n        </Grid>}\r\n        <Grid container>\r\n            <Grid item container>\r\n                <Grid item xs>\r\n                    <strong>Attributes</strong>\r\n                </Grid>\r\n            </Grid>\r\n            <CharacterAttributes character={props.character}/>\r\n        </Grid>\r\n        <CharacterCombatStatistics\r\n            hitChances={hitChances}\r\n            calculatedDamage={calculatedDamage}\r\n            characterPower={props.character.combat.power.toFixed()}\r\n            characterResilience={props.character.combat.resilience.toFixed()}\r\n            characterEvasion={props.character.combat.evasion.toFixed()}\r\n            characterPrecision={props.character.combat.precision.toFixed()}/>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Traits</strong>\r\n            </Grid>\r\n            <CharacterTraits character={props.character}/>\r\n        </Grid>\r\n        {config.mechanics.artifacts.enabled && <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Artifacts</strong>\r\n            </Grid>\r\n            <Grid>\r\n                {\r\n                    JSON.stringify(props.character.items)\r\n                }\r\n            </Grid>\r\n        </Grid>}\r\n        <TacticsSection characterTactics={props.character.tactics}/>\r\n    </Grid>\r\n\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React from \"react\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nconst styles = {\r\n    root: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#eeeeee\"\r\n    }\r\n}\r\n\r\nexport default function PlayerStats(props) {\r\n    return <Paper style={styles.root} elevation={2}>\r\n        <CharacterSheet character={props.player} enemy={props.enemy}/>\r\n    </Paper>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useMemo} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {getCharacter, getGlobalState, getLevelForPower, getPowerNeededForLevel} from \"../engine\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nconst styles = {\r\n    root: {\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flex: \"0\"\r\n    },\r\n    buttons: {\r\n        width: \"100%\"\r\n    }\r\n}\r\n\r\nexport default function TopSection(props) {\r\n    const history = useHistory();\r\n    const reincarnateEnabled = useMemo(() => getCharacter(0).powerLevel.gt(1) || !getCharacter(0).isAlive, [\r\n        getCharacter(0).powerLevel,\r\n        getCharacter(0).isAlive\r\n    ])\r\n    return <div style={styles.root}>\r\n        <Grid container direction=\"column\">\r\n            <Grid item xs>\r\n                {reincarnateEnabled &&\r\n                <Button onClick={() => history.push(\"/reincarnating\")} style={styles.buttons} variant=\"contained\"\r\n                        color=\"secondary\" disabled={!reincarnateEnabled}>\r\n                    Reincarnate\r\n                </Button>}\r\n            </Grid>\r\n            <Grid item xs>\r\n                {props.automaticReincarnateEnabled &&\r\n                <Paper style={{width: \"100%\", backgroundColor: \"orange\"}}>Automatic Reincarnation Enabled (Strongest enemy defeated: Level {Decimal(getGlobalState().highestLevelEnemyDefeated).toFixed()})</Paper>}\r\n            </Grid>\r\n        </Grid>\r\n    </div>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React from \"react\";\r\nimport {Statuses} from \"../data/Statuses\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nexport default function CharacterCombatSummary(props) {\r\n    return <Grid item container xs>\r\n        <Grid item xs={12} container direction={props.direction}>\r\n            <Grid item xs={6}>\r\n                <div style={{\r\n                    display: \"flex\",\r\n                    alignItems: \"center\"\r\n                }}>\r\n                    {props.isRival && <img src=\"./icons/icons-793.png\"/>}\r\n                    {props.name}\r\n                </div>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <meter style={{width: \"80%\"}} low={33} high={66} optimum={100} min={0} max={100}\r\n                       value={props.currentHp.div(props.maximumHp).times(100).floor().toNumber()}\r\n                       max={100}></meter>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container item xs={12} style={{height: \"40px\"}} direction={props.direction}>\r\n            {props.statuses && Object.keys(props.statuses).map(status => {\r\n                const modifiers = Object.keys(Statuses[status].effects).reduce((combined, next) => {\r\n                    switch (next) {\r\n                        case \"power_modifier\":\r\n                        case \"evasion_modifier\":\r\n                        case \"precision_modifier\":\r\n                        case \"evasion_modifier\":\r\n                        case \"accuracy_modifier\":\r\n                            combined[next] = Decimal.abs(Decimal(1).minus(Decimal(1).plus(Decimal(Statuses[status].effects[next])).pow(props.statuses[status])).times(100));\r\n                            break;\r\n                    }\r\n                    return combined;\r\n                }, {});\r\n                return <Grid item xs={1}>\r\n                    <Tooltip title={Statuses[status].description(modifiers)}>\r\n                        <img src={Statuses[status].icon}/>\r\n                    </Tooltip>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n    </Grid>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst styles = {\r\n    history: {\r\n        height: \"15%\",\r\n        flexDirection: \"column\",\r\n        overflowY: \"scroll\"\r\n    }\r\n}\r\nexport default function (props) {\r\n    return <Paper style={styles.history}>\r\n        {\r\n            props.actionLog.map(item => printActionItem(item))\r\n        }\r\n    </Paper>\r\n}\r\n\r\n\r\nfunction printActionItem(item) {\r\n    return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n        <Grid item xs={11}>\r\n                <span dangerouslySetInnerHTML={{\r\n                    __html: item.message\r\n                }}></span>\r\n        </Grid>\r\n        {item.tick && <Grid item={1}>{item.tick}: </Grid>}\r\n    </Grid>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {evaluateExpression, getCharacter, getGlobalState} from \"../engine\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {config} from \"../config\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport CharacterCombatSummary from \"./CharacterCombatSummary\";\r\nimport ActionLog from \"./ActionLog\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flex: \"1 0 auto\",\r\n        justifyContent: \"flex-end\",\r\n        flexDirection: \"column\"\r\n    },\r\n    actions: {\r\n        container: {\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            flexDirection: \"row\"\r\n        },\r\n        buttons: {\r\n            alignSelf: \"flex-end\",\r\n            flex: \"1\"\r\n        }\r\n    },\r\n    action: {\r\n        maxHeight: \"15%\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    },\r\n    actionProgress: {\r\n        width: \"100%\"\r\n    },\r\n    history: {\r\n        height: \"15%\",\r\n        flexDirection: \"column\",\r\n        overflowY: \"scroll\"\r\n    },\r\n    combat: {}\r\n}\r\nexport default function BottomSection(props) {\r\n    if (!props.currentAction) {\r\n        throw new Error(\"No current action\");\r\n    }\r\n    const escapeChance = props.enemy ? evaluateExpression(config.encounters.chanceToEscapeGreater, {\r\n        player: props.player,\r\n        enemy: props.enemy\r\n    }) : Decimal(100);\r\n    const intimidateChance = props.enemy ? evaluateExpression(config.encounters.chanceToIntimidateLesser, {\r\n        player: props.player,\r\n        enemy: props.enemy\r\n    }) : Decimal(100);\r\n    return <div style={styles.root} onMouseEnter={props.startManualSpeedup} onMouseLeave={props.stopManualSpeedup}>\r\n        <Paper style={styles.actions.container}>\r\n            <Button style={styles.actions.buttons} onClick={() => {\r\n                getGlobalState().paused = !getGlobalState().paused;\r\n                props.togglePause(getGlobalState().paused);\r\n            }}>\r\n                {props.paused ? \"Unpause\" : \"Pause\"}\r\n            </Button>\r\n        </Paper>\r\n        <Paper style={styles.actions.container}>\r\n            {actionButton(\"fighting\", \"Fight\", \"Combat the enemy. On victory, steal some of the power of the vanquished foe.\", props)}\r\n            {actionButton(\"fleeing\", \"Flee\", `Attempt to escape. Your chance is  ${escapeChance}%.`, props)}\r\n            {actionButton(\"intimidating\", \"Intimidate\", `Try to cow the enemy, compelling them to continuously provide you a portion of their life force. Your chance is ${intimidateChance}%`, props)}\r\n            {_.get(config, \"features.negotiating.enabled\") && actionButton(\"negotiating\", \"Negotiate\", \"Combat the enemy. On victory, steal some of the power of the vanquished foe.\", props)}\r\n        </Paper>\r\n        <Paper style={styles.combat.details}>\r\n            <Grid container>\r\n                <CharacterCombatSummary name=\"Player\" currentHp={props.player.currentHp}\r\n                                        maximumHp={props.player.maximumHp}\r\n                                        statuses={_.get(props.player, \"statuses\")}\r\n                                        direction=\"row\"/>\r\n                <CharacterCombatSummary name={_.get(props.enemy, \"name\")} currentHp={_.get(props.enemy, \"currentHp\", Decimal(0))}\r\n                                        maximumHp={_.get(props.enemy, \"maximumHp\", Decimal(100))}\r\n                                        statuses={_.get(props.enemy, \"statuses\")}\r\n                                        direction=\"row-reverse\"\r\n                                        isRival={_.get(props.enemy, \"isRival\")}\r\n                />\r\n            </Grid>\r\n        </Paper>\r\n        <Paper style={styles.action}>\r\n            <strong>{props.currentAction.description}</strong>\r\n            <progress style={styles.actionProgress} value={props.actionTime}\r\n                      max={_.get(props.state, props.currentAction.duration)}/>\r\n        </Paper>\r\n        <ActionLog actionLog={props.actionLog}/>\r\n    </div>\r\n}\r\n\r\nfunction actionButton(action, text, description, props) {\r\n    return <Tooltip title={description}>\r\n        <Button onClick={() => props.setNextAction(action)} style={styles.actions.buttons}\r\n                disabled={props.currentAction.id !== \"approaching\"}\r\n                variant={props.nextActionName === action ? \"contained\" : \"outlined\"}\r\n                color={props.nextActionName === action ? \"primary\" : \"default\"}>\r\n            {text}\r\n        </Button>\r\n    </Tooltip>\r\n}","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nconst styles = {\r\n    alive: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#eeeeee\"\r\n    },\r\n    dead: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#b3827f\"\r\n    }\r\n}\r\n\r\nexport default function EnemySidebar(props) {\r\n    return <Paper style={!props.enemy || props.enemy.isAlive ? styles.alive : styles.dead}>\r\n        {props.enemy && <CharacterSheet enemy={props.player} character={props.enemy} /> }\r\n    </Paper>\r\n}","import {config} from \"../config\";\r\nimport * as _ from \"lodash\";\r\nimport {Attributes, calculateCombatStat} from \"../character\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {Tactics} from \"../data/Tactics\";\r\nimport {Statuses} from \"../data/Statuses\";\r\n\r\nexport default class CharacterCombatState {\r\n    constructor(originalCharacter, party) {\r\n        this.id = originalCharacter.id;\r\n        // FIXME: Symbols?\r\n        this.attributes = new Attributes({\r\n            brutality: originalCharacter.attributes.baseBrutality,\r\n            deceit: originalCharacter.attributes.baseDeceit,\r\n            cunning: originalCharacter.attributes.baseCunning,\r\n            madness: originalCharacter.attributes.baseMadness\r\n        }, originalCharacter);\r\n        this.party = party;\r\n        this.hp = originalCharacter.currentHp;\r\n        this._speed = originalCharacter.speed;\r\n        this.maximumHp = originalCharacter.maximumHp;\r\n        this.fatigue = 0;\r\n        this.lastActed = 0;\r\n        this.modifiers = [];\r\n        this.tactics = originalCharacter.tactics;\r\n        this.traits = {...originalCharacter.traits};\r\n        this.damage = {\r\n            min: originalCharacter.combat.minimumDamage,\r\n            med: originalCharacter.combat.medianDamage,\r\n            max: originalCharacter.combat.maximumDamage\r\n        }\r\n        this.statuses = {...originalCharacter.statuses};\r\n        this.powerLevel = originalCharacter.powerLevel;\r\n    }\r\n\r\n    get combat() {\r\n        return {\r\n            precision: Decimal(this.precision),\r\n            evasion: Decimal(this.evasion),\r\n            power: Decimal(this.power),\r\n            resilience: Decimal(this.resilience),\r\n            minimumDamage: Decimal(this.damage.min),\r\n            medianDamage: Decimal(this.damage.med),\r\n            maximumDamage: Decimal(this.damage.max)\r\n        }\r\n    }\r\n\r\n    get damageFromFatigue() {\r\n        const maximumHp = this.maximumHp;\r\n        const tacticsMultiplier = Tactics[this.tactics].modifiers.fatigue_multiplier || 0;\r\n        const totalMultiplier = Decimal(1).plus(tacticsMultiplier);\r\n        return maximumHp.times(totalMultiplier).div(100).floor();\r\n    }\r\n\r\n    set speed(newSpeed) {\r\n        this._speed = newSpeed;\r\n    }\r\n\r\n    get speed() {\r\n        const baseSpeed = this._speed;\r\n        const speedMultiplier = this.modifiers.reduce((currentValue, modifier) => {\r\n            if(modifier.effects.speed) {\r\n                const multiplier = (modifier.effects.speed.percent.plus(100))/100\r\n                return currentValue.plus(multiplier);\r\n            }\r\n            return currentValue;\r\n        }, _.get(config.tactics, this.tactics, 1));\r\n        return baseSpeed.times(speedMultiplier);\r\n    }\r\n\r\n    get isAlive(){\r\n        return this.hp.gt(0);\r\n    }\r\n\r\n    get accuracy() {\r\n        const baseAccuracy = Decimal(config.mechanics.combat.baseHitChance);\r\n        const statusesMultiplier = Decimal(1).minus(\r\n            Decimal(Statuses[\"restrained\"].effects.accuracy_modifier)\r\n            .times(this.statuses[\"restrained\"] || 0));\r\n        return baseAccuracy.times(statusesMultiplier);\r\n    }\r\n\r\n    get canAct() {\r\n        return Object.keys(this.statuses).reduce((canAct, nextStatus) => {\r\n            return canAct && !Statuses[nextStatus].effects.skip_turn;\r\n        }, true);\r\n    }\r\n\r\n    get power() {\r\n        return calculateCombatStat(this, \"power\");\r\n    }\r\n\r\n    get resilience() {\r\n        return calculateCombatStat(this, \"resilience\");\r\n    }\r\n\r\n    get precision() {\r\n        return calculateCombatStat(this, \"precision\");\r\n    }\r\n\r\n    get evasion() {\r\n        return calculateCombatStat(this, \"evasion\");\r\n    }\r\n}","import CharacterCombatState from \"../CharacterCombatState\";\r\nimport {debugMessage} from \"../../debugging\";\r\nimport {getTrait} from \"../../data/Traits\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {config} from \"../../config\";\r\nimport {v4} from \"node-uuid\";\r\nimport {generateHitCombatResult, generateMissCombatResult, generateSkipActionResult} from \"../../combatResult\";\r\nimport {evaluateExpression, getCharacter} from \"../index\";\r\nimport * as _ from \"lodash\";\r\nimport getHitChanceBy from \"./getHitChanceBy\";\r\nimport {Statuses} from \"../../data/Statuses\";\r\nimport {act} from \"@testing-library/react\";\r\nimport calculateDamageBy from \"./calculateDamageBy\";\r\n\r\nexport function resolveCombat(rng, definition) {\r\n    const combatResult = {\r\n        rounds: [],\r\n        winner: null,\r\n        combatantCombatStats: {},\r\n    }\r\n\r\n    _.flatMap(definition.parties.map((party, partyIndex) => {\r\n        return party.map((character) => {\r\n            combatResult.combatantCombatStats[character.id] = new CharacterCombatState(character, partyIndex);\r\n        })\r\n    }));\r\n    debugMessage(\"Beginning combat\")\r\n    Object.values(combatResult.combatantCombatStats).forEach(combatant => {\r\n        const startOfCombatEffects = [];\r\n        // Trigger start of combat effects.\r\n        triggerEvent(combatant, null, Object.values(combatResult.combatantCombatStats), {\r\n            type: \"on_combat_start\",\r\n            actor: combatant}, 0, {\r\n            combat: combatResult,\r\n            round: {effects: startOfCombatEffects}\r\n        }, rng);\r\n        startOfCombatEffects.forEach(effect => {\r\n            combatResult.rounds.push(effect);\r\n        });\r\n    })\r\n\r\n\r\n    let tick = 0;\r\n    while (combatResult.winner === null) {\r\n        const initiatives = determineInitiatives(combatResult);\r\n        Object.keys(initiatives).forEach(initiativeCount => {\r\n            const actingCharacters = initiatives[initiativeCount];\r\n            actingCharacters.forEach(actingCharacter => {\r\n                const beginningOfRoundEffects = [];\r\n                triggerEvent(actingCharacter, null, Object.values(combatResult.combatantCombatStats), {type: \"on_round_start\"}, tick, {\r\n                    combat: combatResult,\r\n                    round: {effects: beginningOfRoundEffects}\r\n                }, rng);\r\n                beginningOfRoundEffects.forEach(effect => {\r\n                    combatResult.rounds.push(effect);\r\n                });\r\n                tick = actingCharacter.lastActed + actingCharacter.speed.toNumber();\r\n                actingCharacter.lastActed = tick;\r\n                debugMessage(`Tick ${tick}: Resolving action by character '${actingCharacter.id}'.`);\r\n                if (actingCharacter.hp.lte(0)) {\r\n                    debugMessage(`Tick ${tick}: Character ${actingCharacter.id} was dead when their turn to act came up, skipping their action.`);\r\n                    return;\r\n                }\r\n                const enemyParty = (actingCharacter.party + 1) % 2;\r\n                const livingEnemies = definition.parties[enemyParty]\r\n                    .filter(enemy => combatResult.combatantCombatStats[enemy.id].hp.gt(0));\r\n                const target = combatResult.combatantCombatStats[_.get(livingEnemies[Math.floor(rng.double() * livingEnemies.length)], \"id\")];\r\n                if (target === undefined) {\r\n                    debugMessage(`Tick ${tick}: No valid target, skipping action by ${actingCharacter.id}.`);\r\n                    return;\r\n                }\r\n                if (actingCharacter.canAct) {\r\n                    debugMessage(`Tick ${tick}: Attacking ${target}`);\r\n                    const attackRollResult = makeAttackRoll(actingCharacter, target, combatResult, rng);\r\n                    const attackOutcome = evaluateExpression(config.mechanics.combat.determineHit, {\r\n                        roll: attackRollResult.total,\r\n                        target: 100\r\n                    });\r\n                    switch (attackOutcome) {\r\n                        case \"hit\":\r\n                            debugMessage(`Tick ${tick}: ${actingCharacter.id} rolled ${attackRollResult.total}, a hit.`);\r\n                            resolveHit(tick, combatResult, actingCharacter, target, rng);\r\n                            break;\r\n                        default:\r\n                            debugMessage(`Tick ${tick}: ${actingCharacter.id} rolled ${attackRollResult.total}, a miss.`);\r\n                            resolveMiss(tick, combatResult, actingCharacter, target, rng);\r\n                        // TODO: Trigger on-miss effects\r\n                    }\r\n                } else {\r\n                    debugMessage(`${tick}: Character skips their action.`);\r\n                    resolveSkippedAction(tick, combatResult, actingCharacter);\r\n                }\r\n                Object.keys(combatResult.combatantCombatStats).forEach(combatantId => {\r\n                    if (combatResult.combatantCombatStats[combatantId].hp.lte(0)) {\r\n                        debugMessage(`Tick ${tick}: Combatant ${combatantId} died`);\r\n                        combatResult.rounds.push({\r\n                            uuid: v4(),\r\n                            tick,\r\n                            actor: actingCharacter.id,\r\n                            target: Number.parseInt(combatantId),\r\n                            result: \"kill\"\r\n                        });\r\n                    }\r\n                });\r\n\r\n                // TODO: Add logs for when effects expire.\r\n                actingCharacter.modifiers = actingCharacter.modifiers\r\n                    .map(modifier => {\r\n                        modifier.roundDuration = Decimal(modifier.roundDuration).minus(1);\r\n                        return modifier;\r\n                    })\r\n                    .filter(modifier => Decimal(modifier.roundDuration).gt(0));\r\n                const endOfRoundEffects = [];\r\n                triggerEvent(actingCharacter, null, Object.values(combatResult.combatantCombatStats), {\r\n                    type: \"on_round_end\",\r\n                    actor: actingCharacter\r\n                }, tick, {\r\n                    combat: combatResult,\r\n                    round: {effects: endOfRoundEffects}\r\n                }, rng);\r\n                actingCharacter.fatigue = Decimal(actingCharacter.fatigue || 0).plus(1);\r\n                if(actingCharacter.powerLevel.div(2).plus(3).lt(actingCharacter.fatigue)) {\r\n                    const healthToLose = Decimal.max(actingCharacter.damageFromFatigue.floor(), 1);\r\n                    actingCharacter.hp = Decimal.max(actingCharacter.hp.minus(healthToLose), 0);\r\n                    combatResult.rounds.push({\r\n                        uuid: v4(),\r\n                        result: \"fatigue-damage\",\r\n                        value: healthToLose,\r\n                        actor: actingCharacter.id\r\n                    });\r\n                }\r\n                Object.keys(actingCharacter.statuses).filter(x => Statuses[x].decays).forEach(status => {\r\n                    actingCharacter.statuses[status] = actingCharacter.statuses[status].minus(1);\r\n                    if (Decimal(0).lte(actingCharacter.statuses[status] || 0)) {\r\n                        delete actingCharacter.statuses[status]\r\n                        combatResult.rounds.push({\r\n                            uuid: v4(),\r\n                            tick,\r\n                            actor: actingCharacter.id,\r\n                            result: \"status-removed\",\r\n                            status\r\n                        });\r\n                    }\r\n                });\r\n                endOfRoundEffects.forEach(event => {\r\n                    combatResult.rounds.push(event);\r\n                });\r\n            });\r\n        });\r\n        const playerPartyDead = definition.parties[0].every(character => combatResult.combatantCombatStats[character.id].hp.lte(0));\r\n        const enemyPartyDead = definition.parties[1].every(character => combatResult.combatantCombatStats[character.id].hp.lte(0));\r\n        if (playerPartyDead || enemyPartyDead) {\r\n            if (playerPartyDead) {\r\n                debugMessage(\"Every member of party 0 is dead\")\r\n                combatResult.rounds.push({\r\n                    uuid: v4(),\r\n                    tick,\r\n                    winner: 1,\r\n                    result: \"combat-end\"\r\n                })\r\n                combatResult.winner = 1;\r\n                // Clear all end of combat\r\n            } else if (enemyPartyDead) {\r\n                debugMessage(\"Every member of party 1 is dead\")\r\n                combatResult.rounds.push({\r\n                    uuid: v4(),\r\n                    tick,\r\n                    winner: 0,\r\n                    result: \"combat-end\",\r\n                });\r\n                combatResult.winner = 0;\r\n            }\r\n\r\n        } else {\r\n            debugMessage(\"No winner, combat continues\");\r\n        }\r\n    }\r\n    return combatResult\r\n\r\n}\r\n\r\nfunction resolveHit(tick, combatResult, actingCharacter, targetCharacter, rng) {\r\n    if (typeof actingCharacter !== \"object\") {\r\n        throw new Error(`Acting character was not an object!`);\r\n    }\r\n    if (typeof targetCharacter !== \"object\") {\r\n        throw new Error(`Target character was not an object!`);\r\n    }\r\n    const hitTypeChances = getHitChanceBy(actingCharacter).against(targetCharacter);\r\n    const damageCategories = calculateDamageBy(actingCharacter).against(targetCharacter, config.debug.enabled);\r\n    const damageRoll = Math.floor(rng.double() * 100);\r\n    let hitType;\r\n    if (damageRoll <= hitTypeChances.min) {\r\n        hitType = \"min\";\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a glancing hit.`);\r\n    } else if (damageRoll <= hitTypeChances.med.plus(hitTypeChances.min)) {\r\n        hitType = \"med\";\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a solid hit.`);\r\n    } else {\r\n        hitType = \"max\";\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a critical hit.`);\r\n    }\r\n    const baseDamageToInflict = damageCategories[hitType];\r\n    const attackResult = {\r\n        baseDamage: baseDamageToInflict,\r\n        hitType,\r\n        attackMultiplier: Decimal(0),\r\n        defenseDivisor: Decimal(0),\r\n        effects: []\r\n    }\r\n    // Trigger on-hit effects\r\n    triggerEvent(actingCharacter, targetCharacter, Object.values(combatResult.combatantCombatStats), {\r\n        type: \"on_hitting\",\r\n        actor: actingCharacter,\r\n        target: targetCharacter\r\n    }, tick, {\r\n        combat: combatResult,\r\n        attack: attackResult\r\n    }, rng);\r\n    const damageMultiplier = Decimal.max(0.01, attackResult.attackMultiplier.minus(attackResult.defenseDivisor).plus(1));\r\n    const finalDamage = baseDamageToInflict.times(damageMultiplier).ceil();\r\n\r\n    debugMessage(`Damage started off as ${baseDamageToInflict.toFixed()}, with an attack factor of ${attackResult.attackMultiplier} and a target defense factor of ${attackResult.defenseDivisor}, for a total factor of ${damageMultiplier} and a final damage of ${finalDamage.toFixed()}`);\r\n    targetCharacter.hp = targetCharacter.hp.minus(finalDamage);\r\n    attackResult.finalDamage = finalDamage;\r\n    debugMessage(`Tick ${tick}: Hit did ${finalDamage.toFixed()}. Additional effects: ${attackResult.effects.map(effect => {\r\n        switch (effect.event) {\r\n            case \"apply_effect\":\r\n                return `Applying effect ${effect.effect} with from ${effect.source} to ${effect.target.id}.`\r\n            case \"add_statuses\":\r\n                return `Adding status ${effect.status} with rank ${effect.rank} to ${effect.target}`;\r\n        }\r\n\r\n    }).join(\", \")}. Character ${targetCharacter.id} has ${targetCharacter.hp} remaining.`)\r\n    // TODO: Trigger on-damage effects\r\n    triggerEvent(targetCharacter, actingCharacter, Object.values(combatResult.combatantCombatStats), {\r\n        type: \"on_taking_damage\",\r\n        actor: actingCharacter,\r\n        target: targetCharacter\r\n    }, tick, {combat: combatResult, attack: attackResult}, rng);\r\n    attackResult.effects.forEach(effect => {\r\n        switch (effect.event) {\r\n            case \"damage\":\r\n                combatResult.combatantCombatStats[effect.target].hp = combatResult.combatantCombatStats[effect.target].hp.minus(effect.value);\r\n                break;\r\n        }\r\n    })\r\n    combatResult.rounds.push(generateHitCombatResult(tick, actingCharacter.id, targetCharacter.id, finalDamage, attackResult.effects));\r\n}\r\n\r\nfunction resolveMiss(tick, combatResult, actingCharacter, targetCharacter, rng) {\r\n    combatResult.rounds.push(generateMissCombatResult(tick, actingCharacter.id, targetCharacter.id));\r\n}\r\n\r\nfunction resolveSkippedAction(tick, combatResult, actingCharacter) {\r\n    combatResult.rounds.push(generateSkipActionResult(tick, actingCharacter.id));\r\n}\r\n\r\nfunction applyTrait(sourceCharacter, targetCharacter, trait, rank, event, state, tick, rng) {\r\n    const eventType = event.type;\r\n    const recordedEffects = roundEvents.includes(eventType) ? state.round.effects : state.attack.effects;\r\n    const rankModifier = Decimal(sourceCharacter.attributes[config.mechanics.combat.traitRank.baseAttribute]).times(config.mechanics.combat.traitRank.effectPerPoint).div(100);\r\n    rank = Decimal.min(Decimal(rank).plus(Decimal(rank).times(rankModifier)).floor(), 100);\r\n    debugMessage(`Character has a bonus to rank of ${sourceCharacter.attributes.madness.toFixed()}% from madness, for an effective rank of ${rank}`);\r\n    debugMessage(`Tick ${tick}: Determining if trait ${trait.name} applies`);\r\n    if (trait[eventType]) {\r\n        const effect = trait[eventType];\r\n        if (effect.conditions !== undefined) {\r\n            debugMessage(\"Trait has conditions\");\r\n        }\r\n        const effectTriggers = effect.conditions === undefined || Object.keys(effect.conditions)\r\n            .every(condition => {\r\n                switch (condition) {\r\n                    case \"critical_hit\":\r\n                        return state.attack.hitType === \"max\";\r\n                    case \"health_percentage\":\r\n                        // Fixme: Implement validation\r\n                        const targets = selectTargets(event.actor, event.target, Object.values(state.combat.combatantCombatStats), \"all_enemies\", state);\r\n                        return targets.reduce((previousValue, combatant) => {\r\n                            const targetPercent = Decimal(effect.conditions[condition].below);\r\n                            const targetCurrentHealth = combatant.hp;\r\n                            const targetMaxHealth = combatant.maximumHp;\r\n                            const currentHealthPercent = (targetCurrentHealth.mul(100).div(targetMaxHealth));\r\n                            const thisConditionMet = targetPercent.gte(currentHealthPercent);\r\n                            debugMessage(`Tick ${tick}: Target health percentage is ${currentHealthPercent}, which is ${thisConditionMet ? \"\" : \"not\"} enough to trigger.`);\r\n                            return previousValue && thisConditionMet;\r\n                        }, true);\r\n\r\n                    case \"chance\":\r\n                        const chanceToTrigger = evaluateExpression(trait[eventType].conditions[condition], {\r\n                            $rank: rank\r\n                        });\r\n                        const roll = Math.floor(rng.double() * 100) + 1;\r\n                        if (chanceToTrigger >= roll) {\r\n                            debugMessage(`Chance to trigger ${chanceToTrigger} with roll ${roll}: success`);\r\n                            return true;\r\n                        } else {\r\n                            debugMessage(`Chance to trigger ${chanceToTrigger} with roll ${roll}: failure.`);\r\n                            return false;\r\n                        }\r\n                    default:\r\n                        return false;\r\n                }\r\n            })\r\n        if (effectTriggers) {\r\n            debugMessage(`Tick ${tick}: Effect triggered, applying effects`);\r\n            Object.keys(trait[eventType].effects).forEach(traitEffect => {\r\n                    // FIXME\r\n                    switch (traitEffect) {\r\n                        case \"damage_modifier\":\r\n                            // FIXME: Validation\r\n                            const percentDamageModifier = evaluateExpression(trait[eventType].effects[traitEffect].percent, {\r\n                                $rank: rank\r\n                            });\r\n                            if (percentDamageModifier) {\r\n                                const newMultiplier = state.attack.attackMultiplier.plus(percentDamageModifier);\r\n                                debugMessage(`Tick ${tick}: Applying ${percentDamageModifier.toFixed()} modifier to damage, changing damage multiplier from ${state.attack.attackMultiplier.div(100).toFixed()} to ${newMultiplier.div(100).toFixed()}`);\r\n                                state.attack.attackMultiplier = newMultiplier;\r\n                            }\r\n                            break;\r\n                        case \"damage\":\r\n                            const target = trait[eventType].effects.target\r\n                            const damageToInflict = evaluateExpression(trait[eventType].effects.damage, {\r\n                                $rank: Decimal(rank),\r\n                                attackDamage: state.attack.finalDamage\r\n                            }).floor();\r\n                            debugMessage(`Inflicting ${damageToInflict} damage to ${target}`);\r\n                            if (damageToInflict.gt(0)) {\r\n                                const targets = selectTargets(event.actor, event.target, Object.values(state.combat.combatantCombatStats), target, state);\r\n                                targets.forEach(target => {\r\n                                    recordedEffects.push({\r\n                                        event: \"damage\",\r\n                                        value: damageToInflict,\r\n                                        target: target.id\r\n                                    });\r\n                                });\r\n                            }\r\n                            break;\r\n                        case \"defense_modifier\": {\r\n                            const defenseModifier = evaluateExpression(trait[eventType].effects[traitEffect].percent, {\r\n                                $rank: rank\r\n                            }).div(100).plus(1);\r\n                            const newMultiplier = state.attack.defenseDivisor.times(defenseModifier);\r\n                            debugMessage(`Tick ${tick}: Applying ${defenseModifier} modifier to defense, changing defense multiplier from ${state.attack.defenseDivisor.toFixed()} to ${newMultiplier.toFixed()}`);\r\n                            state.attack.defenseDivisor = newMultiplier;\r\n                            break;\r\n                        }\r\n                        case \"add_statuses\":\r\n                            const statusesDefinition = trait[eventType].effects.add_statuses;\r\n                            Object.keys(statusesDefinition).forEach(statusType => {\r\n                                const effectTarget = statusesDefinition[statusType].target;\r\n                                // Determine targets\r\n                                const targets = selectTargets(event.actor, event.target, Object.values(state.combat.combatantCombatStats), effectTarget, state);\r\n                                const statusLevel = evaluateExpression(statusesDefinition[statusType].rank, {\r\n                                    rank\r\n                                });\r\n                                targets.forEach(combatant => {\r\n                                    const existingLevel = Decimal(combatant.statuses[statusType] || 0);\r\n                                    if (existingLevel.lt(statusLevel)) {\r\n                                        combatant.statuses[statusType] = statusLevel;\r\n                                        recordedEffects.push({\r\n                                            event: \"add_statuses\", // FIXME: Shouldn't require both event and result.\r\n                                            result: \"add_statuses\",\r\n                                            source: sourceCharacter.id,\r\n                                            target: combatant.id,\r\n                                            status: statusType,\r\n                                            level: statusLevel,\r\n                                            tick\r\n                                        });\r\n                                    }\r\n                                });\r\n                            })\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nfunction makeAttackRoll(actingCharacter, target, combatState, rng) {\r\n    // TODO: Validation\r\n    const accuracy = actingCharacter.accuracy;\r\n    const roll = accuracy.plus(Math.floor((rng.double() * 100)));\r\n    return {\r\n        rawRoll: roll,\r\n        total: roll\r\n    };\r\n}\r\n\r\nfunction selectTargets(sourceCharacter, targetCharacter, combatants, targetType, state) {\r\n    return combatants.filter(combatant => {\r\n        switch (targetType) {\r\n            case \"attacker\":\r\n                return sourceCharacter.id == combatant.id;\r\n            case \"attacked\":\r\n                return targetCharacter.id == combatant.id;\r\n            case \"all_enemies\":\r\n                const actingCharacterParty = sourceCharacter.id === 0 ? 0 : 1;\r\n                return actingCharacterParty !== combatant.party;\r\n            default:\r\n                throw new Error();\r\n        }\r\n    });\r\n}\r\n\r\nfunction triggerEvent(sourceCharacter, targetCharacter, combatants, event, tick, state, rng) {\r\n    debugMessage(`Triggering event ${event.type}`);\r\n    Object.keys(sourceCharacter.traits).forEach(trait => {\r\n        applyTrait(sourceCharacter, targetCharacter, getTrait(trait), sourceCharacter.traits[trait], event, state, tick, rng);\r\n    });\r\n}\r\n\r\nfunction determineInitiatives(state) {\r\n    const combatants = Object.values(state.combatantCombatStats);\r\n    return combatants.reduce((initiatives, combatant) => {\r\n        if (initiatives[combatant.speed.toNumber()]) {\r\n            initiatives[combatant.speed.toNumber()].push(combatant);\r\n        } else {\r\n            initiatives[combatant.speed.toNumber()] = [combatant];\r\n        }\r\n        return initiatives;\r\n    }, {});\r\n}\r\n\r\nconst roundEvents = [\"on_round_start\", \"on_combat_start\", \"on_round_end\"];","import {v4} from \"node-uuid\";\r\n\r\nexport function generateHitCombatResult(tick, attackingCharacterId, targetCharacterId, damageDone, otherEffects) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"hit\",\r\n        target: targetCharacterId,\r\n        actor: attackingCharacterId,\r\n        effects: [{\r\n            event: \"damage\",\r\n            value: damageDone,\r\n            target: targetCharacterId\r\n        }, ...otherEffects]\r\n    }\r\n}\r\n\r\nexport function generateMissCombatResult(tick, attackingCharacterId, targetCharacterId) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"miss\",\r\n        target: targetCharacterId,\r\n        actor: attackingCharacterId,\r\n        effects: []\r\n    }\r\n}\r\n\r\nexport function generateSkipActionResult(tick, actingCharacterId) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"action_skipped\",\r\n        actor: actingCharacterId,\r\n        effects: []\r\n    }\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport {getCharacter} from \"./engine\";\r\nimport React from \"react\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {debugMessage} from \"./debugging\";\r\nimport {Statuses} from \"./data/Statuses\";\r\n\r\nexport default function generateLogItem(item) {\r\n    const result = {\r\n        original: item,\r\n        tick: item.tick\r\n    };\r\n    if(item.message) {\r\n        return item;\r\n    }\r\n    switch (item.result) {\r\n        case \"hit\":\r\n            result.message = `${getCharacter(item.actor).name} hit! ${item.effects.map(effect => describeEffect(item.target, effect)).join(\" \")}`;\r\n            break;\r\n        case \"miss\":\r\n            result.message = `${getCharacter(item.actor).name} ${item.actor === 0 ? 'miss' : 'missed'}! ${item.effects.map(effect => describeEffect(item.target, effect)).join(\" \")}`;\r\n            break;\r\n        case \"kill\":\r\n            result.message = `<strong>${getCharacter(item.target).name} ${item.target === 0 ? 'Were' : 'Was'} Killed!</strong>`;\r\n            break;\r\n        case \"gainedPower\":\r\n            result.message = `You absorbed ${item.value.toFixed()} power.`;\r\n            break;\r\n        case \"healed\":\r\n            result.message = `${getCharacter(item.target).name} gained ${item.value} health.`\r\n            break;\r\n        case \"escaped\":\r\n            result.message = \"You escaped\";\r\n            break;\r\n        case \"action_skipped\":\r\n            result.message = `${getCharacter(item.actor).name} lost ${item.actor === 0 ? 'your' : 'their'} action.`;\r\n            break;\r\n        case \"intimidated\":\r\n            result.message = `${getCharacter(item.target).name} was Bound to you, granting you ${item.value.toFixed()} power while you explore.`\r\n            break;\r\n        case \"enemy-fled\":\r\n            result.message = `${getCharacter(item.target).name} Fled!`;\r\n            break;\r\n        case \"combat-end\":\r\n            result.message = `Battle ended`;\r\n            delete result.tick;\r\n            break;\r\n        case \"add_statuses\":\r\n            result.message = `${getCharacter(item.target).name} ${item.target === 0 ? 'gain' : 'gained'} ${Decimal(item.level).toFixed()} ${Decimal(item.level).eq(1) ? 'level' : 'levels'} of ${Statuses[item.status].name}`\r\n            break;\r\n        case \"status-removed\":\r\n            result.message = `${Statuses[item.status].name} was removed from ${getCharacter(item.actor).name}.`\r\n            break;\r\n        case \"fatigue-damage\":\r\n            result.message = `Extreme exhaustion deals ${item.value} damage to ${getCharacter(item.actor).name}.`;\r\n            break;\r\n        default:\r\n            debugMessage(`${JSON.stringify(item)}`);\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction describeEffect(target, effect) {\r\n    switch (effect.event) {\r\n        case \"damage\":\r\n            return `${getCharacter(effect.target).name} ${effect.target == 0 ? 'take' : 'takes'} ${effect.value} Damage.`;\r\n        case \"add_statuses\":\r\n            return `${getCharacter(effect.target).name} gained ${Decimal(effect.level).toFixed()} of ${Statuses[effect.status].name}.`;\r\n    }\r\n}","import PlayerStats from \"../PlayerStats\";\r\nimport TopSection from \"../TopSection\";\r\nimport {\r\n    evaluateExpression,\r\n    getCharacter,\r\n    getGlobalState,\r\n    getManualSpeedMultiplier, reincarnateAs,\r\n    saveGlobalState\r\n} from \"../../engine\";\r\nimport BottomSection from \"../BottomSection\";\r\nimport EnemySidebar from \"../EnemySidebar\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport {config} from \"../../config\";\r\nimport {Actions} from \"../../data/Actions\";\r\nimport {debugMessage} from \"../../debugging\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {v4} from \"node-uuid\";\r\nimport {Regions} from \"../../data/Regions\";\r\nimport {resolveCombat} from \"../../engine/combat\";\r\nimport {useHotkeys} from \"react-hotkeys-hook\";\r\nimport generateLogItem from \"../../generateLogItem\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flex: \"1\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        overflow: \"hidden\"\r\n    },\r\n    image: {\r\n        position: \"absolute\",\r\n        height: \"100%\",\r\n        left: 0\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        left: 0\r\n    }\r\n}\r\n\r\nlet lastTime;\r\n\r\nfunction changeCurrentAction(newAction) {\r\n    getGlobalState().currentAction = newAction;\r\n    return getGlobalState().currentAction;\r\n}\r\n\r\nfunction pushLogItem(item) {\r\n    if (getGlobalState().actionLog.length > (config.actionLog.maxSize || 10)) {\r\n        getGlobalState().actionLog.pop();\r\n    }\r\n    getGlobalState().actionLog.unshift(generateLogItem(item));\r\n}\r\n\r\nexport default function AdventuringPage(props) {\r\n    const accruedTime = useRef(0);\r\n    const [enemy, setEnemy] = useState(_.get(getGlobalState(), [\"currentEncounter\", \"enemies\", 0]));\r\n    const [actionLog, setActionLog] = useState(getGlobalState().actionLog);\r\n    const [currentEncounter, setCurrentEncounter] = useState(getGlobalState().currentEncounter);\r\n    const [currentAction, setCurrentAction] = useState(Actions[getGlobalState().currentAction]);\r\n    const [nextAction, setNextAction] = useState(getGlobalState().nextAction);\r\n    const [paused, setPaused] = useState(getGlobalState().paused);\r\n    const [displayedTime, setDisplayedTime] = useState(0);\r\n    const [player, setPlayer] = useState(getCharacter(0));\r\n    const manualSpeedUpActive = useRef(false);\r\n    const [automaticReincarnate, setAutomaticReincarnate] = useState(getGlobalState().automaticReincarnate);\r\n\r\n    function togglePause() {\r\n        getGlobalState().paused = !getGlobalState().paused;\r\n        setPaused(getGlobalState().paused);\r\n    }\r\n\r\n    const history = useHistory();\r\n\r\n    useHotkeys(\"p\", () => getGlobalState().paused = !getGlobalState().paused);\r\n\r\n    useEffect(() => {\r\n        let lastFrame;\r\n\r\n        function applyAction(action, lastTick) {\r\n            if (lastTick !== undefined && action.tick && action.tick !== lastTick) {\r\n                debugMessage(`Not consuming an action for tick ${action.tick} on tick ${lastTick}`);\r\n                return;\r\n            }\r\n            pushLogItem(action);\r\n            switch (action.result) {\r\n                case \"combat-end\":\r\n                    if (!getCharacter(0).isAlive) {\r\n                        setCurrentAction(Actions[changeCurrentAction(\"reincarnating\")]);\r\n                    } else {\r\n                        if (config.mechanics.artifacts.enabled) {\r\n                            setCurrentAction(Actions[changeCurrentAction(\"looting\")]);\r\n                        } else {\r\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                        }\r\n                    }\r\n                    return;\r\n                    break;\r\n                case \"kill\":\r\n                    const enemy = getCharacter(action.target);\r\n                    if (action.actor === 0 && action.target !== 0) {\r\n                        debugMessage(\"Player killed an enemy and gained power.\");\r\n                        const player = getCharacter(0);\r\n                        const powerToGain = evaluateExpression(config.mechanics.xp.gainedFromOtherDemon, {\r\n                            enemy\r\n                        });\r\n                        let multiplier = Object.keys(player.traits).reduce((multiplier, trait) => {\r\n                            const traitMultiplier = evaluateExpression(_.get(Traits[trait].on_kill, [\"effects\", \"power_gain_modifier\"], 0),\r\n                                {\r\n                                    rank: Decimal(player.traits[trait])\r\n                                });\r\n                            return multiplier.plus(traitMultiplier);\r\n                        }, Decimal(1));\r\n                        const pregainLevel = player.powerLevel;\r\n                        const powerGained = player.gainPower(powerToGain.times(multiplier).floor());\r\n                        pushLogItem(generateLogItem({\r\n                            result: \"gainedPower\",\r\n                            value: powerGained\r\n                        }));\r\n                        if (!pregainLevel.eq(player.powerLevel)) {\r\n                            const currentHp = player.currentHp;\r\n                            player.currentHp = player.maximumHp;\r\n                            pushLogItem({\r\n                                message: `The surge of new power heals you for ${player.currentHp.minus(currentHp)} health.`,\r\n                                uuid: v4()\r\n                            })\r\n                        }\r\n                        if (!getGlobalState().automaticReincarnate) {\r\n                            getGlobalState().highestLevelEnemyDefeated = Decimal.max(getGlobalState().highestLevelEnemyDefeated, enemy.powerLevel);\r\n                        }\r\n                        getGlobalState().highestLevelReached = Decimal.max(getGlobalState().highestLevelReached, getCharacter(0).powerLevel);\r\n                        if(enemy.isRival) {\r\n                            getGlobalState().rival = {};\r\n                            pushLogItem({\r\n                                message: \"You've defeated your rival!\",\r\n                                uuid: v4()\r\n                            })\r\n                        }\r\n                    } else if (action.target === 0) {\r\n                        if(Decimal(enemy.powerLevel).gt(getGlobalState().rival.level || 0)) {\r\n                            getGlobalState().rival = {\r\n                                level: enemy.powerLevel,\r\n                                type: enemy.appearance,\r\n                                traits: enemy.traits,\r\n                                tactics: enemy.tactics\r\n                            }\r\n                            pushLogItem({\r\n                                message: \"<strong>You have a new rival!</strong>\",\r\n                                uuid: v4()\r\n                            })\r\n                        }\r\n                        getCharacter(0).currentHp = Decimal(0);\r\n                    }\r\n                    break;\r\n                case \"hit\":\r\n                case \"miss\":\r\n                    (action.effects || []).forEach(effect => {\r\n                        const targetCharacter = getCharacter(effect.target);\r\n                        switch (effect.event) {\r\n                            case \"damage\":\r\n                                targetCharacter.currentHp = targetCharacter.currentHp.minus(effect.value);\r\n                                if (targetCharacter.currentHp.lt(Decimal(0))) {\r\n                                    targetCharacter.currentHp = Decimal(0);\r\n                                }\r\n                                break;\r\n                            case \"add_statuses\":\r\n                                const characterStatuses = getCharacter(effect.target).statuses;\r\n                                characterStatuses[effect.status] = effect.level;\r\n                                break;\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"fatigue-damage\":\r\n                    const targetCharacter = getCharacter(action.actor);\r\n                    targetCharacter.currentHp = targetCharacter.currentHp.minus(action.value);\r\n                    break;\r\n                case \"add_statuses\":\r\n                    const characterStatuses = getCharacter(action.target).statuses;\r\n                    characterStatuses[action.status] = action.level;\r\n                    break;\r\n                case \"status-removed\": {\r\n                    const characterStatuses = getCharacter(action.actor).statuses;\r\n                    delete characterStatuses[action.status];\r\n                }\r\n                case \"action_skipped\":\r\n                    break;\r\n                default:\r\n                    throw new Error();\r\n            }\r\n            // Consume action\r\n            getGlobalState().currentEncounter.pendingActions.shift()\r\n            saveGlobalState();\r\n            const nextAction = getGlobalState().currentEncounter.pendingActions[0];\r\n            if (nextAction) {\r\n                applyAction(nextAction, action.tick);\r\n            }\r\n        }\r\n\r\n        function tick(timestamp) { // FIXME: Optimize, serious performance bottleneck\r\n            if (!lastTime) {\r\n                lastTime = timestamp;\r\n            } else if (!getGlobalState().paused) {\r\n                const player = getCharacter(0);\r\n                if (accruedTime.current >= _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration)) {\r\n                        const player = getCharacter(0);\r\n                        saveGlobalState();\r\n                        accruedTime.current = 0;\r\n                        switch (getGlobalState().currentAction) {\r\n                            case \"exploring\":\r\n                                if (getCharacter(0).powerLevel.gte(config.mechanics.maxLevel)) {\r\n                                    pushLogItem({\r\n                                        message: \"Congratulations, you've reached the level cap. 👍\",\r\n                                        uuid: v4()\r\n                                    });\r\n                                    setPaused(getGlobalState().paused = true);\r\n                                }\r\n                                if (getCharacter(0).isAlive) {\r\n                                    setCurrentEncounter(getGlobalState().currentEncounter = null);\r\n                                    setEnemy(null);\r\n                                }\r\n                                getCharacter(0).clearStatuses();\r\n                                let proceedingToEncounter = false;\r\n                                if (getCharacter(0).currentHp.lt(getCharacter(0).maximumHp)) {\r\n                                    const encounterChance = evaluateExpression(config.mechanics.combat.randomEncounterChance, {\r\n                                        player\r\n                                    });\r\n                                    const amountToHeal = encounterChance.lte(0) || getCharacter(0).currentHp.plus(getCharacter(0).healing).gt(\r\n                                        getCharacter(0).maximumHp\r\n                                    ) ? getCharacter(0).maximumHp.minus(getCharacter(0).currentHp) : getCharacter(0).healing;\r\n                                    getCharacter(0).currentHp = getCharacter(0).currentHp.plus(amountToHeal);\r\n                                    pushLogItem({\r\n                                        message: `You naturally healed ${amountToHeal} health`,\r\n                                        uuid: v4()\r\n                                    })\r\n                                    const encounterRoll = Math.floor(props.rng.double() * 100) + 1;\r\n                                    debugMessage(`Determining if encounter occurs. Chance ${encounterChance} vs roll ${encounterRoll}.`);\r\n                                    if (encounterChance.gte(encounterRoll)) {\r\n                                        proceedingToEncounter = true;\r\n                                    } else {\r\n                                        if (encounterChance.eq(0)) {\r\n                                            pushLogItem({\r\n                                                message: \"Your weak spiritual energy keeps you hidden while you heal.\",\r\n                                                uuid: v4()\r\n                                            });\r\n                                        } else {\r\n                                            pushLogItem({\r\n                                                message: \"You don't find any trouble while you recover.\",\r\n                                                uuid: v4()\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    proceedingToEncounter = true;\r\n                                }\r\n                                if (proceedingToEncounter) {\r\n                                    getGlobalState().currentEncounter = Regions[getGlobalState().currentRegion].startEncounter(getCharacter(0), props.rng);\r\n                                    setCurrentEncounter(getGlobalState().currentEncounter);\r\n                                    setEnemy(getGlobalState().currentEncounter.enemies[0]);\r\n                                    setCurrentAction(Actions[changeCurrentAction(\"approaching\")]);\r\n                                    getGlobalState().nextAction = getGlobalState().currentEncounter.enemies.reduce((actionSoFar, nextEnemy) => {\r\n                                        if (actionSoFar !== \"fighting\") {\r\n                                            return actionSoFar;\r\n                                        }\r\n\r\n                                        if (player.otherDemonIsLesserDemon(nextEnemy)) {\r\n                                            return \"intimidating\";\r\n                                        } else if (player.otherDemonIsGreaterDemon(nextEnemy)) {\r\n                                            return \"fleeing\";\r\n                                        } else {\r\n                                            return \"fighting\";\r\n                                        }\r\n                                    }, \"fighting\");\r\n                                    setNextAction(getGlobalState().nextAction);\r\n                                    if (getGlobalState().passivePowerIncome.gt(0)) {\r\n                                        const gainedPower = getCharacter(0).gainPower(getGlobalState().passivePowerIncome);\r\n                                        pushLogItem({\r\n                                            message: `Your Bound lesser demons grant you ${gainedPower.toFixed()} power.`,\r\n                                            uuid: v4()\r\n                                        });\r\n                                        getGlobalState().highestLevelReached = Decimal.max(getGlobalState().highestLevelReached, getCharacter(0).powerLevel);\r\n                                    }\r\n                                    saveGlobalState();\r\n                                }\r\n                                break;\r\n                            case \"approaching\": {\r\n                                const enemy = getGlobalState().currentEncounter.enemies[0];\r\n                                    // Since we're starting a new combat, remove any old, dead characters\r\n                                    switch (getGlobalState().nextAction) {\r\n                                        case \"fighting\":\r\n                                            const enemies = getGlobalState().currentEncounter.enemies;\r\n                                            const combatResult = resolveCombat(props.rng, {\r\n                                                parties: [[player], enemies]\r\n                                            });\r\n                                            getGlobalState().currentEncounter.pendingActions = combatResult.rounds;\r\n                                            setEnemy(enemies[0]);\r\n                                            break;\r\n                                    }\r\n                                    setCurrentAction(Actions[changeCurrentAction(getGlobalState().nextAction)]);\r\n                                    setNextAction();\r\n                                    const deadCharacters = Object.keys(getGlobalState().characters)\r\n                                        .filter(id => id !== '0' && !getGlobalState().currentEncounter.enemies.find(c => c.id == id));\r\n                                    deadCharacters.forEach(id => {\r\n                                        delete getGlobalState().characters[id]\r\n                                    });\r\n                                break;\r\n                            }\r\n                            case \"intimidating\": {\r\n                                const enemy = getGlobalState().currentEncounter.enemies[0];\r\n                                const instantDeathLevel = evaluateExpression(config.encounters.lesserDemonInstantKillLevel, {\r\n                                    highestLevelEnemyDefeated: getGlobalState().highestLevelEnemyDefeated\r\n                                });\r\n                                if(enemy.powerLevel.lte(instantDeathLevel)) {\r\n                                    pushLogItem({\r\n                                        message: `Your force of will seizes control of ${enemy.name}'s mind!`,\r\n                                        uuid: v4()\r\n                                    })\r\n                                    setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                }\r\n                                const chanceToIntimidate = Decimal(enemy.powerLevel.lte(instantDeathLevel) ? 999 : evaluateExpression(config.encounters.chanceToIntimidateLesser, {\r\n                                    enemy,\r\n                                    player: getCharacter(0)\r\n                                }));\r\n                                const roll = Math.floor(props.rng.double() * 100) + 1;\r\n                                if (chanceToIntimidate.gte(roll)) {\r\n                                    const periodicPowerIncreases = evaluateExpression(config.mechanics.xp.gainedFromLesserDemon, {\r\n                                        enemy\r\n                                    });\r\n                                    pushLogItem(generateLogItem({\r\n                                        result: \"intimidated\",\r\n                                        target: enemy.id,\r\n                                        value: periodicPowerIncreases\r\n                                    }));\r\n                                    getGlobalState().passivePowerIncome = getGlobalState().passivePowerIncome.plus(periodicPowerIncreases);\r\n                                } else {\r\n                                    pushLogItem(generateLogItem({\r\n                                        message: `${getCharacter(enemy.id).name} escaped! (You rolled ${roll} vs ${chanceToIntimidate} chance to Bind).`\r\n                                    }));\r\n                                    setCurrentEncounter(getGlobalState().currentEncounter = null);\r\n                                }\r\n                                setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                break;\r\n                            }\r\n                            case \"fleeing\":\r\n                                const enemy = getGlobalState().currentEncounter.enemies[0];\r\n                                const chanceToFlee = evaluateExpression(config.encounters.chanceToEscapeGreater, {\r\n                                    enemy,\r\n                                    player: getCharacter(0)\r\n                                });\r\n                                const roll = Math.floor(props.rng.double() * 100) + 1;\r\n                                if (chanceToFlee.gte(roll)) {\r\n                                    pushLogItem({\r\n                                        result: \"escaped\",\r\n                                        uuid: v4()\r\n                                    });\r\n                                    const powerToGain = evaluateExpression(config.mechanics.xp.gainedFromGreaterDemon, {\r\n                                        enemy: enemy\r\n                                    });\r\n                                    const powerGained = player.gainPower(powerToGain);\r\n                                    getGlobalState().highestLevelReached = Decimal.max(getGlobalState().highestLevelReached, getCharacter(0).powerLevel);\r\n                                    pushLogItem(generateLogItem({\r\n                                        result: \"gainedPower\",\r\n                                        value: powerGained,\r\n                                    }));\r\n                                    getGlobalState().currentEncounter = null;\r\n                                    setCurrentEncounter(null);\r\n                                    setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                } else {\r\n                                    pushLogItem({\r\n                                        message: `The ${enemy.name} caught you! (Roll ${roll} vs ${chanceToFlee})`,\r\n                                        uuid: v4()\r\n                                    });\r\n                                    const enemies = getGlobalState().currentEncounter.enemies;\r\n                                    const combatResult = resolveCombat(props.rng, {\r\n                                        parties: [[player], enemies]\r\n                                    });\r\n                                    getGlobalState().currentEncounter.pendingActions = combatResult.rounds;\r\n                                    setEnemy(enemies[0]);\r\n                                    setNextAction(Actions[changeCurrentAction(\"fighting\")]);\r\n                                    setCurrentAction(Actions[changeCurrentAction(\"fighting\")]);\r\n                                }\r\n\r\n                                break;\r\n                            case \"fighting\" : {\r\n                                const instantDeathLevel = evaluateExpression(config.encounters.lesserDemonInstantKillLevel, {\r\n                                    highestLevelEnemyDefeated: getGlobalState().highestLevelEnemyDefeated\r\n                                });\r\n                                const enemy = getGlobalState().currentEncounter.enemies[0];\r\n                                if(enemy.powerLevel.lte(instantDeathLevel)) {\r\n                                    pushLogItem({\r\n                                        message: `The raw power of your killer instinct destroys ${enemy.name}!`,\r\n                                        uuid: v4()\r\n                                    });\r\n                                    getGlobalState().currentEncounter.pendingActions = [\r\n                                        {\r\n                                            uuid: v4(),\r\n                                            result: \"kill\",\r\n                                            target: enemy.id,\r\n                                            actor: 0,\r\n                                            tick: 0\r\n                                        },\r\n                                        {\r\n                                            uuid: v4(),\r\n                                            result: \"combat-end\",\r\n                                            tick: 0\r\n                                        }\r\n                                    ];\r\n                                    applyAction({\r\n                                        uuid: v4(),\r\n                                        result: \"kill\",\r\n                                        target: enemy.id,\r\n                                        actor: 0,\r\n                                        tick: 0\r\n                                    });\r\n                                    // setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                } else {\r\n                                    if (getGlobalState().currentEncounter.pendingActions.length) {\r\n                                        const nextAction = getGlobalState().currentEncounter.pendingActions[0];\r\n                                        applyAction(nextAction);\r\n                                        setActionLog([...getGlobalState().actionLog]);\r\n                                    } else {\r\n                                        setCurrentAction(Actions[changeCurrentAction(\"fleeing\")]);\r\n                                    }\r\n                                }\r\n                                break;\r\n                            }\r\n                            case \"looting\":\r\n                                const lootRoll = Math.floor(props.rng.double() * 666);\r\n                                if (lootRoll <= getGlobalState().currentEncounter.encounterLevel) {\r\n\r\n                                }\r\n                                setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                break;\r\n                            case \"reincarnating\": {\r\n                                setAutomaticReincarnate(getGlobalState().automaticReincarnate = true);\r\n                                const player = getCharacter(0);\r\n                                reincarnateAs(getCharacter(0).appearance, {\r\n                                    brutality: player.attributes.baseBrutality,\r\n                                    cunning: player.attributes.baseCunning,\r\n                                    deceit: player.attributes.baseDeceit,\r\n                                    madness: player.attributes.baseMadness\r\n                                });\r\n                                setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                break;\r\n                            }\r\n                            default:\r\n                                if (config.debug) {\r\n                                    throw new Error(`Action ${getGlobalState().currentAction} not supported.`);\r\n                                } else {\r\n                                    setCurrentEncounter();\r\n                                    setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                    setActionLog([]);\r\n                                }\r\n                        }\r\n                    }\r\n                setDisplayedTime(accruedTime.current);\r\n                const passedTime = timestamp - lastTime;\r\n                const adjustedTime = passedTime * (manualSpeedUpActive.current ? getManualSpeedMultiplier() : 1);\r\n                if (Math.min(accruedTime.current + adjustedTime, _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration)) === 0) {\r\n                    if (accruedTime.current + adjustedTime === 0) {\r\n                        debugMessage(`Timestamp ${timestamp}, last time ${lastTime}`);\r\n                    } else {\r\n                        debugMessage(\"Action duration was 0\");\r\n                    }\r\n\r\n                }\r\n                accruedTime.current = Math.min(accruedTime.current + adjustedTime, _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration));\r\n            }\r\n            if (lastTime === timestamp) {\r\n                debugMessage(\"New and previous timestamp were identical\");\r\n            }\r\n            lastTime = timestamp;\r\n            lastFrame = requestAnimationFrame(tick);\r\n            setActionLog([...getGlobalState().actionLog]);\r\n        }\r\n\r\n        console.log(\"Adventuring Page\");\r\n        lastFrame = requestAnimationFrame(tick)\r\n        return () => {\r\n            console.log(\"Cancel frame\");\r\n            cancelAnimationFrame(lastFrame);\r\n        }\r\n    }, []);\r\n    return <div className=\"App\" style={styles.root}\r\n                onMouseOver={() => manualSpeedUpActive.current = true}\r\n                onMouseLeave={() => manualSpeedUpActive.current = false}\r\n    >\r\n        <div id=\"background\" style={{\r\n            position: \"absolute\",\r\n            zIndex: \"-10\",\r\n            overflow: \"hidden\",\r\n            height: \"100vh\",\r\n            width: \"100vw\"\r\n        }}>\r\n            <img style={styles.background} src={\"./backgrounds/parallax-demon-woods-bg.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-far-trees.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-mid-trees.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-close-trees.png\"}/>\r\n        </div>\r\n        <PlayerStats player={player} enemy={enemy}/>\r\n        <div style={{display: \"flex\", flex: \"1 0 auto\", maxHeight: \"100%\", flexDirection: \"column\"}}>\r\n            <TopSection character={player} automaticReincarnateEnabled={getGlobalState().automaticReincarnate}/>\r\n            <BottomSection state={getGlobalState()} actionLog={actionLog}\r\n                           player={player}\r\n                           enemy={enemy}\r\n                           togglePause={togglePause}\r\n                           paused={paused}\r\n                           nextActionName={nextAction}\r\n                           currentAction={currentAction}\r\n                           setNextAction={(newAction) => {\r\n                               setNextAction(getGlobalState().nextAction = newAction);\r\n                           }}\r\n                           actionTime={displayedTime}\r\n                           startManualSpeedup={props.startManualSpeedup}\r\n                           stopManualSpeedup={props.stopManualSpeedup}\r\n                           togglePause={p => setPaused(p)}\r\n            />\r\n        </div>\r\n        <EnemySidebar player={player} enemy={enemy}/>\r\n\r\n    </div>\r\n}\r\n\r\nfunction wrapLogItem(item) {\r\n    return {\r\n        uuid: v4(),\r\n        ...item\r\n    }\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useState} from \"react\";\r\nimport { Decimal } from \"decimal.js\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {Creatures} from \"../data/creatures\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddCircleOutlineRoundedIcon from '@material-ui/icons/AddCircleOutlineRounded';\r\nimport RemoveCircleOutlineRoundedIcon from '@material-ui/icons/RemoveCircleOutlineRounded';\r\nimport {getCharacter, getGlobalState, resetDebug, saveKey} from \"../engine\";\r\nimport * as _ from \"lodash\";\r\nimport {Regions} from \"../data/Regions\";\r\nimport {config} from \"../config\";\r\n\r\nconst styles = {\r\n    root: {\r\n        position: \"absolute\",\r\n        minHeight: \"100vh\",\r\n        bottom: 0,\r\n        left: 0,\r\n        padding: \"20px\"\r\n    }\r\n}\r\n\r\nexport default function DebugUi(props) {\r\n    const [creatures, setCreatures] = useState(_.get(getGlobalState(), [\"debug\", \"creatures\"]));\r\n    const [regions, setRegions] = useState(_.get(getGlobalState(), [\"debug\", \"regions\"]));\r\n    const [minLevel, setMinLevel] = useState(_.get(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale).lt(Decimal(1)) ?\r\n        Decimal(1) : getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale)));\r\n    const [maxLevel, setMaxLevel] = useState(_.get(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale).gt(100) ?\r\n        Decimal(100) : getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale * 2)));\r\n    const [manualSpeedMultiplier, setManualSpeedMultiplier] = useState(_.get(getGlobalState(), [\"debug\", \"manualSpeedMultiplier\"],\r\n        getGlobalState().manualSpeedMultiplier));\r\n    const [playerAbsorbedPower, setPlayerAbsorbedPower] = useState(getCharacter(0).absorbedPower);\r\n\r\n    function reset() {\r\n        resetDebug();\r\n        setCreatures(_.get(getGlobalState(), [\"debug\", \"creatures\"]));\r\n        setRegions(_.get(getGlobalState(), [\"debug\", \"regions\"]));\r\n        setMinLevel(getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale).lt(Decimal(1)) ?\r\n            Decimal(1) : getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale));\r\n        setMaxLevel(getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale).gt(100) ?\r\n            Decimal(100) : getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale * 2));\r\n    }\r\n\r\n    function clearSave() {\r\n        window.localStorage.removeItem(saveKey);\r\n        alert(\"local storage cleared\");\r\n    }\r\n\r\n    return <Paper style={styles.root} disabled={true}>\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <h3>Debug Menu</h3>\r\n            </Grid>\r\n            <Grid item container xs={12}>\r\n                <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={reset}>\r\n                        Reset Debug Settings\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={clearSave}>\r\n                        Clear Save\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid item xs={3}>\r\n                    <TextField type=\"number\" value={manualSpeedMultiplier} onChange={e => {\r\n                        const newValue = Number.parseInt(e.target.value);\r\n                        _.set(getGlobalState(), [\"debug\", \"manualSpeedMultiplier\"], newValue);\r\n                        setManualSpeedMultiplier(newValue);\r\n                    }} label=\"Manual speed multiplier\"/>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TextField type=\"number\" min=\"0\" value={playerAbsorbedPower} onChange={e => {\r\n                        e.target.value = e.target.value === \"\" ? 0 : e.target.value;\r\n                        const newValue = Decimal(Number.parseInt(e.target.value));\r\n                        if(newValue.lt(0)) {\r\n                            getCharacter(0).absorbedPower = Decimal(0);\r\n                            setPlayerAbsorbedPower(Decimal(0));\r\n                        } else {\r\n                            getCharacter(0).absorbedPower = newValue;\r\n                            setPlayerAbsorbedPower(newValue);\r\n                        }\r\n\r\n                    }} label=\"Current player absorbed power\"/>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <h3>Creatures</h3>\r\n            </Grid>\r\n            <Grid container item xs={12}>\r\n                {Object.keys(Creatures).map(id => {\r\n                    const enabled = creatures[id] !== false && _.get(creatures, [id, \"enabled\"]) !== false;\r\n                    return <Grid item xs={3} style={{height: \"100%\"}}>\r\n                        <Button variant=\"contained\" color={enabled ? \"default\" : \"secondary\"}\r\n                                style={{width: \"100%\", height: \"100%\"}}\r\n                                onClick={() => {\r\n                                    _.set(getGlobalState(), [\"debug\", \"creatures\", id, \"enabled\"], !enabled);\r\n                                    setCreatures({...creatures, [id]: {enabled: !enabled}})\r\n                                }}\r\n                        >\r\n                            <img src={`./monsters/${Creatures[id].texture}`}/>\r\n                            {Creatures[id].name}\r\n                        </Button>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid item style={{textAlign: \"center\"}}>\r\n                <h4>Regions</h4>\r\n            </Grid>\r\n            <Grid container item xs={12}>\r\n                {Object.keys(Regions).map(regionId => {\r\n                    return <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                        <h4>{Regions[regionId].name}</h4>\r\n                        <Grid item container xs={12}>\r\n                            {Object.keys(Regions[regionId].encounters).map(encounterId => {\r\n                                const enabled = _.get(regions, [regionId, \"encounters\", encounterId, \"enabled\"]) !== false;\r\n                                return <Grid item xs={3}>\r\n                                    <Button variant=\"contained\" color={enabled ? \"default\" : \"secondary\"}\r\n                                            style={{width: \"100%\", height: \"100%\"}}\r\n                                            onClick={() => {\r\n                                                _.set(getGlobalState(), [\"debug\", \"regions\", regionId, \"encounters\", encounterId, \"enabled\"], !enabled);\r\n                                                setRegions({\r\n                                                    ...regions, [regionId]: _.set(regions[regionId],\r\n                                                        [\"encounters\", encounterId, \"enabled\"],\r\n                                                        !enabled\r\n                                                    )\r\n                                                })\r\n                                            }}\r\n                                    >\r\n                                        {Regions[regionId].encounters[encounterId].description}\r\n                                    </Button>\r\n                                </Grid>;\r\n                            })}\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                    <h4>Encounter rules</h4>\r\n                </Grid>\r\n                <Grid container item xs={3}>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            setMinLevel(minLevel.plus(1));\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], minLevel.plus(1));\r\n                            if (minLevel.plus(1).gt(maxLevel)) {\r\n                                setMaxLevel(minLevel.plus(1));\r\n                                _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], minLevel.plus(1));\r\n                            }\r\n                        }}>\r\n                            <AddCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        Minimum level {minLevel.toFixed()}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], minLevel.minus(1));\r\n                            setMinLevel(minLevel.minus(1));\r\n                        }}>\r\n                            <RemoveCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container item xs={3}>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            setMaxLevel(maxLevel.plus(1));\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], maxLevel.plus(1));\r\n                        }}>\r\n                            <AddCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        Maximum level {maxLevel.toFixed()}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], maxLevel.minus(1));\r\n                            setMaxLevel(maxLevel.minus(1));\r\n                            if (maxLevel.minus(1).lt(minLevel)) {\r\n                                setMinLevel(maxLevel.minus(1));\r\n                                _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], maxLevel.minus(1));\r\n                            }\r\n                        }}>\r\n                            <RemoveCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useEffect} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {clearGlobalState, getGlobalState} from \"../../engine\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nconst pkg = require(\"../../../package.json\");\r\nconst changelog = require(\"../../changelog.json\");\r\n\r\nexport default function SplashPage(props) {\r\n    useEffect(() => {\r\n        getGlobalState().paused = true;\r\n    })\r\n    const history = useHistory();\r\n    return <Paper>\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                Conquest of Hell Ver. {pkg.version} Save Compatibility NOT Guaranteed\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <Button onClick={() => {\r\n                    if (getGlobalState().currentAction === null) {\r\n                        history.push(\"/reincarnating\")\r\n                    } else {\r\n                        getGlobalState().paused = false;\r\n                        history.push(\"/adventuring\")\r\n                    }\r\n                }} variant=\"contained\" color=\"primary\">\r\n                    Start\r\n                </Button>\r\n            </Grid>\r\n            <Grid item container>\r\n                <Grid item container xs={12}>\r\n                    <Grid item xs={12}>\r\n                        {pkg.version}\r\n                    </Grid>\r\n                    <ul>\r\n                        {changelog[pkg.version].changes.map(entry => {\r\n                            return <li key={entry}>\r\n                                {entry}\r\n                            </li>\r\n                        })}\r\n                    </ul>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item xs style={{textAlign: \"center\"}}>\r\n            <Tooltip title=\"Delete your previous data and start the game\">\r\n                <Button onClick={() => {\r\n                    // eslint-disable-next-line no-restricted-globals\r\n                    const confirmed = confirm(\"This will wipe all your previous progress.\");\r\n                    if(confirmed) {\r\n                        clearGlobalState();\r\n                        if (getGlobalState().currentAction === null) {\r\n                            history.push(\"/reincarnating\")\r\n                        } else {\r\n                            getGlobalState().paused = false;\r\n                            history.push(\"/adventuring\")\r\n                        }\r\n                    }\r\n                }} variant=\"contained\" color=\"secondary\">\r\n                    Hard Reset and Start\r\n                </Button>\r\n            </Tooltip>\r\n        </Grid>\r\n    </Paper>\r\n}","import './App.css';\nimport {v4} from \"node-uuid\";\nimport * as _ from \"lodash\";\nimport React, {useEffect, useRef, useState} from \"react\";\nimport 'react-circular-progressbar/dist/styles.css';\nimport {Regions} from \"./data/Regions\";\nimport {Actions} from \"./data/Actions\";\nimport {Decimal} from \"decimal.js\";\nimport {\n    evaluateExpression,\n    getCharacter,\n    getGlobalState, getManualSpeedMultiplier,\n    loadGlobalState, reincarnateAs,\n    saveGlobalState, unpause\n} from \"./engine\";\nimport * as seedrandom from \"seedrandom\";\nimport {config} from \"./config\";\nimport {MemoryRouter, Route, Switch} from \"react-router-dom\";\nimport ReincarnationSelectionPage from \"./components/scene/ReincarnationSelectionPage\";\nimport AdventuringPage from \"./components/scene/AdventuringPage\";\nimport DebugUi from \"./components/DebugUi\";\nimport {useHotkeys} from \"react-hotkeys-hook\";\nimport {debugMessage} from \"./debugging\";\nimport SplashPage from \"./components/scene/SplashPage\";\nimport {resolveCombat} from \"./engine/combat\";\n\nloadGlobalState();\n\nconst rng = seedrandom();\n\nfunction App() {\n    const [debugUiEnabled, setDebugUiEnabled] = useState(false);\n\n    useHotkeys(\"`\", () => {\n        setDebugUiEnabled(enabled => {\n            if (config.debug) {\n                if (!enabled) {\n                    getGlobalState().paused = true;\n                }\n                saveGlobalState();\n                return !enabled\n            } else {\n                return false;\n            }\n        });\n    });\n\n    return (\n        <MemoryRouter initialEntries={[\n            getGlobalState().currentAction === \"reincarnating\" ? \"/reincarnating\" : (\n                getGlobalState().currentAction === \"adventuring\" ? \"/adventuring\" : \"/\")\n        ]} basename=\"%PUBLIC_URL%\">\n            <Switch>\n                <Route path=\"/\" exact>\n                    <SplashPage/>\n                </Route>\n                <Route path=\"/reincarnating\" exact>\n                    <ReincarnationSelectionPage reincarnate={(monster, attributes) => {\n                        reincarnateAs(monster, attributes);\n                        getGlobalState().automaticReincarnate = false;\n                        unpause();\n                    }}/>\n                </Route>\n                <Route path=\"/adventuring\" exact>\n                    <AdventuringPage\n                                     rng={rng}\n                    />\n                </Route>\n            </Switch>\n            {debugUiEnabled && <DebugUi/>}\n        </MemoryRouter>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}