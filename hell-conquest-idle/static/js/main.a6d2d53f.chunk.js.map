{"version":3,"sources":["data/creatures.js","config.js","debugging.js","character.js","engine/index.js","data/Regions.js","data/Actions.js","data/Traits.js","components/scene/ReincarnationSelectionPage.js","components/charactersheet/PowerLevelDisplay.js","components/charactersheet/CharacterAttributes.js","components/charactersheet/CharacterTraits.js","components/CharacterSheet.js","components/PlayerStats.js","components/TopSection.js","components/BottomSection.js","components/EnemySidebar.js","components/scene/AdventuringPage.js","components/DebugUi.js","components/scene/SplashPage.js","engine/CharacterCombatState.js","engine/combat/index.js","combatResult.js","App.js","reportWebVitals.js","index.js"],"names":["Creatures","bloodthirstyKnight","name","traits","appearance","texture","description","rapaciousHighwayman","enabled","condemnedSlasher","crushingSnake","skitteringHorror","deadlyHornet","tormentedDead","assertCreatureExists","id","Error","console","log","process","REACT_APP_DEBUG_MODE","config","manualSpeedup","multiplier","artifacts","REACT_APP_FEATURE_ARTIFACTS_ENABLED","actionLog","maxSize","REACT_APP_MAX_ACTIONLOG_SIZE","encounters","lesserEncounterChanceWeight","greaterEncounterChanceWeight","evenEncounterChanceWeight","lesserLevelScale","greaterLevelScale","mechanics","bonusPointsForHighestLevel","xpFromGreaterDemon","levelToPowerEquation","powerToLevelEquation","latentPowerGainOnReincarnate","maxLevel","accuracy","baseAttribute","attributeBonusScale","defense","evasion","attackDamage","pointsPerLevel","traitRank","fatigue","evasionPenaltyPerPoint","hp","base","healingPerLevel","attributes","brutality","label","globalScaling","_","icon","cunning","deceit","madness","combat","baseHitChance","attributeDamageModifier","defaultMinimumDamageMultiplier","defaultMedianDamageMultiplier","defaultMaximumDamageMultiplier","baseMinimumDamageWeight","baseMedianDamageWeight","baseMaximumDamageWeight","debug","debugMessage","apply","arguments","Character","props","this","_isPc","isPc","_name","_absorbedPower","Decimal","absorbedPower","_latentPower","latentPower","_currentHp","maximumHp","_attributes","Attributes","_combat","CombatStats","_traits","Object","keys","reduce","transformed","next","_appearance","_modifiers","modifiers","newAppearance","newTraits","other","greaterDemonScale","evaluateExpression","player","enemy","powerLevel","gte","plus","lesserDemonScale","lte","minus","powerGained","times","div","floor","modifier","push","getLevelForPower","newHealth","lt","currentHp","newLatentPower","mul","value","gt","getPowerNeededForLevel","forEach","trait","getGlobalState","unlockedTraits","character","_brutality","_cunning","_deceit","_madness","defineProperty","latentPowerMultiplier","targetCharacter","targetEvasionModifier","undefined","selfAccuracyModifier","minimum","median","max","calculateDamage","hitTypeDamageMultiplier","attributeScore","effectivePowerLevel","attributeModifier","ceil","saveKey","require","Package","expressionCache","globalState","loadGlobalState","saveGlobalState","window","localStorage","setItem","JSON","stringify","state","loaded","getItem","parse","stateReviver","creatures","regions","passivePowerIncome","unlockedMonsters","paused","currentAction","nextAction","highestLevelReached","startingTraits","currentEncounter","manualSpeedMultiplier","currentRegion","exploration","explorationTime","approachTime","combatTime","lootingTime","recoveryTime","fleeingTime","intimidateTime","reincarnationTime","characters","0","statuses","items","minimumDamageMultiplier","medianDamageMultiplier","maximumDamageMultiplier","tutorials","getCharacter","assertCharacterExists","nextMonsterId","getSpriteForCreature","expression","context","Function","call","level","$level","powerPoints","$powerPoints","key","map","parsed","Number","parseFloat","isNaN","Region","available","background","rng","encounterType","combinedEncounterChances","encounterTypeRoll","Math","double","encounterLevel","encounterOffset","difference","min","encounterDef","region","possibleEncounters","filter","encounterId","encounterEnabled","debugNotDisabled","randomKey","random","length","chooseRandomEncounter","pendingActions","enemies","flatMap","enemyDef","count","i","nextId","generateCreature","Regions","forest","type","far","mid","close","caves","mountains","desert","Actions","exploring","duration","approaching","looting","fleeing","fighting","reincarnating","recovering","intimidating","Traits","bloodrage","on_hitting","conditions","health_percentage","target","below","effects","damage_modifier","percent","cupidity","on_intimidate","chance","steal_item_chance","murderousFrenzy","add_modifier","speed","rounds","inescapableGrasp","terrifyingSkitter","on_combat_start","stunned","piercingStrike","defense_modifier","sharedPain","on_taking_damage","damage","getTrait","traitId","ReincarnationSelectionPage","useRef","history","useHistory","useState","substring","setAttributes","setStartingTraits","availableBonusPoints","values","sum","x","useEffect","Grid","container","item","xs","style","textAlign","toFixed","attribute","Tooltip","title","rank","src","Button","disabled","onClick","justify","height","variant","color","dangerouslySetInnerHTML","__html","alignItems","creatureEnabled","debugEnabled","width","reincarnate","PowerLevelDisplay","powerLevelDisplay","useMemo","Fragment","CharacterAttributes","Help","toNumber","CharacterTraits","CharacterSheet","spriteSrc","hitChances","getHitChancesAgainst","combinedHitWeights","total","powerRequiredForCurrentLevel","powerNeededForNextLevel","progressToNextLevel","round","minimumDamage","medianDamage","maximumDamage","styles","root","backgroundColor","PlayerStats","Paper","elevation","display","flex","buttons","TopSection","reincarnateEnabled","justifyContent","flexDirection","actions","alignSelf","action","maxHeight","actionProgress","overflowY","BottomSection","onMouseEnter","startManualSpeedup","onMouseLeave","stopManualSpeedup","togglePause","actionButton","details","direction","low","high","optimum","actionTime","message","uuid","result","actor","tick","effect","describeEffect","join","printActionItem","event","mod","percentModifier","text","setNextAction","nextActionName","EnemySidebar","overflow","image","position","left","AdventuringPage","className","zIndex","newAction","minHeight","bottom","padding","DebugUi","setCreatures","setRegions","minLevel","setMinLevel","setMaxLevel","setManualSpeedMultiplier","playerAbsorbedPower","setPlayerAbsorbedPower","removeItem","alert","TextField","onChange","e","newValue","parseInt","regionId","pkg","changelog","SplashPage","version","changes","entry","CharacterCombatState","party","_speed","_fatigue","lastActed","baseSpeed","currentValue","canAct","nextModifier","resolveHit","combatResult","actingCharacter","damageToInflict","hitTypeChances","damageRoll","attackResult","baseDamage","attackerDamageMultiplier","targetDefenseMultiplier","otherEffects","applyTrait","attack","damageFactor","finalDamage","combatantCombatStats","source","attackingCharacterId","targetCharacterId","damageDone","v4","generateHitCombatResult","resolveMiss","generateMissCombatResult","resolveSkippedAction","actingCharacterId","generateSkipActionResult","sourceCharacter","rankModifier","every","condition","targetPercent","targetCurrentHealth","targetMaxHealth","currentHealthPercent","conditionMet","chanceToTrigger","$rank","roll","traitEffect","percentDamageModifier","newMultiplier","selectTargets","defenseModifier","modifierToAddDefinition","effectType","effectTarget","roundDuration","ability","combatantId","existingEffect","find","makeAttackRoll","combatState","attackAccuracy","rawRoll","combatants","targetType","combatant","lastTime","seedrandom","changeCurrentAction","pushLogItem","pop","unshift","App","setCurrentEncounter","accruedTime","manualSpeedUpActive","displayedTime","setDisplayedTime","setCurrentAction","setActionLog","debugUiEnabled","setDebugUiEnabled","setPaused","useHotkeys","applyAction","current","isDamaged","shift","enemyIsLesserDemon","otherDemonIsLesserDemon","powerToGain","wrapLogItem","gainPower","addModifier","magnitude","requestAnimationFrame","timestamp","startEncounter","actionSoFar","nextEnemy","otherDemonIsGreaterDemon","gainedPower","definition","winner","parties","partyIndex","characterIndex","otherCombatant","sort","a","b","initiativeCount","wrapped","isAlive","alive","characterSpeed","acting","enemyParty","livingEnemies","attackRollResult","playerPartyDead","enemyPartyDead","resolveCombat","c","chanceToIntimidate","pow","periodicPowerIncreases","$enemy","amountToHeal","healing","adjustedTime","debugMultiplier","baseMultiplier","getManualSpeedMultiplier","initialEntries","basename","path","exact","monster","monsterId","newAttributes","currentDemon","options","m","latentPowerGain","reincarnateAs","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6d2d53f.chunk.js","sourcesContent":["export const Creatures  = {\r\n    bloodthirstyKnight: {\r\n        name: \"Bloodthirsty Knight\",\r\n        traits: [\"bloodrage\"],\r\n        appearance: \"bloodthirstyKnight\",\r\n        texture: \"01_warrior.png\",\r\n        description: \"A ruthless warrior who delighted in slaughtering whoever they encounter on the battlefield.\",\r\n    },\r\n    rapaciousHighwayman: {\r\n        name: \"Rapacious Highwayman\",\r\n        traits: [\"cupidity\"],\r\n        enabled: false,\r\n        appearance: \"rapaciousHighwayman\",\r\n        texture: \"02_hunter.png\",\r\n        description: \"A thief who stole from whomever he could get away with, from wealthy merchants to starving vagrants.\",\r\n    },\r\n    condemnedSlasher: {\r\n        name: \"Condemned Slasher\",\r\n        traits: [\"murderousFrenzy\"],\r\n        appearance: \"condemnedSlasher\",\r\n        texture: \"03_rogue.png\",\r\n        description: \"A madman who gained exquisite pleasure from seeing how many cuts could be made in a victim's body before they died.\",\r\n    },\r\n    crushingSnake: {\r\n        name: \"Crushing Snake\",\r\n        traits: [\"inescapableGrasp\"],\r\n        appearance: \"crushingSnake\",\r\n        texture: \"06_snake_01.png\",\r\n        description: \"A monstrous reptile which\",\r\n    },\r\n    skitteringHorror: {\r\n        name: \"Skittering Horror\",\r\n        traits: [\"terrifyingSkitter\"],\r\n        appearance: \"skitteringHorror\",\r\n        texture: \"10_spider.png\",\r\n        description: \"A massive spider that enjoys stalking its prey, frightening it by the sickening skittering of it's arachnid legs.\"\r\n    },\r\n    deadlyHornet: {\r\n        name: \"Deadly Hornet\",\r\n        traits: [\"piercingStrike\"],\r\n        appearance: \"deadlyHornet\",\r\n        texture: \"12_wasp.png\",\r\n        description: \"An insect whose stinger is able to pierce even metal protection.\"\r\n    },\r\n    tormentedDead: {\r\n        name: \"Tormented Dead\",\r\n        traits: [\"sharedPain\"],\r\n        appearance: \"tormentedDead\",\r\n        texture: \"29_zombie.png\",\r\n        description: \"A human denied eternal rest and in agony from its ruined flesh.\"\r\n    }\r\n}\r\n\r\nexport function assertCreatureExists(id) {\r\n    if(!Creatures[id]) {\r\n        throw new Error(`No creature with id ${id} is defined`);\r\n    }\r\n}","import * as _ from \"lodash\";\r\nconsole.log(process.env.REACT_APP_DEBUG_MODE, typeof process.env.REACT_APP_DEBUG_MODE);\r\n\r\nexport const config = {\r\n    manualSpeedup: {\r\n        enabled: true,\r\n        multiplier: 2\r\n    },\r\n    artifacts: {\r\n        enabled: process.env.REACT_APP_FEATURE_ARTIFACTS_ENABLED || false\r\n    },\r\n    actionLog: {\r\n        maxSize:  process.env.REACT_APP_MAX_ACTIONLOG_SIZE || 20,\r\n    },\r\n    encounters: {\r\n        lesserEncounterChanceWeight: 10,\r\n        greaterEncounterChanceWeight: 10,\r\n        evenEncounterChanceWeight: 80,\r\n        lesserLevelScale: 3, // A demon is \"lesser\" than another when its level is this much lower.\r\n        greaterLevelScale: 1 // A demon is \"greater\" than another when its level is this much higher.\r\n    },\r\n    mechanics: {\r\n        bonusPointsForHighestLevel: 2,\r\n        xpFromGreaterDemon: \"$enemy.powerLevel\",\r\n        levelToPowerEquation: \"$level.eq(1) ? Decimal(0) : Decimal(5).pow($level.minus(1).toNumber())\",\r\n        powerToLevelEquation: \"Decimal(0).eq($powerPoints) ? Decimal(1) : Decimal.log($powerPoints, 5).plus(1).floor()\",\r\n        latentPowerGainOnReincarnate: \"player.powerLevel.minus(1).pow(2).times(10)\",\r\n        maxLevel: 100,\r\n        accuracy: { // Determines how accuracy rolls work\r\n            baseAttribute: \"deceit\",\r\n            attributeBonusScale: 10\r\n        },\r\n        defense: {\r\n            baseAttribute: \"brutality\",\r\n            attributeBonusScale: 10\r\n        },\r\n        evasion: {\r\n            baseAttribute: \"cunning\",\r\n            attributeBonusScale: 10\r\n        },\r\n        attackDamage: {\r\n            pointsPerLevel: 10,\r\n            baseAttribute: \"brutality\",\r\n            attributeBonusScale: 10\r\n        },\r\n        traitRank: {\r\n            baseAttribute: \"madness\",\r\n            attributeBonusScale: 10\r\n        },\r\n        fatigue: {\r\n            evasionPenaltyPerPoint: 2\r\n        },\r\n        hp: {\r\n            base: 50,\r\n            pointsPerLevel: 50,\r\n            healingPerLevel: 100\r\n        }\r\n    },\r\n    attributes: {\r\n        brutality: {\r\n            label: \"Brutality\",\r\n            globalScaling: 1,\r\n            description: _.template(`Brutality is how savage and ruthless a Demon is. It gives a \\${5 * rank}% bonus to attack damage, defense and intimidation checks.`),\r\n            icon: \"icons/icons-92.png\"\r\n        },\r\n        cunning: {\r\n            label: \"Cunning\",\r\n            globalScaling: 1,\r\n            description: _.template(\"Cunning is how quick thinking a Demon is. It gives a ${5 * rank}% bonus to Evasion, and non-combat encounters.\"),\r\n            icon: \"icons/icons-24.png\"\r\n        },\r\n        deceit: {\r\n            label: \"Deceit\",\r\n            globalScaling: 1,\r\n            description: _.template(\"Deceit is how underhanded and manipulative a Demon is. It gives a ${5 * rank}% bonus to Accuracy and social encounters.\"),\r\n            icon: \"icons/icons-17.png\"\r\n        },\r\n        madness: {\r\n            label: \"Madness\",\r\n            globalScaling: 1,\r\n            description: _.template(\"Madness is how disconnected from the limits of reality the Demon is. It gives a ${5 * rank}% bonus to the effect of wielded Artifacts and the effects of Traits.\"),\r\n            icon: \"icons/icons-124.png\"\r\n        }\r\n    },\r\n    combat: {\r\n        baseHitChance: 90,\r\n        attributeDamageModifier: .02,\r\n        defaultMinimumDamageMultiplier: .5,\r\n        defaultMedianDamageMultiplier: 1,\r\n        defaultMaximumDamageMultiplier: 1.5,\r\n        baseMinimumDamageWeight: 20,\r\n        baseMedianDamageWeight: 60,\r\n        baseMaximumDamageWeight: 20\r\n    },\r\n    debug: process.env.REACT_APP_DEBUG_MODE === \"true\"\r\n}","import {config} from \"./config\";\r\n\r\nexport function debugMessage() {\r\n    if(config.debug) {\r\n        console.debug.apply(null, arguments);\r\n    }\r\n}","import {config} from \"./config\";\r\nimport {evaluateExpression, getGlobalState, getLevelForPower, getPowerNeededForLevel} from \"./engine\";\r\nimport {Creatures} from \"./data/creatures\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nexport class Character {\r\n    constructor(props) {\r\n        this._isPc = props.isPc || props._isPc;\r\n        this.id = props.id;\r\n        this._name = props.name || props._name;\r\n        this._absorbedPower = Decimal(props.absorbedPower || props._absorbedPower || 0);\r\n        this._latentPower = Decimal(props.latentPower || props._latentPower || 0);\r\n        this._currentHp = Decimal(props._currentHp || this.maximumHp);\r\n        this._attributes = new Attributes(props.attributes || props._attributes, this);\r\n        this._combat = new CombatStats(props.combat || props._combat, this);\r\n        this._traits = Object.keys(props.traits || props._traits).reduce((transformed, next) => {\r\n            transformed[next] = Decimal((props.traits || props._traits)[next]);\r\n            return transformed;\r\n        }, {});\r\n        this._appearance = props.appearance || props._appearance;\r\n        this._modifiers = props.modifiers || props._modifiers || [];\r\n    }\r\n\r\n    get isPc() {\r\n        return this._isPc;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get powerLevel() {\r\n        return getLevelForPower(this._absorbedPower);\r\n    }\r\n\r\n    get currentHp() {\r\n        return Decimal(this._currentHp);\r\n    }\r\n\r\n    set currentHp(newHealth) {\r\n        if (this.maximumHp.lt(newHealth)) {\r\n            this._currentHp = this.maximumHp;\r\n        } else {\r\n            this._currentHp = newHealth;\r\n        }\r\n    }\r\n\r\n    get alive() {\r\n        return this.currentHp > 0;\r\n    }\r\n\r\n    get latentPower() {\r\n        return this._latentPower;\r\n    }\r\n\r\n    set latentPower(newLatentPower) {\r\n        this._latentPower = newLatentPower;\r\n    }\r\n\r\n    get maximumHp() {\r\n        return this.powerLevel\r\n            .mul(this.latentPower.div(100).plus(1))\r\n            .mul(config.mechanics.hp.pointsPerLevel)\r\n            .floor();\r\n    }\r\n\r\n    get attributes() {\r\n        return this._attributes;\r\n    }\r\n\r\n    get combat() {\r\n        return this._combat;\r\n    }\r\n\r\n    get traits() {\r\n        return this._traits;\r\n    }\r\n\r\n    set traits(newTraits) {\r\n        this._traits = newTraits;\r\n    }\r\n\r\n    get appearance() {\r\n        return this._appearance;\r\n    }\r\n\r\n    reincarnate(newAppearance, newTraits) {\r\n        this._appearance = newAppearance;\r\n        this._traits = newTraits;\r\n    }\r\n\r\n    otherDemonIsGreaterDemon(other) {\r\n        const greaterDemonScale = evaluateExpression(config.encounters.greaterLevelScale, {\r\n            player: this,\r\n            enemy: other\r\n        });\r\n        return other.powerLevel.gte(this.powerLevel.plus(greaterDemonScale));\r\n    }\r\n\r\n    otherDemonIsLesserDemon(other) {\r\n        const lesserDemonScale = evaluateExpression(config.encounters.lesserLevelScale, {\r\n            player: this,\r\n            enemy: other\r\n        });\r\n        return other.powerLevel.lte(this.powerLevel.minus(lesserDemonScale));\r\n    }\r\n\r\n    gainPower(powerGained) {\r\n        powerGained = powerGained.times(this.latentPower.div(100).plus(1)).floor();\r\n        this.absorbedPower = this.absorbedPower.plus(powerGained);\r\n        return powerGained;\r\n    }\r\n\r\n    get healing() {\r\n        return Decimal(this.powerLevel.times(config.mechanics.hp.healingPerLevel));\r\n    }\r\n\r\n    get absorbedPower() {\r\n        return this._absorbedPower;\r\n    }\r\n\r\n    set absorbedPower(value) {\r\n        this._absorbedPower = value;\r\n        if (getLevelForPower(this._absorbedPower).gt(config.mechanics.maxLevel)) {\r\n            this._absorbedPower = getPowerNeededForLevel(config.mechanics.maxLevel);\r\n        }\r\n        if (this.appearance) {\r\n            Creatures[this.appearance].traits.forEach(trait => {\r\n                this._traits[trait] = getLevelForPower(this._absorbedPower);\r\n                getGlobalState().unlockedTraits[trait] = getLevelForPower(this._absorbedPower);\r\n            });\r\n        }\r\n    }\r\n\r\n    get speed() {\r\n        return Decimal(100);\r\n    }\r\n\r\n    addModifier(modifier) {\r\n        this._modifiers.push(modifier);\r\n    }\r\n\r\n    get modifiers() {\r\n        return this._modifiers;\r\n    }\r\n}\r\n\r\nclass Attributes {\r\n    constructor(attributes, character) {\r\n        this._brutality = attributes.brutality || attributes._brutality || 0;\r\n        this._cunning = attributes.cunning || attributes._cunning || 0;\r\n        this._deceit = attributes.deceit || attributes._deceit || 0;\r\n        this._madness = attributes.madness || attributes._madness || 0;\r\n        Object.defineProperty(this, \"character\", {\r\n            value: () => character\r\n        })\r\n    }\r\n\r\n    get brutality() {\r\n        const latentPowerMultiplier = this.character().latentPower.div(100).plus(1);\r\n        return Decimal(this._brutality).times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get cunning() {\r\n        const latentPowerMultiplier = this.character().latentPower.div(100).plus(1);\r\n        return Decimal(this._cunning).times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get deceit() {\r\n        const latentPowerMultiplier = this.character().latentPower.div(100).plus(1);\r\n        return Decimal(this._deceit).times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get madness() {\r\n        const latentPowerMultiplier = this.character().latentPower.div(100).plus(1);\r\n        return Decimal(this._madness).times(latentPowerMultiplier).floor();\r\n    }\r\n}\r\n\r\nclass CombatStats {\r\n    constructor(props, character) {\r\n        this.character = function () {\r\n            return character;\r\n        }\r\n        this.fatigue = 0;\r\n    }\r\n\r\n    getHitChancesAgainst(targetCharacter) {\r\n        const targetEvasionModifier = targetCharacter !== undefined ? targetCharacter.attributes[config.mechanics.evasion.baseAttribute]\r\n            .times(config.mechanics.evasion.attributeBonusScale) : Decimal(0);\r\n        const selfAccuracyModifier = this.character().attributes[config.mechanics.accuracy.baseAttribute]\r\n            .times(config.mechanics.accuracy.attributeBonusScale);\r\n        return {\r\n            minimum: Decimal(config.combat.baseMinimumDamageWeight)\r\n                .plus(targetEvasionModifier.times(2)).floor(),\r\n            median: Decimal(config.combat.baseMedianDamageWeight)\r\n                .plus(targetEvasionModifier).plus(selfAccuracyModifier).floor(),\r\n            max: Decimal(config.combat.baseMaximumDamageWeight)\r\n                .plus(selfAccuracyModifier.times(2))\r\n                .floor()\r\n        }\r\n    }\r\n\r\n    get minimumDamage() {\r\n        return calculateDamage(config.combat.defaultMinimumDamageMultiplier, this.character().powerLevel, this.character().latentPower, this.character().attributes.brutality);\r\n    }\r\n\r\n    get medianDamage() {\r\n        return calculateDamage(config.combat.defaultMedianDamageMultiplier, this.character().powerLevel, this.character().latentPower, this.character().attributes.brutality);\r\n    }\r\n\r\n    get maximumDamage() {\r\n        return calculateDamage(config.combat.defaultMaximumDamageMultiplier, this.character().powerLevel, this.character().latentPower, this.character().attributes.brutality);\r\n    }\r\n\r\n    get canAct() {\r\n        return true;\r\n    }\r\n}\r\n\r\nfunction calculateDamage(hitTypeDamageMultiplier, powerLevel, latentPower, attributeScore) {\r\n    const effectivePowerLevel = powerLevel.times(latentPower.div(100).plus(1));\r\n    const attributeModifier = attributeScore.times(config.combat.attributeDamageModifier).div(100).plus(1);\r\n    return effectivePowerLevel\r\n        .times(config.mechanics.attackDamage.pointsPerLevel)\r\n        .times(hitTypeDamageMultiplier)\r\n        .times(attributeModifier).ceil();\r\n}","import * as _ from \"lodash\";\r\nimport {assertCreatureExists, Creatures} from \"../data/creatures\";\r\nimport {debugMessage} from \"../debugging\";\r\nimport { Decimal } from \"decimal.js\";\r\nimport {Character} from \"../character\";\r\nimport {config} from \"../config\";\r\nimport * as Package from \"../../package.json\";\r\n\r\nexport const saveKey = require(\"md5\")(`hell-conquest-${Package.version}`);\r\n\r\nconst expressionCache = {};\r\n\r\nlet globalState = loadGlobalState()\r\n\r\nexport function getGlobalState() {\r\n    return globalState;\r\n}\r\n\r\nexport function saveGlobalState() {\r\n    window.localStorage.setItem(saveKey, JSON.stringify(globalState));\r\n}\r\n\r\nexport function loadGlobalState(state) {\r\n    const loaded = window.localStorage.getItem(saveKey);\r\n    return loaded ? JSON.parse(loaded, stateReviver) : {\r\n        debug: {\r\n            creatures: {},\r\n            regions: {}\r\n        },\r\n        passivePowerIncome: Decimal(0),\r\n        unlockedMonsters: {},\r\n        unlockedTraits: {},\r\n        paused: true,\r\n        currentAction: null,\r\n        nextAction: null,\r\n        id: 0,\r\n        highestLevelReached: Decimal(1),\r\n        startingTraits: {},\r\n        currentEncounter: null,\r\n        manualSpeedMultiplier: config.manualSpeedup.multiplier,\r\n        currentRegion: \"forest\",\r\n        actionLog: [],\r\n        exploration: {\r\n            explorationTime: 15 * 1000,\r\n            approachTime: 15 * 1000,\r\n            combatTime: 5 * 1000,\r\n            lootingTime: 15 * 1000,\r\n            recoveryTime: 2 * 1000,\r\n            fleeingTime: 15 * 1000,\r\n            intimidateTime: 15 * 1000,\r\n            reincarnationTime: 1\r\n        },\r\n        characters: {\r\n            0: new Character({\r\n                id: 0,\r\n                isPc: true,\r\n                name: \"You\",\r\n                powerLevel: Decimal(1),\r\n                absorbedPower: Decimal(0),\r\n                appearance: \"\",\r\n                statuses: {},\r\n                traits: {},\r\n                items: [],\r\n                attributes: {\r\n                    brutality: Decimal(0),\r\n                    cunning: Decimal(0),\r\n                    deceit: Decimal(0),\r\n                    madness: Decimal(0)\r\n                },\r\n                combat: {\r\n                    fatigue: 0,\r\n                    minimumDamageMultiplier: .5,\r\n                    medianDamageMultiplier: 1,\r\n                    maximumDamageMultiplier: 1.5\r\n                }\r\n            })\r\n        },\r\n        tutorials: {}\r\n    }\r\n}\r\n\r\nexport function getCharacter(id) {\r\n    assertCharacterExists(id);\r\n    return globalState.characters[id];\r\n}\r\n\r\nlet nextMonsterId = 1;\r\n\r\nexport function generateCreature(id, powerLevel, rng) {\r\n    assertCreatureExists(id);\r\n    if (config.debug) {\r\n        debugMessage(`Generating creature with id ${id} and level ${powerLevel}`);\r\n    }\r\n    if (powerLevel === undefined) {\r\n        throw new Error(\"No powerLevel\");\r\n    }\r\n    if (Number.isNaN(powerLevel)) {\r\n        throw new Error(\"Level cannot be NaN\");\r\n    }\r\n    const nextId = nextMonsterId++;\r\n    globalState.characters[nextId] = new Character({\r\n        id: nextId,\r\n        ...Creatures[id],\r\n        latentPower: evaluateExpression(config.mechanics.latentPowerGainOnReincarnate, {\r\n            player: {\r\n                powerLevel\r\n            }\r\n        }).times(5),\r\n        traits: Creatures[id].traits.reduce((traits, next) => {\r\n            traits[next] = powerLevel;\r\n            return traits;\r\n        }, {}),\r\n        absorbedPower: getPowerNeededForLevel(powerLevel),\r\n        artifacts: [],\r\n        statuses: [],\r\n        attributes: {\r\n            brutality: powerLevel.div(2).floor(),\r\n            cunning: powerLevel.div(2).floor(),\r\n            deceit: powerLevel.div(2).floor(),\r\n            madness: powerLevel.div(2).floor(),\r\n        },\r\n        combat: {\r\n            fatigue: 0,\r\n            minimumDamageMultiplier: .5,\r\n            medianDamageMultiplier: 1,\r\n            maximumDamageMultiplier: 1.5\r\n        }\r\n    });\r\n    saveGlobalState();\r\n    return globalState.characters[nextId];\r\n}\r\n\r\n\r\nexport function getSpriteForCreature(name) {\r\n    assertCreatureExists(name);\r\n    return `monsters/${Creatures[name].texture}`;\r\n}\r\n\r\nfunction assertCharacterExists(id) {\r\n    if (!globalState.characters[id]) {\r\n        throw new Error(`No creature exists for '${id}'`);\r\n    }\r\n}\r\n\r\nexport function evaluateExpression(expression, context) {\r\n    if(expression === null || expression === undefined) {\r\n        return expression;\r\n    }\r\n    if (!expressionCache[expression]) {\r\n        expressionCache[expression] = new Function(\"context\", `with(context) {return ${expression}}`);\r\n    }\r\n    context.Decimal = Decimal;\r\n    return expressionCache[expression].call(null, context);\r\n}\r\n\r\nexport function getPowerNeededForLevel(level) {\r\n    return evaluateExpression(config.mechanics.levelToPowerEquation, {\r\n        $level: Decimal(level)\r\n    });\r\n}\r\n\r\nexport function getLevelForPower(powerPoints) {\r\n    return evaluateExpression(config.mechanics.powerToLevelEquation, {\r\n        $powerPoints: Decimal(powerPoints)\r\n    });\r\n}\r\n\r\nexport function reincarnateAs(monsterId, newAttributes) {\r\n    const player = getCharacter(0);\r\n    // Improve your starting traits\r\n    const currentDemon = Creatures[player.appearance];\r\n    if (currentDemon) {\r\n        currentDemon.traits.forEach(trait => {\r\n            if (!globalState.unlockedTraits[trait] || player.powerLevel.gt(globalState.unlockedTraits[trait])) {\r\n                globalState.unlockedTraits[trait] = player.powerLevel;\r\n            }\r\n        });\r\n    }\r\n\r\n    if(Decimal(globalState.highestLevelReached).lt(player.powerLevel)) {\r\n        globalState.highestLevelReached = player.powerLevel;\r\n    }\r\n\r\n    if (monsterId === \"random\") {\r\n        const options = _.difference(Object.keys(Creatures).filter(m => {\r\n            return _.get(globalState, [\"debug\", \"creatures\", m, \"enabled\"], true) &&\r\n                Creatures[m].enabled !== false\r\n        }), Object.keys(globalState.unlockedMonsters)\r\n            .filter(m => globalState.unlockedMonsters[m]));\r\n        monsterId = options[Math.floor(Math.random() * options.length)];\r\n    }\r\n\r\n    // Update player attributes\r\n    Object.keys(player.attributes).forEach(attribute => {\r\n        player.attributes[attribute] = Decimal(newAttributes[attribute.substring(1)]);\r\n    })\r\n\r\n    // Add your level to your starting energy.\r\n    const latentPowerGain = evaluateExpression(config.mechanics.latentPowerGainOnReincarnate, {\r\n        player\r\n    })\r\n    globalState.characters[0].latentPower = globalState.characters[0].latentPower.plus(latentPowerGain);\r\n    globalState.characters[0].absorbedPower = Decimal(0);\r\n    globalState.characters[0].reincarnate(monsterId, globalState.startingTraits);\r\n    globalState.unlockedMonsters[monsterId] = true;\r\n\r\n    getCharacter(0).traits = Object.keys(globalState.startingTraits).reduce((startingTraits, trait) => {\r\n        startingTraits[trait] = globalState.unlockedTraits[trait];\r\n        return startingTraits;\r\n    }, {});\r\n    Creatures[monsterId].traits.forEach(trait => {\r\n        getCharacter(0).traits[trait] = 1;\r\n    })\r\n\r\n    globalState.currentEncounter = null;\r\n    globalState.currentAction = \"reincarnating\";\r\n    getCharacter(0).currentHp = getCharacter(0).maximumHp;\r\n    getGlobalState().passivePowerIncome = Decimal(0);\r\n\r\n    saveGlobalState();\r\n}\r\n\r\nexport function unpause() {\r\n    globalState.paused = false;\r\n}\r\n\r\nfunction stateReviver(key, value) {\r\n    switch (key) {\r\n        case \"characters\":\r\n            return Object.keys(value).reduce((characters, id) => {\r\n                characters[id] = new Character(value[id]);\r\n                return characters;\r\n            }, {});\r\n        case \"enemies\":\r\n            return Object.keys(value).map(character => {\r\n                return new Character(value[character]);\r\n            });\r\n        case \"paused\":\r\n            return false;\r\n        case \"passivePowerIncome\":\r\n            return Decimal(value);\r\n        case \"value\":\r\n            const parsed = Number.parseFloat(value);\r\n            if (Number.isNaN(parsed)) {\r\n                return value;\r\n            }\r\n            return Decimal(value);\r\n        default:\r\n            return value;\r\n    }\r\n}\r\n\r\nexport function resetDebug() {\r\n    globalState.debug.creatures = {};\r\n    globalState.debug.regions = {};\r\n}\r\n\r\nexport function getManualSpeedMultiplier() {\r\n    const debugMultiplier = _.get(globalState, [\"debug\", \"manualSpeedMultiplier\"]);\r\n    const baseMultiplier = globalState.manualSpeedMultiplier;\r\n    return debugMultiplier || baseMultiplier;\r\n}","import * as _ from \"lodash\";\r\nimport {evaluateExpression, generateCreature, getGlobalState} from \"../engine\";\r\nimport {config} from \"../config\";\r\nimport {debugMessage} from \"../debugging\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nclass Region {\r\n    constructor(name, available, encounters, background) {\r\n        this.name = name;\r\n        this.encounters = encounters;\r\n        this.background = background;\r\n    }\r\n\r\n    startEncounter(player, rng) {\r\n        let encounterType;\r\n        const combinedEncounterChances = config.encounters.lesserEncounterChanceWeight +\r\n            config.encounters.greaterLevelScale +\r\n            config.encounters.evenEncounterChanceWeight;\r\n        const encounterTypeRoll = Math.floor(rng.double() * combinedEncounterChances) + 1;\r\n        if (encounterTypeRoll <= config.encounters.lesserEncounterChanceWeight) {\r\n            encounterType = \"lesser\";\r\n        } else if (encounterTypeRoll <= config.encounters.lesserEncounterChanceWeight + config.encounters.evenEncounterChanceWeight) {\r\n            encounterType = \"even\";\r\n        } else {\r\n            encounterType = \"greater\";\r\n        }\r\n        let encounterLevel = player.powerLevel;\r\n        switch (encounterType) {\r\n            case \"greater\": {\r\n                const encounterOffset = Math.floor(rng.double() * config.encounters.greaterLevelScale);\r\n                encounterLevel = encounterLevel.plus(encounterOffset);\r\n                break;\r\n            }\r\n            case \"lesser\": {\r\n                const encounterOffset = Math.floor(rng.double() * config.encounters.lesserLevelScale);\r\n                encounterLevel = Decimal.max(1, encounterLevel.minus(encounterOffset));\r\n                break;\r\n            }\r\n            case \"even\": {\r\n                const difference = Math.max(config.encounters.greaterLevelScale, config.encounters.lesserLevelScale) - Math.min(config.encounters.greaterLevelScale, config.encounters.lesserLevelScale) + 1;\r\n                const encounterOffset = Math.floor(rng.double() * difference) - difference;\r\n                encounterLevel = Decimal.max(1, encounterLevel.plus(encounterOffset));\r\n            }\r\n        }\r\n        if (config.debug) {\r\n            debugMessage(`Generated encounter level is ${encounterLevel}`);\r\n        }\r\n        const encounterDef = chooseRandomEncounter(this);\r\n        if (encounterDef === undefined) {\r\n            throw new Error(\"No encounter selected\");\r\n        }\r\n        const encounter = {\r\n            encounterLevel,\r\n            ...encounterDef,\r\n            pendingActions: [],\r\n            enemies: encounterDef.enemies.flatMap(enemyDef => _.range(0, enemyDef.count).map(i => {\r\n                return generateCreature(enemyDef.name, encounterLevel, rng)\r\n            }))\r\n        };\r\n        return encounter;\r\n    }\r\n}\r\n\r\nexport const Regions = {\r\n    forest: new Region(\"The Prey's Lament\", true, {\r\n            bloodthirstyKnight: {\r\n                description: \"1 Bloodthirsty Knight\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"bloodthirstyKnight\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            rapaciousHighwayman: {\r\n                description: \"1 Rapacious Highwayman\",\r\n                type: \"combat\",\r\n                enabled: false,\r\n                enemies: [\r\n                    {\r\n                        name: \"rapaciousHighwayman\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            crushingSnake: {\r\n                description: \"1 Crushing Snake\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"crushingSnake\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            skitteringHorror: {\r\n                description: \"1 Skittering Horror\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"skitteringHorror\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            deadlyHornet: {\r\n                description: \"1 Deadly Hornet\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"deadlyHornet\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            tormentedDead: {\r\n                description: \"1 Tormented Dead\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"tormentedDead\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            background: \"backgrounds/parallax-demon-woods-bg.png\",\r\n            far: \"backgrounds/parallax-demon-woods-far-trees.png\",\r\n            mid: \"backgrounds/parallax-demon-woods-mid-trees.png\",\r\n            close: \"backgrounds/parallax-demon-woods-close-trees.png\"\r\n        }\r\n    ),\r\n    caves: new Region(\"The Bottomless Caverns\", false, {}, {}),\r\n    mountains: new Region(\"The Crags of Futility\", false, {}, {}),\r\n    desert: new Region(\"The Desert of Isolation\", false, {}, {})\r\n}\r\n\r\nfunction chooseRandomEncounter(region) {\r\n    const possibleEncounters = Object.keys(region.encounters).filter(encounterId => {\r\n        debugMessage(`Determining if '${encounterId}' is enabled.`);\r\n        const encounterEnabled = region.encounters[encounterId].enabled !== false;\r\n        if (!encounterEnabled) {\r\n            debugMessage(`Encounter '${encounterId}' disabled`);\r\n        }\r\n        const debugNotDisabled = _.get(getGlobalState(), [\"debug\", \"regions\", region.id, \"encounters\", encounterId]) !== false;\r\n        if (!debugNotDisabled) {\r\n            debugMessage(`Encounter '${encounterId}' disabled by debug.`);\r\n        }\r\n        return encounterEnabled && debugNotDisabled;\r\n    });\r\n    const randomKey = possibleEncounters[Math.floor(Math.random() * Object.keys(possibleEncounters).length)];\r\n    debugMessage(`Selected encounter '${randomKey}'`);\r\n    return region.encounters[randomKey];\r\n}","import React from \"react\";\r\n\r\nexport const Actions = {\r\n    exploring: {\r\n        id: \"exploring\",\r\n        duration: \"exploration.explorationTime\",\r\n        description: \"Exploring...\"\r\n    },\r\n    approaching: {\r\n        id: \"approaching\",\r\n        duration: \"exploration.approachTime\",\r\n        description: \"Approaching Enemy...\"\r\n    },\r\n    looting: {\r\n        id: \"looting\",\r\n        duration: \"exploration.lootingTime\",\r\n        description: \"Looting the body...\"\r\n    },\r\n    fleeing: {\r\n        id: \"fleeing\",\r\n        duration: \"exploration.fleeingTime\",\r\n        description: \"Fleeing in terror!\"\r\n    },\r\n    fighting: {\r\n        id: \"fighting\",\r\n        duration: \"exploration.combatTime\",\r\n        description: \"In Combat!\",\r\n    },\r\n    reincarnating: {\r\n        id: \"resurrecting\",\r\n        duration: \"exploration.reincarnationTime\",\r\n        description: \"Reincarnating...\"\r\n    },\r\n    recovering: {\r\n        id:\"recovering\",\r\n        duration: \"exploration.recoveryTime\",\r\n        description: \"Healing...\"\r\n    },\r\n    intimidating: {\r\n        id:\"intimidating\",\r\n        duration: \"exploration.intimidateTime\",\r\n        description: \"Intimidating...\"\r\n    }\r\n}","import * as _ from \"lodash\";\r\n// FIXME: Implement validation\r\nexport const Traits = {\r\n    bloodrage: {\r\n        name: \"Blood Rage\",\r\n        icon: \"icons/icons-139.png\",\r\n        description: _.template(\"This demon's unquenchable thirst for blood gives a <span style='color: red'>${rank.times(25)}%</span> bonus to Damage against enemies with <span style='color: red'>25% or less</span> health.\"),\r\n        on_hitting: {\r\n            conditions : {\r\n                health_percentage: {\r\n                    target: \"target\",\r\n                    below: 25\r\n                }\r\n            },\r\n            effects: {\r\n                damage_modifier: {\r\n                    percent: \"$rank.times(25)\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    cupidity: {\r\n        name: \"Cupidity\",\r\n        icon: \"icons/icons-2503.png\",\r\n        description: _.template(\"When this demon successfully Intimidates another demon, it gains a <span style='color: red'>${rank}%</span> chance to seize the intimidated demon's Artifacts as though it were killed.\"),\r\n        on_intimidate: {\r\n            conditions: {\r\n                chance: \"$rank\"\r\n            },\r\n            effects: {\r\n                steal_item_chance: {\r\n                    target: \"enemies\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    murderousFrenzy: {\r\n        name: \"Murderous Frenzy\",\r\n        icon: \"icons/icons-118.png\",\r\n        description: _.template(\"After hitting with an attack this Demon frenzies, gaining a <span style='color: orangered'>${rank}%</span> bonus to <span style='color: lightgreen'>Attack Speed</span> for 2 rounds.\"),\r\n        on_hitting: {\r\n            effects: {\r\n                add_modifier: {\r\n                    speed: {\r\n                        target: \"attacker\",\r\n                        percent: \"$rank\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: 2\r\n            }\r\n        }\r\n    },\r\n    inescapableGrasp: {\r\n        name: \"Inescapable Grasp\",\r\n        icon: \"icons/icons-2221.png\",\r\n        description: _.template(\"You bind your victims when you strike, causing a <span style='color: orangered'>${rank}%</span> penalty to their <span style='color: lightgreen'>Action Speed</span> for 2 rounds.\"),\r\n        on_hitting: {\r\n            effects: {\r\n                add_modifier: {\r\n                    speed: {\r\n                        target: \"attacked\",\r\n                        percent: \"$rank.times(-1)\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: 2\r\n            }\r\n        }\r\n    },\r\n    terrifyingSkitter: {\r\n        name: \"Terrifying Skitter\",\r\n        icon: \"icons/icons-2260.png\",\r\n        description: _.template(\"The sickening sound of your feet on the ground unnerves even other demons, making the enemy <span style='color: violet'>Terrified</span> for <span style='color: lightblue'>${rank.div(10).round(0, 0).plus(1).toFixed()}</span> round(s), stunning them.\"),\r\n        on_combat_start: {\r\n            effects: {\r\n                add_modifier: {\r\n                    stunned: {\r\n                        target: \"all_enemies\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: \"$rank.div(10).round(0, 0).plus(1)\"\r\n            }\r\n        }\r\n    },\r\n    piercingStrike: {\r\n        name: \"Piercing Strike\",\r\n        icon: \"icons/icons-113.png\",\r\n        description: _.template(\"Your relentless attacks are designed to get around the enemy's defenses. Against your attacks the enemy's <span style='color: lightgreen'>Defense</span> is reduced by <span style='color: orangered'>${rank}%</span>\"),\r\n        on_hitting: {\r\n            effects: {\r\n                defense_modifier: {\r\n                    percent: \"$rank.times(-1)\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    sharedPain: {\r\n        name: \"Shared Pain\",\r\n        icon: \"icons/icons-146.png\",\r\n        description: _.template(\"You return the pain of injuries inflicted on you, reflecting <span style='color: orangered'>${rank.times(5).toFixed()}%</span> of the damage back.\"),\r\n        on_taking_damage: {\r\n            effects: {\r\n                target: \"attacker\",\r\n                damage: \"$rank.times(5).div(100).times(attackDamage)\"\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTrait(traitId) {\r\n    return Traits[traitId];\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {Creatures} from \"../../data/creatures\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport {evaluateExpression, getCharacter, getGlobalState, getLevelForPower, getSpriteForCreature} from \"../../engine\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport * as _ from \"lodash\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {config} from \"../../config\";\r\nimport \"../../App.css\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nexport default function ReincarnationSelectionPage(props) {\r\n    const globalState = useRef(getGlobalState());\r\n    const history = useHistory();\r\n    const player = getCharacter(0);\r\n    const [attributes, setAttributes] = useState(Object.keys(player.attributes)\r\n        .reduce((attributes, next) => {\r\n            attributes[next.substring(1)] = player.attributes[next];\r\n            return attributes;\r\n        }, {}));\r\n    const [startingTraits, setStartingTraits] = useState(getGlobalState().startingTraits);\r\n    const newLatentPower = getCharacter(0).latentPower.plus(\r\n        evaluateExpression(config.mechanics.latentPowerGainOnReincarnate, {\r\n            player\r\n        }));\r\n    const spendableBonusPoints = Decimal(getGlobalState().highestLevelReached).times(config.mechanics.bonusPointsForHighestLevel);\r\n    const availableBonusPoints= spendableBonusPoints\r\n        .minus(Object.values(attributes).reduce((sum, next) => Decimal(sum).plus(next)))\r\n        .minus(Object.values(startingTraits).filter(x => x).length * 4);\r\n\r\n    useEffect(() => {\r\n        getGlobalState().paused = true;\r\n    }, []);\r\n\r\n    return <Grid container>\r\n        <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n            <strong>Reincarnate</strong>\r\n        </Grid>\r\n        <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n            Select a soul to reincarnate as.\r\n            <br/>\r\n            You will reincarnate with a <strong>{newLatentPower.toFixed()}%</strong> bonus to Attributes, Damage and\r\n            absorbed power due to your Latent Power acquired from previous reincarnations.\r\n            <br/>\r\n        </Grid>\r\n\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Spend {availableBonusPoints.toFixed()} {player.powerLevel.gt(1) ? \"points\" : \"point\"} on\r\n                    bonuses </strong> (Reach higher levels to gain more points)\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Attributes</strong>\r\n            </Grid>\r\n            {Object.keys(config.attributes).map(attribute => {\r\n                return <Grid item xs={3}>\r\n                    <Tooltip title={config.attributes[attribute].description({\r\n                        rank: Decimal(attributes[attribute]).toFixed()\r\n                    })}>\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <img src={config.attributes[attribute].icon}/>\r\n                            <div>\r\n                                <Button disabled={availableBonusPoints.lte(0)}\r\n                                        onClick={() => {\r\n                                            setAttributes({...attributes, [attribute]: Decimal(attributes[attribute]).plus(1)})\r\n                                        }}>\r\n                                    <AddIcon/>\r\n                                </Button>\r\n                                {Decimal(attributes[attribute]).toFixed()}\r\n                                <Button disabled={Decimal(attributes[attribute]).lte(0)} onClick={() => {\r\n                                    setAttributes({...attributes, [attribute]: Decimal(attributes[attribute]).minus(1)})\r\n                                }}>\r\n                                    <RemoveIcon/>\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </Tooltip>\r\n                </Grid>\r\n            })}\r\n            {Object.keys(getGlobalState().unlockedTraits).length > 0 &&\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Bonus Starting Traits</strong> (Start with traits in addition to that innate to your new demon form)\r\n            </Grid>}\r\n            {Object.keys(getGlobalState().unlockedTraits).map(traitId => {\r\n                return <Grid item container xs={3} justify=\"space-around\" style={{height: \"138px\"}}>\r\n                    <Grid item xs={12} style={{textAlign: \"center\", height: \"64%\"}}>\r\n                        <Button variant=\"contained\" color={getGlobalState().startingTraits[traitId] ? \"secondary\" : \"default\" }\r\n                                disabled={availableBonusPoints.lt(4) && !startingTraits[traitId]}\r\n                                onClick={() => {\r\n                                    getGlobalState().startingTraits[traitId] = !getGlobalState().startingTraits[traitId];\r\n                                    setStartingTraits(getGlobalState().startingTraits);\r\n                                } }\r\n                        >\r\n                            <Tooltip title={<div dangerouslySetInnerHTML={{\r\n                                __html: `Rank ${Decimal(getGlobalState().unlockedTraits[traitId]).toFixed()}: ${Traits[traitId].description({\r\n                                    rank: Decimal(getGlobalState().unlockedTraits[traitId])\r\n                                })}`\r\n                            }}>\r\n                            </div>}>\r\n                                <Grid container>\r\n                                    <Grid item xs={12}>\r\n                                        <img src={Traits[traitId].icon}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        {Traits[traitId].name} {Decimal(getGlobalState().unlockedTraits[traitId]).toFixed()}\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <em>4 pts</em>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Tooltip>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n\r\n        <Grid container item xs={12} alignItems=\"stretch\" justify=\"flex-start\">\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Choose a demon to reincarnate as.</strong>\r\n            </Grid>\r\n            {\r\n                Object.keys(Creatures)\r\n                    .filter(id => {\r\n                            const creatureEnabled = Creatures[id].enabled !== false;\r\n                            const debugEnabled = _.get(getGlobalState(), [\"debug\", \"creatures\", id, \"enabled\"], true);\r\n                            return creatureEnabled && debugEnabled;\r\n                        }\r\n                    )\r\n                    .map(name => {\r\n                        if (!getGlobalState().unlockedMonsters[name]) {\r\n                            return <Grid container xs={3} justify=\"space-around\" style={{height: \"150px\"}}>\r\n                                <Grid item xs={12} style={{textAlign: \"center\", height: \"64%\"}}>\r\n                                    <Tooltip\r\n                                        title={<div>An unknown type of Demon. Selects a random Demon you have not\r\n                                            already\r\n                                            played as.</div>}>\r\n                                        <Button variant=\"contained\" style={{height: \"100%\", width: \"50%\"}}\r\n                                                onClick={() => {\r\n                                                    props.reincarnate(\"random\", attributes);\r\n                                                    history.push(\"/adventuring\");\r\n                                                }}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={12}>\r\n                                                    ???\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                            </Grid>\r\n                        } else {\r\n                            return <Grid container xs={3} justify=\"space-around\">\r\n                                <Grid item xs={12} style={{textAlign: \"center\", height: \"150px\"}}>\r\n                                    <Tooltip title={<div>{Creatures[name].description}</div>}>\r\n                                        <Button variant=\"contained\" style={{height: \"75%\", width: \"50%\"}}\r\n                                                onClick={() => {\r\n                                                    props.reincarnate(name, attributes);\r\n                                                    history.push(\"/adventuring\");\r\n                                                }}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={12}>\r\n                                                    <img src={getSpriteForCreature(name)}/>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    {Creatures[name].name}\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    })\r\n            }\r\n        </Grid>\r\n    </Grid>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useMemo} from \"react\";\r\n\r\nexport default function PowerLevelDisplay(props) {\r\n    const powerLevelDisplay = useMemo(() => props.powerLevel.toFixed(), [props.powerLevel]);\r\n    return <React.Fragment>\r\n        <Grid item xs={6}>\r\n            Level\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n            {powerLevelDisplay}\r\n        </Grid>\r\n    </React.Fragment>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Help} from \"@material-ui/icons\";\r\nimport {config} from \"../../config\";\r\nimport React from \"react\";\r\n\r\nexport default function CharacterAttributes(props) {\r\n    return <React.Fragment>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                Health\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.currentHp.toFixed()} / {props.character.maximumHp.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={\r\n                        <span>Health is how much damage needed to destroy you. If you die, you forcibly reincarnate.</span>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.brutality.label}\r\n            </Grid>\r\n            <Grid item xs={5} title={``}>\r\n                {props.character.attributes.brutality.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={<span\r\n                        dangerouslySetInnerHTML={{__html: config.attributes.brutality.description(\r\n                                {\r\n                                    rank: props.character.attributes.brutality.toNumber()\r\n                                }\r\n                            )}}></span>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.cunning.label}\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.attributes.cunning.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={\r\n                        <span\r\n                            dangerouslySetInnerHTML={{__html: config.attributes.cunning.description(\r\n                                    {\r\n                                        rank: props.character.attributes.cunning.toNumber()\r\n                                    }\r\n                                )}}></span>\r\n                    }>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.deceit.label}\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.attributes.deceit.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={\r\n                        <span\r\n                            dangerouslySetInnerHTML={{__html: config.attributes.deceit.description(\r\n                                    {\r\n                                        rank: props.character.attributes.deceit.toNumber()\r\n                                    }\r\n                                )}}>\r\n                            </span>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.madness.label}\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.attributes.madness.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={<span\r\n                        dangerouslySetInnerHTML={{__html: config.attributes.madness.description(\r\n                                {\r\n                                    rank: props.character.attributes.madness.toNumber()\r\n                                }\r\n                            )}}/>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n    </React.Fragment>\r\n}","import Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport React from \"react\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nexport default function CharacterTraits(props) {\r\n    return <React.Fragment>\r\n        {Object.keys(props.character.traits).map(trait => <Tooltip key={trait} title={\r\n            <React.Fragment>\r\n                <span>Rank {props.character.traits[trait].toFixed()}: </span>\r\n            <span dangerouslySetInnerHTML={{\r\n                __html: Traits[trait].description({\r\n                    rank: Decimal(props.character.traits[trait])\r\n                })\r\n            }}></span>\r\n            </React.Fragment>}>\r\n            <img src={Traits[trait].icon}></img>\r\n        </Tooltip>)\r\n        }\r\n    </React.Fragment>\r\n\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useMemo} from \"react\";\r\nimport {getPowerNeededForLevel, getSpriteForCreature} from \"../engine\";\r\nimport {config} from \"../config\";\r\nimport PowerLevelDisplay from \"./charactersheet/PowerLevelDisplay\";\r\nimport CharacterAttributes from \"./charactersheet/CharacterAttributes\";\r\nimport CharacterTraits from \"./charactersheet/CharacterTraits\";\r\n\r\nconst styles = {\r\n    tooltip: {\r\n        fontSize: \"12pt\"\r\n    }\r\n}\r\n\r\nexport default function CharacterSheet(props) {\r\n    const spriteSrc = useMemo(() => getSpriteForCreature(props.character.appearance), [props.character.appearance]);\r\n    const hitChances = props.character.combat.getHitChancesAgainst(props.enemy);\r\n    const combinedHitWeights = Object.values(hitChances).reduce((total, next) => total.plus(next));\r\n    const powerRequiredForCurrentLevel = getPowerNeededForLevel(props.character.powerLevel);\r\n    const powerNeededForNextLevel = getPowerNeededForLevel(props.character.powerLevel.plus(1));\r\n    const progressToNextLevel = props.character.absorbedPower.minus(powerRequiredForCurrentLevel);\r\n\r\n    return <Grid container>\r\n        <Grid item xs={12}>\r\n            <img src={spriteSrc} style={{height: \"75px\"}}/>\r\n        </Grid>\r\n        <Grid item container>\r\n            <PowerLevelDisplay powerLevel={props.character.powerLevel}/>\r\n        </Grid>\r\n        {props.character.absorbedPower !== undefined && <Grid item xs={12}>\r\n            <progress\r\n                value={progressToNextLevel.div(powerNeededForNextLevel).times(100).toNumber()}\r\n                max={100}\r\n                title={`${progressToNextLevel.toFixed()}/${powerNeededForNextLevel.toFixed()}`}\r\n            ></progress>\r\n        </Grid>}\r\n        <Grid container>\r\n            <Grid item container>\r\n                <Grid item xs>\r\n                    <strong>Combat Attributes</strong>\r\n                </Grid>\r\n            </Grid>\r\n            <CharacterAttributes character={props.character}/>\r\n        </Grid>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Derived</strong>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={4}>\r\n                    Glancing Blow\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {hitChances.minimum.div(combinedHitWeights).times(100).round().toFixed()}%\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.minimumDamage.toFixed()}\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={4}>\r\n                    Solid Hit\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {hitChances.median.div(combinedHitWeights).times(100).round().toFixed()}%\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.medianDamage.toFixed()}\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={4}>\r\n                    Serious Hit\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {hitChances.max.div(combinedHitWeights).times(100).round().toFixed()}%\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.maximumDamage.toFixed()}\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Traits</strong>\r\n            </Grid>\r\n            <CharacterTraits character={props.character}/>\r\n        </Grid>\r\n        {config.artifacts.enabled && <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Artifacts</strong>\r\n            </Grid>\r\n            <Grid>\r\n                {\r\n                    JSON.stringify(props.character.items)\r\n                }\r\n            </Grid>\r\n        </Grid>}\r\n    </Grid>\r\n\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React from \"react\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nconst styles = {\r\n    root: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#eeeeee\"\r\n    }\r\n}\r\n\r\nexport default function PlayerStats(props) {\r\n    return <Paper style={styles.root} elevation={2}>\r\n        <CharacterSheet character={props.player} enemy={props.enemy}/>\r\n    </Paper>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useMemo} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {getCharacter, getGlobalState, getLevelForPower, getPowerNeededForLevel} from \"../engine\";\r\n\r\nconst styles = {\r\n    root: {\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flex: \"0\"\r\n    },\r\n    buttons: {\r\n        width: \"100%\"\r\n    }\r\n}\r\n\r\nexport default function TopSection(props) {\r\n    const history = useHistory();\r\n    const reincarnateEnabled = useMemo(() => getCharacter(0).powerLevel.gt(1), [\r\n        getCharacter(0).powerLevel\r\n    ])\r\n    return <div style={styles.root}>\r\n        <Button onClick={() => history.push(\"/reincarnating\")} style={styles.buttons} variant=\"contained\" color=\"secondary\" disabled={!reincarnateEnabled}>\r\n            Reincarnate\r\n        </Button>\r\n    </div>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {getCharacter, getGlobalState} from \"../engine\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { config } from \"../config\";\r\nimport { Decimal } from \"decimal.js\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flex: \"1 0 auto\",\r\n        justifyContent: \"flex-end\",\r\n        flexDirection: \"column\"\r\n    },\r\n    actions: {\r\n        container: {\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            flexDirection: \"row\"\r\n        },\r\n        buttons: {\r\n            alignSelf: \"flex-end\",\r\n            flex: \"1\"\r\n        }\r\n    },\r\n    action: {\r\n        maxHeight: \"15%\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    },\r\n    actionProgress: {\r\n        width: \"100%\"\r\n    },\r\n    history: {\r\n        height: \"15%\",\r\n        flexDirection: \"column\",\r\n        overflowY: \"scroll\"\r\n    },\r\n    combat: {\r\n\r\n    }\r\n}\r\nexport default function BottomSection(props) {\r\n    if (!props.currentAction) {\r\n        throw new Error(\"No current action\");\r\n    }\r\n    return <div style={styles.root} onMouseEnter={props.startManualSpeedup} onMouseLeave={props.stopManualSpeedup}>\r\n        <Paper style={styles.actions.container}>\r\n            <Button style={styles.actions.buttons} onClick={() => {\r\n                getGlobalState().paused = !getGlobalState().paused;\r\n                props.togglePause(getGlobalState().paused);\r\n            }}>\r\n                {props.paused ? \"Unpause\" : \"Pause\"}\r\n            </Button>\r\n        </Paper>\r\n        <Paper style={styles.actions.container}>\r\n            {actionButton(\"fighting\", \"Fight\", \"Combat the enemy. On victory, steal some of the power of the vanquished foe.\", props)}\r\n            {actionButton(\"fleeing\", \"Flee\", \"Attempt to escape. You will automatically escape from Greater Demons.\", props)}\r\n            {actionButton(\"intimidating\", \"Intimidate\", \"Try to cow the enemy, compelling them to continuously provide you a portion of their life force.\", props)}\r\n            {_.get(config, \"features.negotiating.enabled\") && actionButton(\"negotiating\", \"Negotiate\", \"Combat the enemy. On victory, steal some of the power of the vanquished foe.\", props)}\r\n        </Paper>\r\n        <Paper style={styles.combat.details}>\r\n            <Grid container>\r\n                <Grid item container xs={6} direction=\"row\">\r\n                    <Grid item xs={6}>\r\n                        Player\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <meter style={{width: \"80%\"}} low={33} high={66} optimum={100} min={0} max={100} value={props.player.currentHp.div(props.player.maximumHp).times(100).floor().toNumber()} max={100}></meter>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item container xs={6} direction=\"row\">\r\n                    <Grid item xs={6}>\r\n                        <meter style={{width: \"80%\"}} low={33} high={66} optimum={100} min={0} max={100} value={_.get(props.enemy,[\"currentHp\"], Decimal(0)).div(_.get(props.enemy,[\"maximumHp\"], Decimal(1))).times(100).floor().toNumber()} max={100}></meter>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        {_.get(props.enemy, \"name\")}\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n        <Paper style={styles.action}>\r\n            <strong>{props.currentAction.description}</strong>\r\n            <progress style={styles.actionProgress} value={props.actionTime}\r\n                      max={_.get(props.state, props.currentAction.duration)}/>\r\n        </Paper>\r\n        <Paper style={styles.history}>\r\n            {\r\n                props.actionLog.map(item => printActionItem(item))\r\n            }\r\n        </Paper>\r\n    </div>\r\n}\r\n\r\nfunction printActionItem(item) {\r\n    if (item.message) {\r\n        return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n            <Grid item xs={11}>\r\n            <span dangerouslySetInnerHTML={{\r\n                __html: item.message\r\n            }}></span>\r\n            </Grid>\r\n        </Grid>\r\n    } else {\r\n        switch (item.result) {\r\n            case \"add_modifier\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{`${getCharacter(item.actor).name}`}</Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"hit\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item\r\n                          xs={11}>{getCharacter(item.actor).name} hit! {item.effects.map(effect => describeEffect(item.target, effect)).join(\" \")}</Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"miss\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        {getCharacter(item.actor).name} Missed! {item.effects.map(effect => describeEffect(item.target, effect)).join(\" \")}\r\n                    </Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"kill\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item\r\n                          xs={11}><strong>{getCharacter(item.target).name} {item.target === 0 ? 'Were' : 'Was'} Killed!</strong></Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"gainedPower\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        You absorbed {item.value.toFixed()} power.\r\n                    </Grid>\r\n                </Grid>\r\n            case \"healed\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        {`${getCharacter(item.target).name} gained ${item.value} health.`}\r\n                    </Grid>\r\n                </Grid>\r\n            case \"escaped\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        You escaped.\r\n                    </Grid>\r\n                </Grid>\r\n            case \"action_skipped\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{getCharacter(item.actor).name} lost {item.actor === 0 ? 'your' : 'their'} action.</Grid>\r\n                    <Grid item xs={1}>\r\n                        {item.tick}\r\n                    </Grid>\r\n                </Grid>\r\n            case \"intimidated\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{getCharacter(item.target).name} was Bound to you, granting you {item.value.toFixed()} power while you explore. </Grid>\r\n                </Grid>\r\n            case \"enemy-fled\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{getCharacter(item.target).name} Fled!</Grid>\r\n                </Grid>\r\n        }\r\n    }\r\n}\r\n\r\nfunction describeEffect(target, effect) {\r\n    switch (effect.event) {\r\n        case \"damage\":\r\n            return `${getCharacter(effect.target).name} ${target == 0 ? 'take' : 'takes'} ${effect.value} Damage.`;\r\n        default:\r\n            return Object.keys(effect.effect.effects).map(mod => {\r\n                switch (mod) {\r\n                    case \"speed\":\r\n                        const percentModifier = Decimal(effect.effect.effects.speed.percent); // FIXME: 3 layers, the same name?\r\n                        if (percentModifier.lt(0)) {\r\n                            return `${getCharacter(effect.target).name} ${effect.target == 0 ? 'suffer' : 'suffers'} a ${percentModifier.toFixed()}% penalty to Action Speed.`;\r\n                        } else {\r\n                            return `${getCharacter(effect.target).name} ${effect.target == 0 ? 'gain' : 'gains'} a ${percentModifier.toFixed()}% bonus to Action Speed.`;\r\n                        }\r\n                }\r\n            })\r\n            switch (effect.effect.modifier) {\r\n                case \"speed_modifier\":\r\n\r\n\r\n            }\r\n\r\n    }\r\n}\r\n\r\nfunction actionButton(action, text, description, props) {\r\n    return <Tooltip title={description}>\r\n        <Button onClick={() => props.setNextAction(action)} style={styles.actions.buttons}\r\n                disabled={props.currentAction.id !== \"approaching\"}\r\n                variant={props.nextActionName === action ? \"contained\" : \"outlined\"}\r\n                color={props.nextActionName === action ? \"primary\" : \"default\"}>\r\n            {text}\r\n        </Button>\r\n    </Tooltip>\r\n}","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nconst styles = {\r\n    root: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#eeeeee\"\r\n    }\r\n}\r\n\r\nexport default function EnemySidebar(props) {\r\n    return <Paper style={styles.root}>\r\n        {props.currentEncounter && <CharacterSheet enemy={props.player} character={props.currentEncounter.enemies[0]} /> }\r\n    </Paper>\r\n}","import PlayerStats from \"../PlayerStats\";\r\nimport TopSection from \"../TopSection\";\r\nimport {getCharacter, getGlobalState} from \"../../engine\";\r\nimport BottomSection from \"../BottomSection\";\r\nimport EnemySidebar from \"../EnemySidebar\";\r\nimport React from \"react\";\r\nimport * as _ from \"lodash\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flex: \"1\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        overflow: \"hidden\"\r\n    },\r\n    image: {\r\n        position: \"absolute\",\r\n        height: \"100%\",\r\n        left: 0\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        left: 0\r\n    }\r\n}\r\n\r\nexport default function AdventuringPage(props) {\r\n    return <div className=\"App\" style={styles.root}>\r\n        <div id=\"background\" style={{\r\n            position: \"absolute\",\r\n            zIndex: \"-10\",\r\n            overflow: \"hidden\",\r\n            height: \"100vh\",\r\n            width: \"100vw\"\r\n        }}>\r\n            <img style={styles.background} src={\"./backgrounds/parallax-demon-woods-bg.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-far-trees.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-mid-trees.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-close-trees.png\"}/>\r\n        </div>\r\n        <PlayerStats player={props.player} enemy={_.get(props, \"currentEncounter.enemies[0]\")}/>\r\n        <div style={{display: \"flex\", flex: \"1 0 auto\", flexDirection: \"column\"}}>\r\n            <TopSection character={getCharacter(0)}/>\r\n            <BottomSection state={getGlobalState()} actionLog={props.actionLog}\r\n                           player={getCharacter(0)}\r\n                           enemy={_.get(props, [\"currentEncounter\", \"enemies\", 0])}\r\n                           togglePause={props.togglePause}\r\n                           paused={props.paused}\r\n                           nextActionName={props.nextAction}\r\n                           currentAction={props.currentAction}\r\n                           setNextAction={(newAction) => {\r\n                               props.setNextAction(newAction);\r\n                               getGlobalState().nextAction = newAction;\r\n                           }}\r\n                           actionTime={props.actionTime}\r\n                           startManualSpeedup={props.startManualSpeedup}\r\n                           stopManualSpeedup={props.stopManualSpeedup}\r\n            />\r\n        </div>\r\n        <EnemySidebar player={props.player} currentEncounter={props.currentEncounter} actionLog={props.actionLog}/>\r\n\r\n    </div>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useState} from \"react\";\r\nimport { Decimal } from \"decimal.js\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {Creatures} from \"../data/creatures\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddCircleOutlineRoundedIcon from '@material-ui/icons/AddCircleOutlineRounded';\r\nimport RemoveCircleOutlineRoundedIcon from '@material-ui/icons/RemoveCircleOutlineRounded';\r\nimport {getCharacter, getGlobalState, resetDebug, saveKey} from \"../engine\";\r\nimport * as _ from \"lodash\";\r\nimport {Regions} from \"../data/Regions\";\r\nimport {config} from \"../config\";\r\n\r\nconst styles = {\r\n    root: {\r\n        position: \"absolute\",\r\n        minHeight: \"100vh\",\r\n        bottom: 0,\r\n        left: 0,\r\n        padding: \"20px\"\r\n    }\r\n}\r\n\r\nexport default function DebugUi(props) {\r\n    const [creatures, setCreatures] = useState(_.get(getGlobalState(), [\"debug\", \"creatures\"]));\r\n    const [regions, setRegions] = useState(_.get(getGlobalState(), [\"debug\", \"regions\"]));\r\n    const [minLevel, setMinLevel] = useState(_.get(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale).lt(Decimal(1)) ?\r\n        Decimal(1) : getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale)));\r\n    const [maxLevel, setMaxLevel] = useState(_.get(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale).gt(100) ?\r\n        Decimal(100) : getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale * 2)));\r\n    const [manualSpeedMultiplier, setManualSpeedMultiplier] = useState(_.get(getGlobalState(), [\"debug\", \"manualSpeedMultiplier\"],\r\n        getGlobalState().manualSpeedMultiplier));\r\n    const [playerAbsorbedPower, setPlayerAbsorbedPower] = useState(getCharacter(0).absorbedPower);\r\n\r\n    function reset() {\r\n        resetDebug();\r\n        setCreatures(_.get(getGlobalState(), [\"debug\", \"creatures\"]));\r\n        setRegions(_.get(getGlobalState(), [\"debug\", \"regions\"]));\r\n        setMinLevel(getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale).lt(Decimal(1)) ?\r\n            Decimal(1) : getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale));\r\n        setMaxLevel(getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale).gt(100) ?\r\n            Decimal(100) : getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale * 2));\r\n    }\r\n\r\n    function clearSave() {\r\n        window.localStorage.removeItem(saveKey);\r\n        alert(\"local storage cleared\");\r\n    }\r\n\r\n    return <Paper style={styles.root} disabled={true}>\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <h3>Debug Menu</h3>\r\n            </Grid>\r\n            <Grid item container xs={12}>\r\n                <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={reset}>\r\n                        Reset Debug Settings\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={clearSave}>\r\n                        Clear Save\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid item xs={3}>\r\n                    <TextField type=\"number\" value={manualSpeedMultiplier} onChange={e => {\r\n                        const newValue = Number.parseInt(e.target.value);\r\n                        _.set(getGlobalState(), [\"debug\", \"manualSpeedMultiplier\"], newValue);\r\n                        setManualSpeedMultiplier(newValue);\r\n                    }} label=\"Manual speed multiplier\"/>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TextField type=\"number\" min=\"0\" value={playerAbsorbedPower} onChange={e => {\r\n                        e.target.value = e.target.value === \"\" ? 0 : e.target.value;\r\n                        const newValue = Decimal(Number.parseInt(e.target.value));\r\n                        if(newValue.lt(0)) {\r\n                            getCharacter(0).absorbedPower = Decimal(0);\r\n                            setPlayerAbsorbedPower(Decimal(0));\r\n                        } else {\r\n                            getCharacter(0).absorbedPower = newValue;\r\n                            setPlayerAbsorbedPower(newValue);\r\n                        }\r\n\r\n                    }} label=\"Current player absorbed power\"/>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <h3>Creatures</h3>\r\n            </Grid>\r\n            <Grid container item xs={12}>\r\n                {Object.keys(Creatures).map(id => {\r\n                    const enabled = creatures[id] !== false && _.get(creatures, [id, \"enabled\"]) !== false;\r\n                    return <Grid item xs={3} style={{height: \"100%\"}}>\r\n                        <Button variant=\"contained\" color={enabled ? \"default\" : \"secondary\"}\r\n                                style={{width: \"100%\", height: \"100%\"}}\r\n                                onClick={() => {\r\n                                    _.set(getGlobalState(), [\"debug\", \"creatures\", id, \"enabled\"], !enabled);\r\n                                    setCreatures({...creatures, [id]: {enabled: !enabled}})\r\n                                }}\r\n                        >\r\n                            <img src={`./monsters/${Creatures[id].texture}`}/>\r\n                            {Creatures[id].name}\r\n                        </Button>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid item style={{textAlign: \"center\"}}>\r\n                <h4>Regions</h4>\r\n            </Grid>\r\n            <Grid container item xs={12}>\r\n                {Object.keys(Regions).map(regionId => {\r\n                    return <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                        <h4>{Regions[regionId].name}</h4>\r\n                        <Grid item container xs={12}>\r\n                            {Object.keys(Regions[regionId].encounters).map(encounterId => {\r\n                                const enabled = _.get(regions, [regionId, \"encounters\", encounterId, \"enabled\"]) !== false;\r\n                                return <Grid item xs={3}>\r\n                                    <Button variant=\"contained\" color={enabled ? \"default\" : \"secondary\"}\r\n                                            style={{width: \"100%\", height: \"100%\"}}\r\n                                            onClick={() => {\r\n                                                _.set(getGlobalState(), [\"debug\", \"regions\", regionId, \"encounters\", encounterId, \"enabled\"], !enabled);\r\n                                                setRegions({\r\n                                                    ...regions, [regionId]: _.set(regions[regionId],\r\n                                                        [\"encounters\", encounterId, \"enabled\"],\r\n                                                        !enabled\r\n                                                    )\r\n                                                })\r\n                                            }}\r\n                                    >\r\n                                        {Regions[regionId].encounters[encounterId].description}\r\n                                    </Button>\r\n                                </Grid>;\r\n                            })}\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                    <h4>Encounter rules</h4>\r\n                </Grid>\r\n                <Grid container item xs={3}>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            setMinLevel(minLevel.plus(1));\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], minLevel.plus(1));\r\n                            if (minLevel.plus(1).gt(maxLevel)) {\r\n                                setMaxLevel(minLevel.plus(1));\r\n                                _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], minLevel.plus(1));\r\n                            }\r\n                        }}>\r\n                            <AddCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        Minimum level {minLevel.toFixed()}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], minLevel.minus(1));\r\n                            setMinLevel(minLevel.minus(1));\r\n                        }}>\r\n                            <RemoveCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container item xs={3}>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            setMaxLevel(maxLevel.plus(1));\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], maxLevel.plus(1));\r\n                        }}>\r\n                            <AddCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        Maximum level {maxLevel.toFixed()}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], maxLevel.minus(1));\r\n                            setMaxLevel(maxLevel.minus(1));\r\n                            if (maxLevel.minus(1).lt(minLevel)) {\r\n                                setMinLevel(maxLevel.minus(1));\r\n                                _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], maxLevel.minus(1));\r\n                            }\r\n                        }}>\r\n                            <RemoveCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useEffect} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport {getGlobalState} from \"../../engine\";\r\nconst pkg = require(\"../../../package.json\");\r\nconst changelog = require(\"../../changelog.json\");\r\n\r\nexport default function SplashPage(props) {\r\n    useEffect(() => {\r\n        getGlobalState().paused = true;\r\n    })\r\n    const history = useHistory();\r\n    return <Paper>\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                Conquest of Hell Ver. {pkg.version} Save Compatibility NOT Guaranteed\r\n            </Grid>\r\n            <Grid item container>\r\n                {Object.keys(changelog).map(version => {\r\n                    return <Grid key={version} item container xs={12}>\r\n                        <Grid item xs={12}>\r\n                            {version}\r\n                        </Grid>\r\n                        <ul>\r\n                        {changelog[version].changes.map(entry => {\r\n                            return <li key={entry}>\r\n                                {entry}\r\n                            </li>\r\n                        })}\r\n                        </ul>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <Button onClick={() => {\r\n                    if(getGlobalState().currentAction === null) {\r\n                        history.push(\"/reincarnating\")\r\n                    } else {\r\n                        getGlobalState().paused = false;\r\n                        history.push(\"/adventuring\")\r\n                    }\r\n                }}>\r\n                    Start\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>\r\n}","export default class CharacterCombatState {\r\n    constructor(props) {\r\n        this.party = props.party;\r\n        this.hp = props.hp;\r\n        this._speed = props.speed;\r\n        this._fatigue = 0;\r\n        this.lastActed = 0;\r\n        this.modifiers = [];\r\n    }\r\n\r\n    get speed() {\r\n        const baseSpeed = this._speed;\r\n        const modifiedSpeed = this.modifiers.reduce((currentValue, modifier) => {\r\n            if(modifier.effects.speed) {\r\n                const multiplier = (modifier.effects.speed.percent.plus(100))/100\r\n                return currentValue.mul(multiplier);\r\n            }\r\n            return currentValue;\r\n        }, baseSpeed);\r\n        return modifiedSpeed;\r\n    }\r\n\r\n    get fatigue() {\r\n        return this._fatigue;\r\n    }\r\n\r\n    set fatigue(fatigue) {\r\n        this._fatigue = fatigue;\r\n    }\r\n\r\n    get canAct() {\r\n        return this.modifiers.reduce((canAct, nextModifier) => {\r\n            if(nextModifier.effects.stunned !== undefined) {\r\n                return false;\r\n            } else {\r\n                return canAct;\r\n            }\r\n        }, true)\r\n    }\r\n}","import CharacterCombatState from \"../CharacterCombatState\";\r\nimport {debugMessage} from \"../../debugging\";\r\nimport {getTrait} from \"../../data/Traits\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {config} from \"../../config\";\r\nimport {v4} from \"node-uuid\";\r\nimport {generateHitCombatResult, generateMissCombatResult, generateSkipActionResult} from \"../../combatResult\";\r\nimport {evaluateExpression, getCharacter} from \"../index\";\r\nimport * as _ from \"lodash\";\r\n\r\nexport function resolveCombat(rng, definition) {\r\n    const combatResult = {\r\n        rounds: [],\r\n        winner: null,\r\n        combatantCombatStats: {}\r\n    }\r\n\r\n    const combatants = _.flatMap(definition.parties.map((party, partyIndex) => {\r\n        return party.map((character, characterIndex) => {\r\n            combatResult.combatantCombatStats[character.id] = new CharacterCombatState({\r\n                hp: character.currentHp,\r\n                speed: character.speed,\r\n                party: partyIndex\r\n            });\r\n            return {\r\n                character,\r\n                party: partyIndex\r\n            }\r\n        })\r\n    }));\r\n    debugMessage(\"Beginning combat\")\r\n    // Trigger start of combat effects.\r\n    combatants.forEach(combatant => Object.keys(combatant.character.traits).forEach(trait => {\r\n        combatants.filter(other => other !== combatant).forEach(otherCombatant => {\r\n            applyTrait(combatant.character, otherCombatant.id, getTrait(trait), combatant.character.traits[trait], \"on_combat_start\", {combat: combatResult}, 0, rng);\r\n        });\r\n    }))\r\n    let tick = 0;\r\n    while (combatResult.winner === null) {\r\n        const initiatives = _.uniq(combatants.map(combatant => Math.floor(Decimal(10000).div(combatResult.combatantCombatStats[combatant.character.id].speed).toNumber())))\r\n            .sort((a, b) => a - b);\r\n        initiatives.forEach(initiativeCount => {\r\n            // TODO: Activate/deactivate traits\r\n            const actingCharacters = combatants\r\n                .filter(wrapped => {\r\n                    const isAlive = wrapped.character.alive;\r\n                    const characterSpeed = Math.floor(Decimal(10000).div(combatResult.combatantCombatStats[wrapped.character.id].speed).toNumber());\r\n                    const matchingSpeed = (initiativeCount % characterSpeed === 0);\r\n                    return isAlive && matchingSpeed;\r\n                });\r\n            actingCharacters.forEach(acting => {\r\n                const character = acting.character;\r\n                tick = combatResult.combatantCombatStats[character.id].lastActed + Math.floor(Decimal(10000).div(combatResult.combatantCombatStats[character.id].speed).toNumber());\r\n                combatResult.combatantCombatStats[character.id].lastActed = tick;\r\n                debugMessage(`Tick ${tick}: Resolving action by character '${character.id}'.`);\r\n                if (combatResult.combatantCombatStats[character.id].hp.lte(0)) {\r\n                    debugMessage(`Tick ${tick}: Character ${character.id} was dead when their turn to act came up, skipping their action.`);\r\n                    return;\r\n                }\r\n                // The acting character performs an accuracy.\r\n                const enemyParty = (acting.party + 1) % 2;\r\n                const livingEnemies = definition.parties[enemyParty]\r\n                    .filter(enemy => combatResult.combatantCombatStats[enemy.id].hp.gt(0));\r\n                const target = _.get(livingEnemies[Math.floor(rng.double() * livingEnemies.length)], \"id\");\r\n                if (target === undefined) {\r\n                    debugMessage(`Tick ${tick}: No valid target, skipping action by ${character.id}.`);\r\n                    return;\r\n                }\r\n                if (combatResult.combatantCombatStats[character.id].canAct) {\r\n                    debugMessage(`Tick ${tick}: Attacking ${target}`);\r\n                    const attackRollResult = makeAttackRoll(character, target, combatResult, rng);\r\n\r\n                    // Trigger on-accuracy effects\r\n                    if (attackRollResult.total >= (100 - config.combat.baseHitChance)) {\r\n                        debugMessage(`Tick ${tick}: ${character.id} rolled ${attackRollResult.total}, a hit.`);\r\n                        resolveHit(tick, combatResult, character, target, rng);\r\n                    } else {\r\n                        debugMessage(`Tick ${tick}: ${character.id} rolled ${attackRollResult.total}, a miss.`);\r\n                        resolveMiss(tick, combatResult, character, target, rng);\r\n                        // TODO: Trigger on-miss effects\r\n                    }\r\n                } else {\r\n                    debugMessage(`${tick}: Character skips their action.`);\r\n                    resolveSkippedAction(tick, combatResult, character);\r\n                }\r\n                Object.keys(combatResult.combatantCombatStats).forEach(combatantId => {\r\n                    if (combatResult.combatantCombatStats[combatantId].hp.lte(0)) {\r\n                        debugMessage(`Tick ${tick}: Combatant ${combatantId} died`);\r\n                        combatResult.rounds.push({\r\n                            uuid: v4(),\r\n                            tick,\r\n                            actor: character.id,\r\n                            target: Number.parseInt(combatantId),\r\n                            result: \"kill\"\r\n                        });\r\n                    }\r\n                });\r\n\r\n                // TODO: Add logs for when effects expire.\r\n                combatResult.combatantCombatStats[acting.character.id].modifiers = combatResult.combatantCombatStats[acting.character.id].modifiers\r\n                    .map(modifier => {\r\n                        modifier.roundDuration = Decimal(modifier.roundDuration).minus(1);\r\n                        return modifier;\r\n                    })\r\n                    .filter(modifier => Decimal(modifier.roundDuration).gt(0))\r\n\r\n            });\r\n        });\r\n        const playerPartyDead = definition.parties[0].every(character => combatResult.combatantCombatStats[character.id].hp.lte(0));\r\n        const enemyPartyDead = definition.parties[1].every(character => combatResult.combatantCombatStats[character.id].hp.lte(0));\r\n        if (playerPartyDead || enemyPartyDead) {\r\n            if (playerPartyDead) {\r\n                debugMessage(\"Every member of party 0 is dead\")\r\n                combatResult.rounds.push({\r\n                    uuid: v4(),\r\n                    tick,\r\n                    winner: 1,\r\n                    result: \"combat-end\"\r\n                })\r\n                combatResult.winner = 1;\r\n                // Clear all end of combat\r\n            } else if (enemyPartyDead) {\r\n                debugMessage(\"Every member of party 1 is dead\")\r\n                combatResult.rounds.push({\r\n                    uuid: v4(),\r\n                    tick,\r\n                    winner: 0,\r\n                    result: \"combat-end\",\r\n                });\r\n                combatResult.winner = 0;\r\n            }\r\n\r\n        } else {\r\n            debugMessage(\"No winner, combat continues\");\r\n        }\r\n    }\r\n    return combatResult\r\n\r\n}\r\n\r\n\r\nfunction resolveHit(tick, combatResult, actingCharacter, targetCharacter, rng) {\r\n    if (typeof actingCharacter !== \"object\") {\r\n        throw new Error(`Acting character was not an object!`);\r\n    }\r\n    if (typeof targetCharacter !== \"number\") {\r\n        throw new Error(`Target character was not an object!`);\r\n    }\r\n    const hitTypeChances = actingCharacter.combat.getHitChancesAgainst(getCharacter(targetCharacter));\r\n    const damageRoll = Math.floor(rng.double() * 100);\r\n    let damageToInflict;\r\n    if (damageRoll <= hitTypeChances.minimum) {\r\n        damageToInflict = actingCharacter.combat.minimumDamage;\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a glancing hit for ${damageToInflict}.`);\r\n    } else if (damageRoll <= hitTypeChances.median.plus(hitTypeChances.minimum)) {\r\n        damageToInflict = actingCharacter.combat.medianDamage;\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a solid hit for ${damageToInflict}.`);\r\n    } else {\r\n        damageToInflict = actingCharacter.combat.maximumDamage;\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a critical hit for ${damageToInflict}.`);\r\n    }\r\n    const attackResult = {\r\n        baseDamage: damageToInflict,\r\n        attackerDamageMultiplier: Decimal(actingCharacter.attributes[config.mechanics.attackDamage.baseAttribute])\r\n            .times(config.mechanics.attackDamage.attributeBonusScale),\r\n        targetDefenseMultiplier: Decimal(getCharacter(targetCharacter).attributes[config.mechanics.defense.baseAttribute])\r\n            .times(config.mechanics.defense.attributeBonusScale),\r\n        otherEffects: []\r\n    }\r\n    // Trigger on-hit effects\r\n    Object.keys(actingCharacter.traits).forEach(trait => applyTrait(actingCharacter, targetCharacter, getTrait(trait), actingCharacter.traits[trait], \"on_hitting\", {\r\n        combat: combatResult,\r\n        attack: attackResult\r\n    }, tick, rng));\r\n    const damageFactor = attackResult.attackerDamageMultiplier.plus(100) // FIXME: Evaluable expression\r\n        .div(Decimal.max(attackResult.targetDefenseMultiplier.plus(100), 1));\r\n    const finalDamage = attackResult.baseDamage.times(damageFactor).floor()\r\n\r\n    debugMessage(`Damage started off as ${attackResult.baseDamage.toFixed()}, with an attack factor of ${attackResult.attackerDamageMultiplier} and a target defense factor of ${attackResult.targetDefenseMultiplier}, for a total factor of ${damageFactor} and a final damage of ${finalDamage.toFixed()}`);\r\n    combatResult.combatantCombatStats[targetCharacter].hp = combatResult.combatantCombatStats[targetCharacter].hp.minus(damageToInflict);\r\n    attackResult.finalDamage = finalDamage;\r\n    debugMessage(`Tick ${tick}: Hit did ${finalDamage.toFixed()}. Additional effects: ${attackResult.otherEffects.map(effect => {\r\n        switch (effect.event) {\r\n            case \"apply_effect\":\r\n                return `Applying effect ${effect.effect} with from ${effect.source} to ${effect.target}.`\r\n        }\r\n\r\n    }).join(\", \")}. Target has ${combatResult.combatantCombatStats[targetCharacter].hp} remaining.`)\r\n    // TODO: Trigger on-damage effects\r\n    Object.keys(getCharacter(targetCharacter).traits).forEach(trait => applyTrait(actingCharacter, targetCharacter, getTrait(trait), getCharacter(targetCharacter).traits[trait], \"on_taking_damage\", {\r\n        combat: combatResult,\r\n        attack: attackResult\r\n    }, tick, rng));\r\n    attackResult.otherEffects.forEach(effect => {\r\n        switch (effect.event) {\r\n            case \"damage\":\r\n                combatResult.combatantCombatStats[effect.target].hp = combatResult.combatantCombatStats[effect.target].hp.minus(effect.value);\r\n                break;\r\n        }\r\n    })\r\n    combatResult.rounds.push(generateHitCombatResult(tick, actingCharacter.id, targetCharacter, finalDamage, attackResult.otherEffects));\r\n}\r\n\r\nfunction resolveMiss(tick, combatResult, actingCharacter, targetCharacterId, rng) {\r\n    combatResult.rounds.push(generateMissCombatResult(tick, actingCharacter.id, targetCharacterId));\r\n}\r\n\r\nfunction resolveSkippedAction(tick, combatResult, actingCharacter) {\r\n    combatResult.rounds.push(generateSkipActionResult(tick, actingCharacter.id));\r\n}\r\n\r\nfunction applyTrait(sourceCharacter, targetCharacter, trait, rank, event, state, tick, rng) {\r\n    const rankModifier = sourceCharacter.attributes[config.mechanics.traitRank.baseAttribute].times(config.mechanics.traitRank.attributeBonusScale).div(100);\r\n    rank = Decimal.min(Decimal(rank).plus(Decimal(rank).times(rankModifier)).floor(), 100);\r\n    debugMessage(`Character has a bonus to rank of ${sourceCharacter.attributes.madness.toFixed()}% from madness, for an effective rank of ${rank}`);\r\n    debugMessage(`Tick ${tick}: Determining if trait ${trait.name} applies`);\r\n    if (trait[event]) {\r\n        const effect = trait[event];\r\n        if (effect.conditions !== undefined) {\r\n            debugMessage(\"Trait has conditions\");\r\n        }\r\n        const effectTriggers = effect.conditions === undefined || Object.keys(effect.conditions)\r\n            .every(condition => {\r\n                switch (condition) {\r\n                    case \"health_percentage\":\r\n                        // Fixme: Implement validation\r\n                        const target = getCharacter(effect.conditions[condition].target === \"attacker\" ? sourceCharacter : targetCharacter);\r\n                        const targetPercent = Decimal(effect.conditions[condition].below);\r\n                        const targetCurrentHealth = state.combat.combatantCombatStats[target.id].hp;\r\n                        const targetMaxHealth = target.maximumHp;\r\n                        const currentHealthPercent = (targetCurrentHealth.mul(100).div(targetMaxHealth));\r\n                        const conditionMet = targetPercent.gte(currentHealthPercent);\r\n                        debugMessage(`Tick ${tick}: Target health percentage is ${currentHealthPercent}, which is ${conditionMet ? \"\" : \"not\"} enough to trigger.`);\r\n                        return conditionMet;\r\n                    case \"chance\":\r\n                        const chanceToTrigger = evaluateExpression(trait[event].conditions[condition], {\r\n                            $rank: rank\r\n                        });\r\n                        const roll = Math.floor(rng.double() * 100) + 1;\r\n                        if (chanceToTrigger >= roll) {\r\n                            debugMessage(`Chance to trigger ${chanceToTrigger} with roll ${roll}: success`);\r\n                            return true;\r\n                        } else {\r\n                            debugMessage(`Chance to trigger ${chanceToTrigger} with roll ${roll}: failure.`);\r\n                            return false;\r\n                        }\r\n                    default:\r\n                        return false;\r\n                }\r\n            })\r\n        if (effectTriggers) {\r\n            debugMessage(`Tick ${tick}: Effect triggered, applying effects`);\r\n            Object.keys(trait[event].effects).forEach(traitEffect => {\r\n                    // FIXME\r\n                    switch (traitEffect) {\r\n                        case \"damage_modifier\":\r\n                            // FIXME: Validation\r\n                            const percentDamageModifier = evaluateExpression(trait[event].effects[traitEffect].percent, {\r\n                                $rank: rank\r\n                            });\r\n                            if (percentDamageModifier) {\r\n                                const newMultiplier = state.attack.attackerDamageMultiplier.plus(percentDamageModifier);\r\n                                debugMessage(`Tick ${tick}: Applying ${percentDamageModifier.toFixed()} modifier to damage, changing damage multiplier from ${state.attack.attackerDamageMultiplier.div(100).toFixed()} to ${newMultiplier.div(100).toFixed()}`);\r\n                                state.attack.attackerDamageMultiplier = newMultiplier;\r\n                            }\r\n                            break;\r\n                        case \"damage\":\r\n                            const target = trait[event].effects.target\r\n                            const damageToInflict = evaluateExpression(trait[event].effects.damage, {\r\n                                $rank: Decimal(rank),\r\n                                attackDamage: state.attack.finalDamage\r\n                            }).floor();\r\n                            debugMessage(`Inflicting ${damageToInflict} damage to ${target}`);\r\n                            if(damageToInflict.gt(0)) {\r\n                                const targets = selectTargets(sourceCharacter, targetCharacter, Object.keys(state.combat.combatantCombatStats), target, state);\r\n                                targets.forEach(target => {\r\n                                    state.attack.otherEffects.push({\r\n                                        event: \"damage\",\r\n                                        value: damageToInflict,\r\n                                        target: target\r\n                                    });\r\n                                });\r\n                            }\r\n                            break;\r\n                        case \"defense_modifier\": {\r\n                            const defenseModifier = evaluateExpression(trait[event].effects[traitEffect].percent, {\r\n                                $rank: rank\r\n                            }).div(100).plus(1);\r\n                            const newMultiplier = state.attack.targetDefenseMultiplier.times(defenseModifier);\r\n                            debugMessage(`Tick ${tick}: Applying ${defenseModifier} modifier to defense, changing defense multiplier from ${state.attack.targetDefenseMultiplier.toFixed()} to ${newMultiplier.toFixed()}`);\r\n                            state.attack.targetDefenseMultiplier = newMultiplier;\r\n                            break;\r\n                        }\r\n                        case \"add_modifier\":\r\n                            const modifierToAddDefinition = trait[event].effects.add_modifier;\r\n                            Object.keys(modifierToAddDefinition).forEach(effectType => {\r\n                                const effectTarget = modifierToAddDefinition[effectType].target;\r\n                                const modifier = {\r\n                                    effects: {\r\n                                        [effectType]: {\r\n                                            percent: evaluateExpression(modifierToAddDefinition[effectType].percent, {$rank: rank})\r\n                                        }\r\n                                    },\r\n                                    roundDuration: evaluateExpression(trait[event].duration.rounds, {$rank: rank}),\r\n                                    source: {\r\n                                        character: sourceCharacter.id,\r\n                                        ability: trait\r\n                                    }\r\n                                };\r\n                                // Determine targets\r\n                                const targets = selectTargets(sourceCharacter, targetCharacter, Object.keys(state.combat.combatantCombatStats), effectTarget, state);\r\n                                targets.forEach(combatantId => {\r\n                                    const existingEffect = state.combat.combatantCombatStats[combatantId].modifiers.find(modifier => {\r\n                                        return modifier.source.character === sourceCharacter.id && modifier.source.ability === trait;\r\n                                    });\r\n                                    if (existingEffect) {\r\n                                        existingEffect.roundDuration = evaluateExpression(trait[event].duration.rounds, {$rank: rank});\r\n                                    } else {\r\n                                        state.combat.combatantCombatStats[combatantId].modifiers.push(modifier);\r\n                                    }\r\n                                    _.get(state, \"attack.otherEffects\", []).push({\r\n                                        event: \"add_modifier\",\r\n                                        source: sourceCharacter.id,\r\n                                        target: combatantId,\r\n                                        effect: modifier,\r\n                                    });\r\n                                });\r\n                            })\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nfunction makeAttackRoll(actingCharacter, target, combatState, rng) {\r\n    const attackAccuracy = Decimal(actingCharacter.attributes[config.mechanics.accuracy.baseAttribute]).times(config.mechanics.accuracy.attributeBonusScale);\r\n    // TODO: Validation\r\n    debugMessage(\"Making an accuracy roll. Attacker Accuracy:\", attackAccuracy.toFixed());\r\n    const roll = Math.floor((rng.double() * 100));\r\n    return {\r\n        rawRoll: roll,\r\n        attackAccuracy,\r\n        total: attackAccuracy.plus(roll)\r\n    };\r\n}\r\n\r\nfunction selectTargets(sourceCharacter, targetCharacterId, combatants, targetType, state) {\r\n    return combatants.filter(combatant => {\r\n        switch (targetType) {\r\n            case \"attacker\":\r\n                return sourceCharacter.id == combatant;\r\n            case \"attacked\":\r\n                return targetCharacterId == combatant;\r\n            case \"all_enemies\":\r\n                const actingCharacterParty = sourceCharacter.id === 0 ? 0 : 1;\r\n                return actingCharacterParty !== state.combat.combatantCombatStats[combatant].party;\r\n            default:\r\n                throw new Error();\r\n        }\r\n    });\r\n}","import {v4} from \"node-uuid\";\r\n\r\nexport function generateHitCombatResult(tick, attackingCharacterId, targetCharacterId, damageDone, otherEffects) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"hit\",\r\n        target: targetCharacterId,\r\n        actor: attackingCharacterId,\r\n        effects: [{\r\n            event: \"damage\",\r\n            value: damageDone,\r\n            target: targetCharacterId\r\n        }, ...otherEffects]\r\n    }\r\n}\r\n\r\nexport function generateMissCombatResult(tick, attackingCharacterId, targetCharacterId) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"miss\",\r\n        target: targetCharacterId,\r\n        actor: attackingCharacterId,\r\n        effects: []\r\n    }\r\n}\r\n\r\nexport function generateSkipActionResult(tick, actingCharacterId) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"action_skipped\",\r\n        actor: actingCharacterId,\r\n        effects: []\r\n    }\r\n}","import './App.css';\nimport {v4} from \"node-uuid\";\nimport * as _ from \"lodash\";\nimport React, {useEffect, useRef, useState} from \"react\";\nimport 'react-circular-progressbar/dist/styles.css';\nimport {Regions} from \"./data/Regions\";\nimport {Actions} from \"./data/Actions\";\nimport { Decimal } from \"decimal.js\";\nimport {\n    evaluateExpression,\n    getCharacter,\n    getGlobalState, getManualSpeedMultiplier,\n    loadGlobalState, reincarnateAs,\n     saveGlobalState, unpause\n} from \"./engine\";\nimport * as seedrandom from \"seedrandom\";\nimport {config} from \"./config\";\nimport {MemoryRouter, Route, Switch} from \"react-router-dom\";\nimport ReincarnationSelectionPage from \"./components/scene/ReincarnationSelectionPage\";\nimport AdventuringPage from \"./components/scene/AdventuringPage\";\nimport DebugUi from \"./components/DebugUi\";\nimport {useHotkeys} from \"react-hotkeys-hook\";\nimport {debugMessage} from \"./debugging\";\nimport SplashPage from \"./components/scene/SplashPage\";\nimport {resolveCombat} from \"./engine/combat\";\n\nloadGlobalState();\n\nconst rng = seedrandom();\n\nlet lastTime;\n\nfunction changeCurrentAction(newAction) {\n    getGlobalState().currentAction = newAction;\n    return getGlobalState().currentAction;\n}\n\nfunction pushLogItem(item) {\n    if (getGlobalState().actionLog.length > (config.actionLog.maxSize || 10)) {\n        getGlobalState().actionLog.pop();\n    }\n    getGlobalState().actionLog.unshift(item);\n}\n\n\nfunction App() {\n    const [currentEncounter, setCurrentEncounter] = useState(getGlobalState().currentEncounter);\n    const accruedTime = useRef(0);\n    const manualSpeedUpActive = useRef(false);\n    const [displayedTime, setDisplayedTime] = useState(0);\n    const [currentAction, setCurrentAction] = useState(Actions[getGlobalState().currentAction]);\n    const [actionLog, setActionLog] = useState(getGlobalState().actionLog);\n    const [nextAction, setNextAction] = useState(getGlobalState().nextAction);\n    const player = useRef(getCharacter(0));\n    const [debugUiEnabled, setDebugUiEnabled] = useState(false);\n    const [paused, setPaused] = useState(getGlobalState().paused);\n\n    useHotkeys(\"p\", () => getGlobalState().paused = !getGlobalState().paused);\n    useHotkeys(\"`\", () => {\n        setDebugUiEnabled(enabled => {\n            if (config.debug) {\n                if (!enabled) {\n                    getGlobalState().paused = true;\n                    setPaused(getGlobalState().paused);\n                }\n                saveGlobalState();\n                return !enabled\n            } else {\n                return false;\n            }\n        });\n    });\n\n    useEffect(() => {\n        function applyAction(action) {\n            pushLogItem(action);\n            switch (action.result) {\n                case \"combat-end\":\n                    if (player.current.currentHp < player.current.maximumHp) {\n                        setCurrentAction(Actions[changeCurrentAction(\"recovering\")]);\n                    } else {\n                        if (config.artifacts.enabled) {\n                            setCurrentAction(Actions[changeCurrentAction(\"looting\")]);\n                        } else {\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                        }\n                    }\n                    setCurrentEncounter(getGlobalState().currentEncounter = null);\n                    break;\n                case \"kill\":\n                    if (getGlobalState().currentEncounter.pendingActions[0].result === \"combat-end\") {\n                        if (getCharacter(0).isDamaged) {\n                            getGlobalState().nextAction = \"healing\";\n                            setNextAction(getGlobalState().nextAction);\n                        }\n                        applyAction(getGlobalState().currentEncounter.pendingActions.shift());\n                    }\n                    const enemy = getCharacter(action.target);\n                    const enemyIsLesserDemon = getCharacter(0).otherDemonIsLesserDemon(enemy);\n                    if (enemyIsLesserDemon) {\n                        debugMessage(`Not gaining power because enemy ${action.target} was a Lesser Demon.`);\n                    }\n                    if (action.actor === 0 && action.target !== 0 && !enemyIsLesserDemon) {\n                        debugMessage(\"Player killed a non-lesser enemy and gained power.\");\n                        const player = getCharacter(0);\n                        const powerToGain = enemy.powerLevel.mul(2);\n                        const powerGained = player.gainPower(powerToGain);\n                        pushLogItem(wrapLogItem({\n                            result: \"gainedPower\",\n                            value: powerGained\n                        }));\n                        getGlobalState().highestLevelReached = Decimal.max(getGlobalState().highestLevelReached, getCharacter(0).powerLevel);\n                    }\n                    break;\n                case \"hit\":\n                case \"miss\":\n                    (action.effects || []).forEach(effect => {\n                        const targetCharacter = getCharacter(effect.target);\n                        switch (effect.event) {\n                            case \"damage\":\n                                targetCharacter.currentHp = targetCharacter.currentHp.minus(effect.value);\n                                if (targetCharacter.currentHp.lt(Decimal(0))) {\n                                    targetCharacter.currentHp = Decimal(0);\n                                }\n                                if (getGlobalState().currentEncounter.pendingActions[0].result === \"kill\") {\n                                    applyAction(getGlobalState().currentEncounter.pendingActions.shift());\n                                }\n                                break;\n                            case \"apply_effect\":\n                                targetCharacter.addModifier({\n                                    effect: effect.effect,\n                                    magnitude: effect.value\n                                });\n                                break;\n                        }\n                    });\n                    break;\n                case \"action_skipped\":\n                    break;\n                default:\n                    throw new Error();\n            }\n            saveGlobalState();\n        }\n\n        function clearActionLog() {\n            setActionLog(getGlobalState().actionLog = []);\n        }\n\n        function tick(timestamp) {\n            if (!lastTime) {\n                lastTime = timestamp;\n            } else if (!getGlobalState().paused) {\n                if (accruedTime.current >= _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration)) {\n                    saveGlobalState();\n                    accruedTime.current = 0;\n                    switch (getGlobalState().currentAction) {\n                        case \"exploring\":\n                            if (getCharacter(0).currentHp.lt(getCharacter(0).maximumHp)) {\n                                setCurrentAction(Actions[changeCurrentAction(\"recovering\")]);\n                                // TODO: Implement random encounter chance\n                            } else {\n                                const player = getCharacter(0);\n                                getGlobalState().currentEncounter = Regions[getGlobalState().currentRegion].startEncounter(getCharacter(0), rng);\n                                setCurrentEncounter(getGlobalState().currentEncounter);\n                                setCurrentAction(Actions[changeCurrentAction(\"approaching\")]);\n                                getGlobalState().nextAction = getGlobalState().currentEncounter.enemies.reduce((actionSoFar, nextEnemy) => {\n                                    if (actionSoFar !== \"fighting\") {\n                                        return actionSoFar;\n                                    }\n\n                                    if (player.otherDemonIsLesserDemon(nextEnemy)) {\n                                        return \"intimidating\";\n                                    } else if (player.otherDemonIsGreaterDemon(nextEnemy)) {\n                                        return \"fleeing\";\n                                    } else {\n                                        return \"fighting\";\n                                    }\n                                }, \"fighting\");\n                                setNextAction(getGlobalState().nextAction);\n                                clearActionLog();\n                                if(getGlobalState().passivePowerIncome.gt(0)) {\n                                    const gainedPower = getCharacter(0).gainPower(getGlobalState().passivePowerIncome);\n                                    pushLogItem({\n                                        message: `Your Bound lesser demons grant you ${gainedPower.toFixed()} power.`,\n                                        uuid: v4()\n                                    });\n                                    getGlobalState().highestLevelReached = Decimal.max(getGlobalState().highestLevelReached, getCharacter(0).powerLevel);\n                                }\n\n                                const enemies = getGlobalState().currentEncounter.enemies;\n                                if (player.otherDemonIsGreaterDemon(enemies[0])) {\n                                    pushLogItem({\n                                        message: `💀Approaching Greater ${enemies[0].name}.💀`,\n                                        uuid: v4()\n                                    });\n                                } else if (player.otherDemonIsLesserDemon(enemies[0])) {\n                                    pushLogItem({\n                                        message: `Approaching Lesser ${enemies[0].name}.`,\n                                        uuid: v4()\n                                    });\n                                } else {\n                                    pushLogItem({\n                                        message: `Approaching ${enemies[0].name}.`,\n                                        uuid: v4()\n                                    });\n                                }\n                                saveGlobalState();\n                            }\n                            break;\n                        case \"approaching\": {\n                            // Since we're starting a new combat, remove any old, dead characters\n                            const player = getCharacter(0);\n                            switch (getGlobalState().nextAction) {\n                                case \"fighting\":\n                                    const enemies = getGlobalState().currentEncounter.enemies;\n                                    const combatResult = resolveCombat(rng, {\n                                        parties: [[player], enemies]\n                                    });\n                                    getGlobalState().currentEncounter.pendingActions = combatResult.rounds;\n\n                                    break;\n                            }\n                            setCurrentAction(Actions[changeCurrentAction(getGlobalState().nextAction)]);\n                            setNextAction();\n                            const deadCharacters = Object.keys(getGlobalState().characters)\n                                .filter(id => id !== '0' && !getGlobalState().currentEncounter.enemies.find(c => c.id == id));\n                            deadCharacters.forEach(id => {\n                                delete getGlobalState().characters[id]\n                            });\n                            break;\n                        }\n                        case \"intimidating\": {\n                            const enemy = getGlobalState().currentEncounter.enemies[0];\n                            const chanceToIntimidate = Decimal(5).times(Decimal(2).pow(getCharacter(0).powerLevel.minus(1).minus(enemy.powerLevel).toNumber()));\n                            const roll = Math.floor(rng.double() * 100) + 1;\n                            if (chanceToIntimidate.gte(roll)) {\n                                const periodicPowerIncreases = enemy.powerLevel;\n                                pushLogItem(wrapLogItem({\n                                    result: \"intimidated\",\n                                    target: enemy.id,\n                                    value: periodicPowerIncreases\n                                }));\n                                getGlobalState().passivePowerIncome = getGlobalState().passivePowerIncome.plus(periodicPowerIncreases);\n                            } else {\n                                pushLogItem(wrapLogItem({\n                                    message: `${getCharacter(enemy.id).name} escaped! (You rolled ${roll} vs ${chanceToIntimidate} chance to Bind).`\n                                }));\n                            }\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            break;\n                        }\n                        case \"fleeing\":\n                            const player = getCharacter(0);\n                            const enemy = getGlobalState().currentEncounter.enemies[0];\n                            getGlobalState().currentEncounter = null;\n                            setCurrentEncounter(null);\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            pushLogItem({\n                                result: \"escaped\",\n                                uuid: v4()\n                            });\n                            if (player.otherDemonIsGreaterDemon(enemy)) {\n                                const powerToGain = evaluateExpression(config.mechanics.xpFromGreaterDemon, {\n                                    $enemy: enemy\n                                });\n                                const powerGained = player.gainPower(powerToGain);\n                                getGlobalState().highestLevelReached = Decimal.max(getGlobalState().highestLevelReached, getCharacter(0).powerLevel);\n                                pushLogItem(wrapLogItem({\n                                    result: \"gainedPower\",\n                                    value: powerGained,\n                                }));\n                            }\n                            break;\n                        case \"fighting\" : {\n                            if (getGlobalState().currentEncounter.pendingActions.length) {\n                                const nextAction = getGlobalState().currentEncounter.pendingActions.shift();\n                                applyAction(nextAction);\n                                setActionLog([...getGlobalState().actionLog]);\n                            } else {\n                                setCurrentAction(Actions[changeCurrentAction(\"fleeing\")]);\n                            }\n                            break;\n                        }\n                        case \"looting\":\n                            const lootRoll = Math.floor(rng.double() * 666);\n                            if (lootRoll <= getGlobalState().currentEncounter.encounterLevel) {\n\n                            }\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            break;\n                        case \"recovering\": {\n                            const player = getCharacter(0);\n                            if (player.currentHp.lt(player.maximumHp)) {\n                                const amountToHeal = player.currentHp.plus(player.healing).gt(player.maximumHp) ?\n                                    player.maximumHp.minus(player.currentHp) : player.healing;\n                                player.currentHp = player.currentHp.plus(amountToHeal);\n                                pushLogItem({\n                                    target: player.id,\n                                    value: amountToHeal,\n                                    result: \"healed\",\n                                    uuid: v4()\n                                })\n                            }\n                            if (player.currentHp.gte(player.maximumHp)) {\n                                setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            }\n                            break;\n                        }\n                        case \"reincarnating\":\n                            setCurrentEncounter();\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            setActionLog([]);\n                            getGlobalState().actionLog = [];\n                            break;\n                        default:\n                            throw new Error(`Action ${getGlobalState().currentAction} not supported.`);\n                    }\n                }\n\n                setDisplayedTime(accruedTime.current);\n                const passedTime = timestamp - lastTime;\n                const adjustedTime = passedTime * (manualSpeedUpActive.current ? getManualSpeedMultiplier() : 1);\n                accruedTime.current = Math.min(accruedTime.current + adjustedTime, _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration));\n            }\n            lastTime = timestamp;\n            requestAnimationFrame(tick);\n            setActionLog([...getGlobalState().actionLog]);\n        }\n\n        requestAnimationFrame(tick)\n    }, []);\n\n    return (\n        <MemoryRouter initialEntries={[\n            getGlobalState().currentAction === \"reincarnating\" ? \"/reincarnatin\" : (\n                getGlobalState().currentAction === \"adventuring\" ? \"/adventuring\" : \"/\")\n        ]} basename=\"%PUBLIC_URL%\">\n            <Switch>\n                <Route path=\"/\" exact>\n                    <SplashPage/>\n                </Route>\n                <Route path=\"/reincarnating\" exact>\n                    <ReincarnationSelectionPage reincarnate={(monster, attributes) => {\n                        reincarnateAs(monster, attributes);\n                        setCurrentAction(getGlobalState().currentAction);\n                        unpause();\n                        setPaused(false);\n                        accruedTime.current = 10000000;\n                    }}/>\n                </Route>\n                <Route path=\"/adventuring\" exact>\n                    <AdventuringPage player={player.current}\n                                     paused={paused}\n                                     togglePause={(newValue) => setPaused(newValue)}\n                                     setNextAction={newAction => setNextAction(newAction)}\n                                     actionTime={displayedTime}\n                                     currentEncounter={currentEncounter}\n                                     startManualSpeedup={() => {\n                                         manualSpeedUpActive.current = config.manualSpeedup.enabled;\n                                     }}\n                                     stopManualSpeedup={() => {\n                                         manualSpeedUpActive.current = false\n                                     }}\n                                     currentAction={currentAction}\n                                     nextAction={nextAction}\n                                     actionLog={actionLog}\n                    />\n                </Route>\n            </Switch>\n            {debugUiEnabled && <DebugUi/>}\n        </MemoryRouter>\n    );\n}\n\nexport default App;\n\nfunction wrapLogItem(item) {\n    return {\n        uuid: v4(),\n        ...item\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}