{"version":3,"sources":["data/creatures.js","data/Traits.js","config.js","debugging.js","character.js","engine/CharacterCombatState.js","engine/index.js","combatResult.js","data/Regions.js","data/Actions.js","components/scene/ReincarnationSelectionPage.js","components/charactersheet/PowerLevelDisplay.js","components/charactersheet/CharacterAttributes.js","components/charactersheet/CharacterTraits.js","components/CharacterSheet.js","components/PlayerStats.js","components/TopSection.js","components/BottomSection.js","components/EnemySidebar.js","components/scene/AdventuringPage.js","components/DebugUi.js","components/scene/SplashPage.js","App.js","reportWebVitals.js","index.js"],"names":["Creatures","bloodthirstyKnight","name","traits","appearance","texture","description","rapaciousHighwayman","enabled","condemnedSlasher","crushingSnake","skitteringHorror","deadlyHornet","assertCreatureExists","id","Error","Traits","bloodrage","icon","_","on_hitting","conditions","health_percentage","target","below","effects","damage_modifier","percent","cupidity","on_intimidate","chance","steal_item_chance","murderousFrenzy","add_modifier","speed","duration","rounds","inescapableGrasp","terrifyingSkitter","on_combat_start","stunned","piercingStrike","defense_modifier","getTrait","traitId","console","log","process","REACT_APP_DEBUG_MODE","config","manualSpeedup","multiplier","artifacts","REACT_APP_FEATURE_ARTIFACTS_ENABLED","actionLog","maxSize","REACT_APP_MAX_ACTIONLOG_SIZE","encounters","lesserLevelScale","greaterLevelScale","characters","player","attributesPerLevel","mechanics","xpFromGreaterDemon","levelToPowerEquation","powerToLevelEquation","maxLevel","attack","baseAttribute","scale","defense","evasion","attackDamage","pointsPerLevel","traitRank","fatigue","penaltyPerPoint","hp","healingPerLevel","attributes","brutality","label","globalScaling","cunning","deceit","madness","combat","attributeDamageModifier","defaultMinimumDamageMultiplier","defaultMedianDamageMultiplier","defaultMaximumDamageMultiplier","baseMinimumDamageWeight","baseMedianDamageWeight","baseMaximumDamageWeight","debug","debugMessage","apply","arguments","Character","props","this","_isPc","isPc","_name","_absorbedPower","Decimal","absorbedPower","_currentHp","maximumHp","_attributes","Attributes","_combat","CombatStats","_traits","Object","keys","reduce","transformed","next","_appearance","_modifiers","modifiers","newAppearance","newTraits","other","greaterDemonScale","evaluateExpression","enemy","powerLevel","gte","plus","lesserDemonScale","lte","minus","powerGained","getLevelForPower","gt","getPowerNeededForLevel","forEach","trait","modifier","push","newHealth","lt","currentHp","mul","times","value","_brutality","_cunning","_deceit","_madness","character","characterPowerLevel","minimumDamageMultiplier","attributeModifier","round","CharacterCombatState","party","_speed","_fatigue","lastActed","baseSpeed","currentValue","canAct","nextModifier","undefined","saveKey","require","Package","expressionCache","makeAttackRoll","actingCharacter","combatState","rng","attackAccuracy","targetEvasion","getCharacter","combatantCombatStats","constructor","toFixed","roll","Math","floor","double","rawRoll","total","globalState","loadGlobalState","getGlobalState","saveGlobalState","window","localStorage","setItem","JSON","stringify","state","loaded","getItem","parse","stateReviver","creatures","regions","passivePowerIncome","unlockedMonsters","paused","currentAction","nextAction","startingPower","startingTraits","currentEncounter","manualSpeedMultiplier","currentRegion","exploration","explorationTime","approachTime","combatTime","lootingTime","recoveryTime","fleeingTime","intimidateTime","reincarnationTime","0","statuses","items","medianDamageMultiplier","maximumDamageMultiplier","tutorials","assertCharacterExists","nextMonsterId","getSpriteForCreature","resolveHit","tick","combatResult","targetCharacter","damageToInflict","damageRoll","minimumDamage","medianDamage","maximumDamage","attackResult","baseDamage","attackerDamageMultiplier","targetDefenseMultiplier","otherEffects","applyTrait","finalDamage","div","map","effect","event","source","join","attackingCharacterId","targetCharacterId","damageDone","uuid","v4","result","actor","generateHitCombatResult","resolveMiss","generateMissCombatResult","resolveSkippedAction","actingCharacterId","generateSkipActionResult","sourceCharacter","rank","rankModifier","every","condition","targetPercent","targetCurrentHealth","targetMaxHealth","currentHealthPercent","conditionMet","chanceToTrigger","$rank","traitEffect","percentDamageModifier","newMultiplier","defenseModifier","modifierToAddDefinition","effectType","effectTarget","roundDuration","ability","filter","combatantId","existingEffect","find","expression","context","Function","call","level","$level","powerPoints","$powerPoints","key","all","parsed","Number","parseFloat","isNaN","Region","available","background","candidateMinimumLevel","minimumLevel","candidateMaxLevel","maximumLevel","encounterLevelModifier","toNumber","encounterLevel","max","encounterDef","region","possibleEncounters","encounterId","encounterEnabled","debugNotDisabled","randomKey","random","length","chooseRandomEncounter","pendingActions","enemies","flatMap","enemyDef","count","i","nextId","generateCreature","Regions","forest","type","far","mid","close","caves","mountains","desert","Actions","exploring","approaching","looting","fleeing","fighting","reincarnating","recovering","intimidating","ReincarnationSelectionPage","useRef","history","useHistory","currentCreature","useState","substring","setAttributes","newStartingPower","current","pow","spendableBonusPoints","useEffect","Grid","container","item","xs","style","textAlign","concat","currentStartingRank","combinedLevel","Tooltip","title","dangerouslySetInnerHTML","__html","src","attribute","Button","disabled","eq","values","x","onClick","alignItems","justify","creatureEnabled","debugEnabled","variant","height","width","reincarnate","PowerLevelDisplay","powerLevelDisplay","useMemo","Fragment","CharacterAttributes","Help","CharacterTraits","CharacterSheet","spriteSrc","combinedHitWeights","minimumDamageWeight","medianDamageWeight","maximumDamageWeight","powerRequiredForCurrentLevel","powerNeededForNextLevel","progressToNextLevel","styles","root","backgroundColor","PlayerStats","Paper","elevation","display","flex","buttons","TopSection","reincarnateEnabled","color","justifyContent","flexDirection","actions","alignSelf","action","maxHeight","actionProgress","overflowY","BottomSection","onMouseEnter","startManualSpeedup","onMouseLeave","stopManualSpeedup","togglePause","actionButton","actionTime","message","direction","describeEffect","reason","printActionItem","mod","percentModifier","text","setNextAction","nextActionName","EnemySidebar","overflow","image","position","left","AdventuringPage","className","zIndex","newAction","minHeight","bottom","padding","DebugUi","setCreatures","setRegions","minLevel","setMinLevel","setMaxLevel","setManualSpeedMultiplier","playerAbsorbedPower","setPlayerAbsorbedPower","removeItem","alert","TextField","onChange","e","newValue","parseInt","min","regionId","pkg","changelog","SplashPage","version","entry","lastTime","seedrandom","changeCurrentAction","pushLogItem","pop","unshift","App","setCurrentEncounter","accruedTime","manualSpeedUpActive","displayedTime","setDisplayedTime","setCurrentAction","setActionLog","debugUiEnabled","setDebugUiEnabled","setPaused","useHotkeys","applyAction","isDamaged","shift","enemyIsLesserDemon","otherDemonIsLesserDemon","powerToGain","gainPower","wrapLogItem","addModifier","magnitude","requestAnimationFrame","timestamp","startEncounter","actionSoFar","nextEnemy","otherDemonIsGreaterDemon","definition","listeners","winner","notifyListener","listener","a","combatants","parties","partyIndex","characterIndex","combatant","otherCombatant","resolveRound","sort","b","initiativeCount","wrapped","isAlive","alive","characterSpeed","acting","enemyParty","livingEnemies","attackRollResult","playerPartyDead","enemyPartyDead","setTimeout","onRoundResolved","getPrevious","resolveCombat","lastRound","c","chanceToIntimidate","periodicPowerIncreases","$enemy","amountToHeal","healing","adjustedTime","debugMultiplier","baseMultiplier","getManualSpeedMultiplier","initialEntries","basename","path","exact","monster","monsterId","newAttributes","currentDemon","options","m","reincarnateAs","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e05c6f80.chunk.js","sourcesContent":["export const Creatures  = {\r\n    bloodthirstyKnight: {\r\n        name: \"Bloodthirsty Knight\",\r\n        traits: [\"bloodrage\"],\r\n        appearance: \"bloodthirstyKnight\",\r\n        texture: \"01_warrior.png\",\r\n        description: \"A ruthless warrior who delighted in slaughtering whoever they encounter on the battlefield.\",\r\n    },\r\n    rapaciousHighwayman: {\r\n        name: \"Rapacious Highwayman\",\r\n        traits: [\"cupidity\"],\r\n        enabled: false,\r\n        appearance: \"rapaciousHighwayman\",\r\n        texture: \"02_hunter.png\",\r\n        description: \"A thief who stole from whomever he could get away with, from wealthy merchants to starving vagrants.\",\r\n    },\r\n    condemnedSlasher: {\r\n        name: \"Condemned Slasher\",\r\n        traits: [\"murderousFrenzy\"],\r\n        appearance: \"condemnedSlasher\",\r\n        texture: \"03_rogue.png\",\r\n        description: \"A madman who gained exquisite pleasure from seeing how many cuts could be made in a victim's body before they died.\",\r\n    },\r\n    crushingSnake: {\r\n        name: \"Crushing Snake\",\r\n        traits: [\"inescapableGrasp\"],\r\n        appearance: \"crushingSnake\",\r\n        texture: \"06_snake_01.png\",\r\n        description: \"A monstrous reptile which\",\r\n    },\r\n    skitteringHorror: {\r\n        name: \"Skittering Horror\",\r\n        traits: [\"terrifyingSkitter\"],\r\n        appearance: \"skitteringHorror\",\r\n        texture: \"10_spider.png\",\r\n        description: \"A massive spider that enjoys stalking its prey, frightening it by the sickening skittering of it's arachnid legs.\"\r\n    },\r\n    deadlyHornet: {\r\n        name: \"Deadly Hornet\",\r\n        traits: [\"piercingStrike\"],\r\n        appearance: \"deadlyHornet\",\r\n        texture: \"12_wasp.png\",\r\n        description: \"An insect whose stinger is able to pierce even metal protection.\"\r\n    }\r\n}\r\n\r\nexport function assertCreatureExists(id) {\r\n    if(!Creatures[id]) {\r\n        throw new Error(`No creature with id ${id} is defined`);\r\n    }\r\n}","import * as _ from \"lodash\";\r\n// FIXME: Implement validation\r\nexport const Traits = {\r\n    bloodrage: {\r\n        name: \"Blood Rage\",\r\n        icon: \"icons/icons-139.png\",\r\n        description: _.template(\"This demon's unquenchable thirst for blood gives a <span style='color: red'>${rank.times(10)}%</span> bonus to Damage against enemies with <span style='color: red'>50% or less</span> health.\"),\r\n        on_hitting: {\r\n            conditions : {\r\n                health_percentage: {\r\n                    target: \"target\",\r\n                    below: 50\r\n                }\r\n            },\r\n            effects: {\r\n                damage_modifier: {\r\n                    percent: \"$rank.times(10)\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    cupidity: {\r\n        name: \"Cupidity\",\r\n        icon: \"icons/icons-2503.png\",\r\n        description: _.template(\"When this demon successfully Intimidates another demon, it gains a <span style='color: red'>${rank}%</span> chance to seize the intimidated demon's Artifacts as though it were killed.\"),\r\n        on_intimidate: {\r\n            conditions: {\r\n                chance: \"$rank\"\r\n            },\r\n            effects: {\r\n                steal_item_chance: {\r\n                    target: \"enemies\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    murderousFrenzy: {\r\n        name: \"Murderous Frenzy\",\r\n        icon: \"icons/icons-118.png\",\r\n        description: _.template(\"After hitting an enemy with an attack this Demon frenzies, gaining a <span style='color: orangered'>${rank}%</span> bonus to <span style='color: lightgreen'>Attack Speed</span> for 2 rounds.\"),\r\n        on_hitting: {\r\n            effects: {\r\n                add_modifier: {\r\n                    speed: {\r\n                        target: \"attacker\",\r\n                        percent: \"$rank\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: 2\r\n            }\r\n        }\r\n    },\r\n    inescapableGrasp: {\r\n        name: \"Inescapable Grasp\",\r\n        icon: \"icons/icons-2221.png\",\r\n        description: _.template(\"You bind your victims when you strike, causing a <span style='color: orangered'>${rank}%</span> penalty to their <span style='color: lightgreen'>Action Speed</span> for 2 rounds.\"),\r\n        on_hitting: {\r\n            effects: {\r\n                add_modifier: {\r\n                    speed: {\r\n                        target: \"attacked\",\r\n                        percent: \"$rank.times(-1)\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: 2\r\n            }\r\n        }\r\n    },\r\n    terrifyingSkitter: {\r\n        name: \"Terrifying Skitter\",\r\n        icon: \"icons/icons-2260.png\",\r\n        description: _.template(\"The sickening sound of your feet on the ground unnerves even other demons, giving a <span style='color: orangered'>75%</span> chance to make the enemy <span style='color: violet'>Terrified</span> for <span style='color: lightblue'>${rank.div(10).round(0, 0).plus(1).toFixed()}</span> round(s), stunning them.\"),\r\n        on_combat_start: {\r\n            conditions: {\r\n                chance: 50\r\n            },\r\n            effects: {\r\n                add_modifier: {\r\n                    stunned: {\r\n                        target: \"all_enemies\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: \"$rank.div(10).round(0, 0).plus(1)\"\r\n            }\r\n        }\r\n    },\r\n    piercingStrike: {\r\n        name: \"Piercing Strike\",\r\n        icon: \"icons/icons-113.png\",\r\n        description: _.template(\"Your relentless attacks are designed to get around the enemy's defenses. Against your attacks the enemy's <span style='color: lightgreen'>Defense</span> is reduced by <span style='color: orangered'>${rank}%</span>\"),\r\n        on_hitting: {\r\n            effects: {\r\n                defense_modifier: {\r\n                    percent: \"$rank.times(-1)\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTrait(traitId) {\r\n    return Traits[traitId];\r\n}","import * as _ from \"lodash\";\r\nconsole.log(process.env.REACT_APP_DEBUG_MODE, typeof process.env.REACT_APP_DEBUG_MODE);\r\n\r\nexport const config = {\r\n    manualSpeedup: {\r\n        enabled: true,\r\n        multiplier: 2\r\n    },\r\n    artifacts: {\r\n        enabled: process.env.REACT_APP_FEATURE_ARTIFACTS_ENABLED || false\r\n    },\r\n    actionLog: {\r\n        maxSize:  process.env.REACT_APP_MAX_ACTIONLOG_SIZE || 20,\r\n    },\r\n    encounters: {\r\n        lesserLevelScale: 2, // A demon is \"lesser\" than another when its level is this much lower.\r\n        greaterLevelScale: 2 // A demon is \"greater\" than another when its level is this much higher.\r\n    },\r\n    characters: {\r\n        player: {\r\n            attributesPerLevel: 2\r\n        }\r\n    },\r\n    mechanics: {\r\n        xpFromGreaterDemon: \"$enemy.powerLevel\",\r\n        levelToPowerEquation: \"$level.eq(1) ? Decimal(0) : Decimal(10).pow($level.minus(1).toNumber())\",\r\n        powerToLevelEquation: \"Decimal(0).eq($powerPoints) ? Decimal(1) : Decimal.log($powerPoints, 10).plus(1).floor()\",\r\n        maxLevel: 100,\r\n        attack: { // Determines how attack rolls work\r\n            baseAttribute: \"deceit\",\r\n            scale: 5\r\n        },\r\n        defense: {\r\n            baseAttribute: \"brutality\",\r\n            scale: 5\r\n        },\r\n        evasion: {\r\n            baseAttribute: \"cunning\",\r\n            scale: 5\r\n        },\r\n        attackDamage: {\r\n            pointsPerLevel: 5,\r\n            baseAttribute: \"brutality\",\r\n            scale: 5\r\n        },\r\n        traitRank: {\r\n            baseAttribute: \"madness\",\r\n            scale: 5\r\n        },\r\n        fatigue: {\r\n            penaltyPerPoint: 2\r\n        },\r\n        hp: {\r\n            pointsPerLevel: 25,\r\n            healingPerLevel: 5\r\n        }\r\n    },\r\n    attributes: {\r\n        brutality: {\r\n            label: \"Brutality\",\r\n            globalScaling: 1,\r\n            description: _.template(`Brutality is how savage and ruthless a Demon is. It gives a \\${5 * rank}% bonus to attack damage, defense and intimidation checks.`),\r\n            icon: \"icons/icons-92.png\"\r\n        },\r\n        cunning: {\r\n            label: \"Cunning\",\r\n            globalScaling: 1,\r\n            description: _.template(\"Cunning is how quick thinking a Demon is. It gives a ${5 * rank}% bonus to Evasion, and non-combat encounters.\"),\r\n            icon: \"icons/icons-24.png\"\r\n        },\r\n        deceit: {\r\n            label: \"Deceit\",\r\n            globalScaling: 1,\r\n            description: _.template(\"Deceit is how underhanded and manipulative a Demon is. It gives a ${5 * rank}% bonus to Accuracy and social encounters.\"),\r\n            icon: \"icons/icons-17.png\"\r\n        },\r\n        madness: {\r\n            label: \"Madness\",\r\n            globalScaling: 1,\r\n            description: _.template(\"Madness is how disconnected from the limits of reality the Demon is. It gives a ${5 * rank}% bonus to the effect of wielded Artifacts and the effects of Traits.\"),\r\n            icon: \"icons/icons-124.png\"\r\n        }\r\n    },\r\n    combat: {\r\n        attributeDamageModifier: .02,\r\n        defaultMinimumDamageMultiplier: .5,\r\n        defaultMedianDamageMultiplier: 1,\r\n        defaultMaximumDamageMultiplier: 1.5,\r\n        baseMinimumDamageWeight: 20,\r\n        baseMedianDamageWeight: 60,\r\n        baseMaximumDamageWeight: 20\r\n    },\r\n    debug: process.env.REACT_APP_DEBUG_MODE === \"true\"\r\n}","import {config} from \"./config\";\r\n\r\nexport function debugMessage() {\r\n    if(config.debug) {\r\n        console.debug.apply(null, arguments);\r\n    }\r\n}","import {config} from \"./config\";\r\nimport {evaluateExpression, getLevelForPower, getPowerNeededForLevel} from \"./engine\";\r\nimport {Creatures} from \"./data/creatures\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nexport class Character {\r\n    constructor(props) {\r\n        this._isPc = props.isPc || props._isPc;\r\n        this.id = props.id;\r\n        this._name = props.name || props._name;\r\n        this._absorbedPower = Decimal(props.absorbedPower || props._absorbedPower || 0);\r\n        this._currentHp = Decimal(props._currentHp || this.maximumHp);\r\n        this._attributes = new Attributes(props.attributes || props._attributes);\r\n        this._combat = new CombatStats(props.combat || props._combat, this);\r\n        this._traits = Object.keys(props.traits || props._traits).reduce((transformed, next) => {\r\n            transformed[next] = Decimal((props.traits || props._traits)[next]);\r\n            return transformed;\r\n        }, {});\r\n        this._appearance = props.appearance || props._appearance;\r\n        this._modifiers = props.modifiers || props._modifiers || [];\r\n    }\r\n\r\n    get isPc(){\r\n        return this._isPc;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get powerLevel() {\r\n        return getLevelForPower(this._absorbedPower);\r\n    }\r\n\r\n    get currentHp() {\r\n        return this._currentHp;\r\n    }\r\n\r\n    set currentHp(newHealth) {\r\n        if(this.maximumHp.lt(newHealth)) {\r\n            this._currentHp = this.maximumHp;\r\n        } else {\r\n            this._currentHp = newHealth;\r\n        }\r\n    }\r\n\r\n    get alive() {\r\n        return this.currentHp > 0;\r\n    }\r\n\r\n    get maximumHp() {\r\n        return this.powerLevel\r\n            .mul(config.mechanics.hp.pointsPerLevel)\r\n            .plus(this._isPc ? 5 : 0);\r\n    }\r\n\r\n    get attributes() {\r\n        return this._attributes;\r\n    }\r\n\r\n    get combat() {\r\n        return this._combat;\r\n    }\r\n\r\n    get traits() {\r\n        return this._traits;\r\n    }\r\n\r\n    set traits(newTraits) {\r\n        this._traits = newTraits;\r\n    }\r\n\r\n    get appearance() {\r\n        return this._appearance;\r\n    }\r\n\r\n    reincarnate(newAppearance, newTraits) {\r\n        this._appearance = newAppearance;\r\n        this._traits = newTraits;\r\n    }\r\n\r\n    otherDemonIsGreaterDemon(other) {\r\n        const greaterDemonScale = evaluateExpression(config.encounters.greaterLevelScale, {\r\n            player: this,\r\n            enemy: other\r\n        });\r\n        return other.powerLevel.gte(this.powerLevel.plus(greaterDemonScale));\r\n    }\r\n\r\n    otherDemonIsLesserDemon(other) {\r\n        const lesserDemonScale = evaluateExpression(config.encounters.lesserLevelScale, {\r\n            player: this,\r\n            enemy: other\r\n        });\r\n        return other.powerLevel.lte(this.powerLevel.minus(lesserDemonScale));\r\n    }\r\n\r\n    gainPower(powerGained) {\r\n        this._absorbedPower = this._absorbedPower.plus(powerGained);\r\n        if(getLevelForPower(this._absorbedPower).gt(config.mechanics.maxLevel)) {\r\n            this._absorbedPower = getPowerNeededForLevel(config.mechanics.maxLevel);\r\n        }\r\n        Creatures[this.appearance].traits.forEach(trait => {\r\n            this._traits[trait] = getLevelForPower(this._absorbedPower);\r\n        });\r\n    }\r\n\r\n    get healing() {\r\n        return Decimal(this.powerLevel.times(config.mechanics.hp.healingPerLevel));\r\n    }\r\n\r\n    get absorbedPower() {\r\n        return this._absorbedPower;\r\n    }\r\n\r\n    set absorbedPower(value){\r\n        this._absorbedPower = value;\r\n        if(getLevelForPower(this._absorbedPower).gt(config.mechanics.maxLevel)) {\r\n            this._absorbedPower = getPowerNeededForLevel(config.mechanics.maxLevel);\r\n        }\r\n        if(this.appearance) {\r\n            Creatures[this.appearance].traits.forEach(trait => {\r\n                this._traits[trait] = getLevelForPower(this._absorbedPower);\r\n            });\r\n        }\r\n    }\r\n\r\n    get speed() {\r\n        return Decimal(100);\r\n    }\r\n\r\n    addModifier(modifier) {\r\n        this._modifiers.push(modifier);\r\n    }\r\n\r\n    get modifiers() {\r\n        return this._modifiers;\r\n    }\r\n}\r\n\r\nclass Attributes {\r\n    constructor(attributes) {\r\n        this._brutality = attributes.brutality || attributes._brutality || 0;\r\n        this._cunning = attributes.cunning || attributes._cunning || 0;\r\n        this._deceit = attributes.deceit || attributes._deceit || 0;\r\n        this._madness = attributes.madness || attributes._madness || 0;\r\n    }\r\n\r\n    get brutality() {\r\n        return this._brutality;\r\n    }\r\n\r\n    get cunning() {\r\n        return this._cunning;\r\n    }\r\n\r\n    get deceit() {\r\n        return this._deceit;\r\n    }\r\n\r\n    get madness() {\r\n        return this._madness;\r\n    }\r\n}\r\n\r\nclass CombatStats {\r\n    constructor(props, character) {\r\n        this.character = function() {\r\n            return character;\r\n        }\r\n        this.fatigue = 0;\r\n    }\r\n\r\n    get minimumDamageWeight() {\r\n        return Decimal(config.combat.baseMinimumDamageWeight);\r\n    }\r\n\r\n    get medianDamageWeight() {\r\n        return Decimal(config.combat.baseMedianDamageWeight);\r\n    }\r\n\r\n    get maximumDamageWeight() {\r\n        return Decimal(config.combat.baseMaximumDamageWeight);\r\n    }\r\n\r\n    get minimumDamage() {\r\n        const characterPowerLevel = this.character().powerLevel;\r\n        const minimumDamageMultiplier = config.combat.defaultMinimumDamageMultiplier;\r\n        const attributeModifier = this.character().attributes.brutality * config.combat.attributeDamageModifier;\r\n        return characterPowerLevel\r\n            .times(config.mechanics.attackDamage.pointsPerLevel)\r\n            .times(minimumDamageMultiplier)\r\n            .times(1 + attributeModifier).round(0, 3);\r\n    }\r\n\r\n    get medianDamage() {\r\n        const characterPowerLevel = this.character().powerLevel;\r\n        const minimumDamageMultiplier = config.combat.defaultMedianDamageMultiplier;\r\n        const attributeModifier = this.character().attributes.brutality * config.combat.attributeDamageModifier;\r\n        return characterPowerLevel\r\n            .times(config.mechanics.attackDamage.pointsPerLevel)\r\n            .times(minimumDamageMultiplier)\r\n            .times(1 + attributeModifier).round(0, 3);\r\n    }\r\n\r\n    get maximumDamage() {\r\n        const characterPowerLevel = this.character().powerLevel;\r\n        const minimumDamageMultiplier = config.combat.defaultMaximumDamageMultiplier;\r\n        const attributeModifier = this.character().attributes.brutality * config.combat.attributeDamageModifier;\r\n        return characterPowerLevel\r\n            .times(config.mechanics.attackDamage.pointsPerLevel)\r\n            .times(minimumDamageMultiplier)\r\n            .times(1 + attributeModifier).round(0, 3);\r\n    }\r\n\r\n    get canAct() {\r\n        return true;\r\n    }\r\n}","export default class CharacterCombatState {\r\n    constructor(props) {\r\n        this.party = props.party;\r\n        this.hp = props.hp;\r\n        this._speed = props.speed;\r\n        this._fatigue = 0;\r\n        this.lastActed = 0;\r\n        this.modifiers = [];\r\n    }\r\n\r\n    get speed() {\r\n        const baseSpeed = this._speed;\r\n        const modifiedSpeed = this.modifiers.reduce((currentValue, modifier) => {\r\n            if(modifier.effects.speed) {\r\n                const multiplier = (modifier.effects.speed.percent.plus(100))/100\r\n                return currentValue.mul(multiplier);\r\n            }\r\n            return currentValue;\r\n        }, baseSpeed);\r\n        return modifiedSpeed;\r\n    }\r\n\r\n    get fatigue() {\r\n        return this._fatigue;\r\n    }\r\n\r\n    set fatigue(fatigue) {\r\n        this._fatigue = fatigue;\r\n    }\r\n\r\n    get canAct() {\r\n        return this.modifiers.reduce((canAct, nextModifier) => {\r\n            if(nextModifier.effects.stunned !== undefined) {\r\n                return false;\r\n            } else {\r\n                return canAct;\r\n            }\r\n        }, true)\r\n    }\r\n}","import * as _ from \"lodash\";\r\nimport {assertCreatureExists, Creatures} from \"../data/creatures\";\r\nimport {v4} from \"node-uuid\";\r\nimport {getTrait} from \"../data/Traits\";\r\nimport {debugMessage} from \"../debugging\";\r\nimport { Decimal } from \"decimal.js\";\r\nimport {Character} from \"../character\";\r\nimport {config} from \"../config\";\r\nimport {generateHitCombatResult, generateMissCombatResult, generateSkipActionResult} from \"../combatResult\";\r\nimport CharacterCombatState from \"./CharacterCombatState\";\r\nimport * as Package from \"../../package.json\";\r\n\r\nexport const saveKey = require(\"md5\")(`hell-conquest-${Package.version}`);\r\n\r\nconst expressionCache = {};\r\n\r\nexport function resolveCombat(rng, definition) {\r\n    const listeners = [];\r\n    const combatResult = {\r\n        rounds: [],\r\n        winner: null,\r\n        combatantCombatStats: {}\r\n    }\r\n\r\n    async function notifyListener(listener) {\r\n        listener(combatResult, _.takeRight(combatResult.rounds)[0]);\r\n    }\r\n\r\n    const combatants = _.flatMap(definition.parties.map((party, partyIndex) => {\r\n        return party.map((character, characterIndex) => {\r\n            combatResult.combatantCombatStats[character.id] = new CharacterCombatState({\r\n                hp: character.currentHp,\r\n                speed: character.speed,\r\n                party: partyIndex\r\n            });\r\n            return {\r\n                character,\r\n                party: partyIndex\r\n            }\r\n        })\r\n    }));\r\n    debugMessage(\"Beginning combat\")\r\n    // Trigger start of combat effects.\r\n    combatants.forEach(combatant => Object.keys(combatant.character.traits).forEach(trait => {\r\n        combatants.filter(other => other !== combatant).forEach(otherCombatant => {\r\n            applyTrait(combatant.character, otherCombatant.id, getTrait(trait), combatant.character.traits[trait], \"on_combat_start\", {combat: combatResult}, 0, rng);\r\n        });\r\n    }))\r\n    let tick = 0;\r\n    const resolveRound = async function () {\r\n        const initiatives = _.uniq(combatants.map(combatant => Math.floor(Decimal(10000).div(combatResult.combatantCombatStats[combatant.character.id].speed).toNumber())))\r\n            .sort((a, b) => a - b);\r\n        initiatives.forEach(initiativeCount => {\r\n            // TODO: Activate/deactivate traits\r\n            const actingCharacters = combatants\r\n                .filter(wrapped => {\r\n                    const isAlive = wrapped.character.alive;\r\n                    const characterSpeed = Math.floor(Decimal(10000).div(combatResult.combatantCombatStats[wrapped.character.id].speed).toNumber());\r\n                    const matchingSpeed = (initiativeCount % characterSpeed === 0);\r\n                    return isAlive && matchingSpeed;\r\n                });\r\n            actingCharacters.forEach(acting => {\r\n                const character = acting.character;\r\n                tick = combatResult.combatantCombatStats[character.id].lastActed + Math.floor(Decimal(10000).div(combatResult.combatantCombatStats[character.id].speed).toNumber());\r\n                combatResult.combatantCombatStats[character.id].lastActed = tick;\r\n                debugMessage(`Tick ${tick}: Resolving action by character '${character.id}'.`);\r\n                if (combatResult.combatantCombatStats[character.id].hp.lte(0)) {\r\n                    debugMessage(`Tick ${tick}: Character ${character.id} was dead when their turn to act came up, skipping their action.`);\r\n                    return;\r\n                }\r\n                // The acting character performs an attack.\r\n                const enemyParty = (acting.party + 1) % 2;\r\n                const livingEnemies = definition.parties[enemyParty]\r\n                    .filter(enemy => combatResult.combatantCombatStats[enemy.id].hp.gt(0));\r\n                const target = _.get(livingEnemies[Math.floor(rng.double() * livingEnemies.length)], \"id\");\r\n                if (target === undefined) {\r\n                    debugMessage(`Tick ${tick}: No valid target, skipping action by ${character.id}.`);\r\n                    return;\r\n                }\r\n                if (combatResult.combatantCombatStats[character.id].canAct) {\r\n                    debugMessage(`Tick ${tick}: Attacking ${target}`);\r\n                    const attackRollResult = makeAttackRoll(character, target, combatResult, rng);\r\n\r\n                    // Trigger on-attack effects\r\n                    if (attackRollResult.total >= 50) {\r\n                        debugMessage(`Tick ${tick}: ${character.id} rolled ${attackRollResult.total}, a hit.`);\r\n                        resolveHit(tick, combatResult, character, target, rng);\r\n                    } else {\r\n                        debugMessage(`Tick ${tick}: ${character.id} rolled ${attackRollResult.total}, a miss.`);\r\n                        resolveMiss(tick, combatResult, character, target, rng);\r\n                        // TODO: Trigger on-miss effects\r\n                    }\r\n                } else {\r\n                    debugMessage(`${tick}: Character skips their action.`);\r\n                    resolveSkippedAction(tick, combatResult, character);\r\n                }\r\n                listeners.forEach(notifyListener);\r\n                Object.keys(combatResult.combatantCombatStats).forEach(combatantId => {\r\n                    if (combatResult.combatantCombatStats[combatantId].hp.lte(0)) {\r\n                        debugMessage(`Tick ${tick}: Combatant ${combatantId} died`);\r\n                        combatResult.rounds.push({\r\n                            uuid: v4(),\r\n                            tick,\r\n                            actor: character.id,\r\n                            target: Number.parseInt(combatantId),\r\n                            result: \"kill\"\r\n                        });\r\n                        listeners.forEach(notifyListener);\r\n                    }\r\n                });\r\n                combatResult.combatantCombatStats[acting.character.id].fatigue++;\r\n                // TODO: Add logs for when effects expire.\r\n                combatResult.combatantCombatStats[acting.character.id].modifiers = combatResult.combatantCombatStats[acting.character.id].modifiers\r\n                    .map(modifier => {\r\n                        modifier.roundDuration = Decimal(modifier.roundDuration).minus(1);\r\n                        return modifier;\r\n                    })\r\n                    .filter(modifier => Decimal(modifier.roundDuration).gt(0))\r\n\r\n            });\r\n        });\r\n        const playerPartyDead = definition.parties[0].every(character => combatResult.combatantCombatStats[character.id].hp.lte(0));\r\n        const enemyPartyDead = definition.parties[1].every(character => combatResult.combatantCombatStats[character.id].hp.lte(0));\r\n        if (playerPartyDead || enemyPartyDead) {\r\n            if (playerPartyDead) {\r\n                debugMessage(\"Every member of party 0 is dead\")\r\n                combatResult.rounds.push({\r\n                    uuid: v4(),\r\n                    tick,\r\n                    winner: 1,\r\n                    result: \"combat-end\"\r\n                })\r\n                combatResult.winner = 1;\r\n                listeners.forEach(notifyListener);\r\n                // Clear all end of combat\r\n            } else if (enemyPartyDead) {\r\n                debugMessage(\"Every member of party 1 is dead\")\r\n                combatResult.rounds.push({\r\n                    uuid: v4(),\r\n                    tick,\r\n                    winner: 0,\r\n                    result: \"combat-end\",\r\n                });\r\n                combatResult.winner = 0;\r\n                listeners.forEach(notifyListener);\r\n            }\r\n\r\n        } else {\r\n            debugMessage(\"No winner, combat continues\");\r\n            setTimeout(resolveRound);\r\n        }\r\n    };\r\n    setTimeout(resolveRound)\r\n    return {\r\n        onRoundResolved: async function (listener, getPrevious) {\r\n            listeners.push(listener);\r\n            notifyListener(listener);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction makeAttackRoll(actingCharacter, target, combatState, rng) {\r\n    const attackAccuracy = actingCharacter.attributes[config.mechanics.attack.baseAttribute].times(config.mechanics.attack.scale);\r\n    const targetEvasion = getCharacter(target).attributes[config.mechanics.evasion.baseAttribute].times(config.mechanics.evasion.scale)\r\n        .minus(Decimal(config.mechanics.fatigue.penaltyPerPoint).times(combatState.combatantCombatStats[target].fatigue));\r\n    // TODO: Validation\r\n    if (targetEvasion.constructor.name !== \"Decimal\") {\r\n        throw new Error(\"Evasion had the wrong type\");\r\n    }\r\n    debugMessage(\"Making an attack roll. Attacker Accuracy:\", attackAccuracy.toFixed(), \"Target Evasion:\", targetEvasion.toFixed());\r\n    const roll = Math.floor((rng.double() * 100));\r\n    return {\r\n        rawRoll: roll,\r\n        attackAccuracy,\r\n        targetEvasion,\r\n        total: attackAccuracy.minus(targetEvasion).plus(roll)\r\n    };\r\n}\r\n\r\nlet globalState = loadGlobalState()\r\n\r\nexport function getGlobalState() {\r\n    return globalState;\r\n}\r\n\r\nexport function saveGlobalState() {\r\n    window.localStorage.setItem(saveKey, JSON.stringify(globalState));\r\n}\r\n\r\nexport function loadGlobalState(state) {\r\n    const loaded = window.localStorage.getItem(saveKey);\r\n    return loaded ? JSON.parse(loaded, stateReviver) : {\r\n        debug: {\r\n            creatures: {},\r\n            regions: {}\r\n        },\r\n        passivePowerIncome: Decimal(0),\r\n        unlockedMonsters: {},\r\n        paused: true,\r\n        currentAction: null,\r\n        nextAction: null,\r\n        id: 0,\r\n        startingPower: Decimal(0), //The amount of absorbed power the player starts with when they reincarnate\r\n        startingTraits: {},\r\n        currentEncounter: null,\r\n        manualSpeedMultiplier: config.manualSpeedup.multiplier,\r\n        currentRegion: \"forest\",\r\n        actionLog: [],\r\n        exploration: {\r\n            explorationTime: 15 * 1000,\r\n            approachTime: 15 * 1000,\r\n            combatTime: 5 * 1000,\r\n            lootingTime: 15 * 1000,\r\n            recoveryTime: 2 * 1000,\r\n            fleeingTime: 15 * 1000,\r\n            intimidateTime: 15 * 1000,\r\n            reincarnationTime: 1\r\n        },\r\n        characters: {\r\n            0: new Character({\r\n                id: 0,\r\n                isPc: true,\r\n                name: \"You\",\r\n                powerLevel: Decimal(1),\r\n                absorbedPower: Decimal(0),\r\n                appearance: \"\",\r\n                statuses: {},\r\n                traits: {},\r\n                items: [],\r\n                attributes: {\r\n                    brutality: Decimal(0),\r\n                    cunning: Decimal(0),\r\n                    deceit: Decimal(0),\r\n                    madness: Decimal(0)\r\n                },\r\n                combat: {\r\n                    fatigue: 0,\r\n                    minimumDamageMultiplier: .5,\r\n                    medianDamageMultiplier: 1,\r\n                    maximumDamageMultiplier: 1.5\r\n                }\r\n            })\r\n        },\r\n        tutorials: {}\r\n    }\r\n}\r\n\r\nexport function getCharacter(id) {\r\n    assertCharacterExists(id);\r\n    return globalState.characters[id];\r\n}\r\n\r\nlet nextMonsterId = 1;\r\n\r\nexport function generateCreature(id, powerLevel, rng) {\r\n    assertCreatureExists(id);\r\n    if (config.debug) {\r\n        debugMessage(`Generating creature with id ${id} and level ${powerLevel}`);\r\n    }\r\n    if (powerLevel === undefined) {\r\n        throw new Error(\"No powerLevel\");\r\n    }\r\n    if (Number.isNaN(powerLevel)) {\r\n        throw new Error(\"Level cannot be NaN\");\r\n    }\r\n    const nextId = nextMonsterId++;\r\n    globalState.characters[nextId] = new Character({\r\n        id: nextId,\r\n        ...Creatures[id],\r\n        traits: Creatures[id].traits.reduce((traits, next) => {\r\n            traits[next] = powerLevel;\r\n            return traits;\r\n        }, {}),\r\n        absorbedPower: getPowerNeededForLevel(powerLevel),\r\n        artifacts: [],\r\n        statuses: [],\r\n        attributes: {\r\n            brutality: Decimal(0),\r\n            cunning: Decimal(0),\r\n            deceit: Decimal(0),\r\n            madness: Decimal(0)\r\n        },\r\n        combat: {\r\n            fatigue: 0,\r\n            minimumDamageMultiplier: .5,\r\n            medianDamageMultiplier: 1,\r\n            maximumDamageMultiplier: 1.5\r\n        }\r\n    });\r\n    saveGlobalState();\r\n    return globalState.characters[nextId];\r\n}\r\n\r\n\r\nexport function getSpriteForCreature(name) {\r\n    assertCreatureExists(name);\r\n    return `monsters/${Creatures[name].texture}`;\r\n}\r\n\r\nfunction assertCharacterExists(id) {\r\n    if (!globalState.characters[id]) {\r\n        throw new Error(`No creature exists for '${id}'`);\r\n    }\r\n}\r\n\r\nfunction resolveHit(tick, combatResult, actingCharacter, targetCharacter, rng) {\r\n    if (typeof actingCharacter !== \"object\") {\r\n        throw new Error(`Acting character was not an object!`);\r\n    }\r\n    if (typeof targetCharacter !== \"number\") {\r\n        throw new Error(`Target character was not an object!`);\r\n    }\r\n    const damageRoll = Math.floor(rng.double() * 100);\r\n    let damageToInflict;\r\n    if (damageRoll <= 20) {\r\n        damageToInflict = actingCharacter.combat.minimumDamage;\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a glancing hit for ${damageToInflict}.`);\r\n    } else if (damageRoll <= 80) {\r\n        damageToInflict = actingCharacter.combat.medianDamage;\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a solid hit for ${damageToInflict}.`);\r\n    } else {\r\n        damageToInflict = actingCharacter.combat.maximumDamage;\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a critical hit for ${damageToInflict}.`);\r\n    }\r\n    const attackResult = {\r\n        baseDamage: damageToInflict,\r\n        attackerDamageMultiplier: Decimal(actingCharacter.attributes[config.mechanics.attackDamage.baseAttribute])\r\n            .times(config.mechanics.attackDamage.scale),\r\n        targetDefenseMultiplier: Decimal(getCharacter(targetCharacter).attributes[config.mechanics.defense.baseAttribute])\r\n            .times(config.mechanics.defense.scale),\r\n        otherEffects: []\r\n    }\r\n    // Trigger on-hit effects\r\n    Object.keys(actingCharacter.traits).forEach(trait => applyTrait(actingCharacter, targetCharacter, getTrait(trait), actingCharacter.traits[trait], \"on_hitting\", {\r\n        combat: combatResult,\r\n        attack: attackResult\r\n    }, tick, rng));\r\n    const finalDamage = attackResult.baseDamage.times(attackResult.attackerDamageMultiplier.minus(attackResult.targetDefenseMultiplier).div(100).plus(1)).round(0, 0);\r\n    debugMessage(`Damage started off as ${attackResult.baseDamage.toFixed()}, with an attacker multiplier of ${attackResult.attackerDamageMultiplier} and a target defense multiplier of ${attackResult.targetDefenseMultiplier}, for a total of ${finalDamage.toFixed()}`);\r\n    combatResult.combatantCombatStats[targetCharacter].hp = combatResult.combatantCombatStats[targetCharacter].hp.minus(damageToInflict);\r\n    debugMessage(`Tick ${tick}: Hit did ${finalDamage.toFixed()}. Additional effects: ${attackResult.otherEffects.map(effect => {\r\n        switch (effect.event) {\r\n            case \"apply_effect\":\r\n                return `Applying effect ${effect.effect} with from ${effect.source} to ${effect.target}.`\r\n        }\r\n\r\n    }).join(\", \")}. Target has ${combatResult.combatantCombatStats[targetCharacter].hp} remaining.`)\r\n    // TODO: Trigger on-damage effects\r\n    combatResult.rounds.push(generateHitCombatResult(tick, actingCharacter.id, targetCharacter, finalDamage, attackResult.otherEffects));\r\n}\r\n\r\nfunction resolveMiss(tick, combatResult, actingCharacter, targetCharacterId, rng) {\r\n    combatResult.rounds.push(generateMissCombatResult(tick, actingCharacter.id, targetCharacterId));\r\n}\r\n\r\nfunction resolveSkippedAction(tick, combatResult, actingCharacter) {\r\n    combatResult.rounds.push(generateSkipActionResult(tick, actingCharacter.id));\r\n}\r\n\r\nfunction applyTrait(sourceCharacter, targetCharacter, trait, rank, event, state, tick, rng) {\r\n    const rankModifier = sourceCharacter.attributes[config.mechanics.traitRank.baseAttribute].times(config.mechanics.traitRank.scale).div(100);\r\n    rank = Decimal(rank).plus(Decimal(rank).times(rankModifier)).round(0, 0);\r\n    debugMessage(`Character has a bonus to rank of ${sourceCharacter.attributes.madness.toFixed()}% from madness, for an effective rank of ${rank}`);\r\n    debugMessage(`Tick ${tick}: Determining if trait ${trait.name} applies`);\r\n    if (trait[event]) {\r\n        const effect = trait[event];\r\n        if (effect.conditions !== undefined) {\r\n            debugMessage(\"Trait has conditions\");\r\n        }\r\n        const effectTriggers = effect.conditions === undefined || Object.keys(effect.conditions)\r\n            .every(condition => {\r\n                switch (condition) {\r\n                    case \"health_percentage\":\r\n                        // Fixme: Implement validation\r\n                        const target = getCharacter(effect.conditions[condition].target === \"attacker\" ? sourceCharacter : targetCharacter);\r\n                        const targetPercent = Decimal(effect.conditions[condition].below);\r\n                        const targetCurrentHealth = state.combat.combatantCombatStats[target.id].hp;\r\n                        const targetMaxHealth = target.maximumHp;\r\n                        const currentHealthPercent = (targetCurrentHealth.mul(100).div(targetMaxHealth));\r\n                        const conditionMet = targetPercent.gte(currentHealthPercent);\r\n                        debugMessage(`Tick ${tick}: Target health percentage is ${currentHealthPercent}, which is ${conditionMet ? \"\" : \"not\"} enough to trigger.`);\r\n                        return conditionMet;\r\n                    case \"chance\":\r\n                        const chanceToTrigger = evaluateExpression(trait[event].conditions[condition], {\r\n                            $rank: rank\r\n                        });\r\n                        const roll = Math.floor(rng.double() * 100) + 1;\r\n                        if (chanceToTrigger >= roll) {\r\n                            debugMessage(`Chance to trigger ${chanceToTrigger} with roll ${roll}: success`);\r\n                            return true;\r\n                        } else {\r\n                            debugMessage(`Chance to trigger ${chanceToTrigger} with roll ${roll}: failure.`);\r\n                            return false;\r\n                        }\r\n                    default:\r\n                        return false;\r\n                }\r\n            })\r\n        if (effectTriggers) {\r\n            debugMessage(`Tick ${tick}: Effect triggered, applying effects`);\r\n            Object.keys(trait[event].effects).forEach(traitEffect => {\r\n                    // FIXME\r\n                    switch (traitEffect) {\r\n                        case \"damage_modifier\":\r\n                            // FIXME: Validation\r\n                            const percentDamageModifier = evaluateExpression(trait[event].effects[traitEffect].percent, {\r\n                                $rank: rank\r\n                            });\r\n                            if(percentDamageModifier) {\r\n                                const newMultiplier = state.attack.attackerDamageMultiplier.plus(percentDamageModifier);\r\n                                debugMessage(`Tick ${tick}: Applying ${percentDamageModifier.toFixed()} modifier to damage, changing damage multiplier from ${state.attack.attackerDamageMultiplier.div(100).toFixed()} to ${newMultiplier.div(100).toFixed()}`);\r\n                                state.attack.attackerDamageMultiplier = newMultiplier;\r\n                            }\r\n                            break;\r\n                        case \"defense_modifier\": {\r\n                            const defenseModifier = evaluateExpression(trait[event].effects[traitEffect].percent, {\r\n                                $rank: rank\r\n                            }).div(100);\r\n                            const newMultiplier = state.attack.targetDefenseMultiplier.plus(defenseModifier);\r\n                            debugMessage(`Tick ${tick}: Applying ${defenseModifier} modifier to defense, changing defense multiplier from ${state.attack.targetDefenseMultiplier.toFixed()} to ${newMultiplier.toFixed()}`);\r\n                            state.attack.targetDefenseMultiplier = newMultiplier;\r\n                            break;\r\n                        }\r\n                        // case \"speed_modifier\" :\r\n                        //     const percentageSpeedMultiplier = evaluateExpression(trait[event].effects[traitEffect].percent, {\r\n                        //         $rank: rank\r\n                        //     });\r\n                        //\r\n                        //     const effect = {\r\n                        //         effect: {\r\n                        //             speed_bonus_percent: percentageSpeedMultiplier\r\n                        //         },\r\n                        //         roundDuration: evaluateExpression(trait[event].duration.rounds, {$rank: rank}),\r\n                        //         source: {\r\n                        //             character: sourceCharacter.id,\r\n                        //             ability: trait\r\n                        //         }\r\n                        //     };\r\n                        //     const existingEffect = state.combat.combatantCombatStats[affectedCharacterId].modifiers.find(modifier => {\r\n                        //         return modifier.source.character === sourceCharacter.id && modifier.source.ability === trait;\r\n                        //     });\r\n                        //     if (existingEffect) {\r\n                        //         existingEffect.roundDuration = trait[event].duration.rounds;\r\n                        //     } else {\r\n                        //         state.combat.combatantCombatStats[affectedCharacterId].modifiers.push(effect);\r\n                        //     }\r\n                        //     debugMessage(`Applied ${percentageSpeedMultiplier}% modifier to speed of ${affectedCharacterId}`);\r\n                        //     break;\r\n                        case \"add_modifier\":\r\n                            const modifierToAddDefinition = trait[event].effects.add_modifier;\r\n                            Object.keys(modifierToAddDefinition).forEach(effectType => {\r\n                                const effectTarget = modifierToAddDefinition[effectType].target;\r\n                                const modifier = {\r\n                                    effects: {\r\n                                        [effectType]: {\r\n                                            percent: evaluateExpression(modifierToAddDefinition[effectType].percent, {$rank: rank})\r\n                                        }\r\n                                    },\r\n                                    roundDuration: evaluateExpression(trait[event].duration.rounds, {$rank: rank}),\r\n                                    source: {\r\n                                        character: sourceCharacter.id,\r\n                                        ability: trait\r\n                                    }\r\n                                };\r\n                                // Determine targets\r\n                                const targets = Object.keys(state.combat.combatantCombatStats).filter(combatantId => {\r\n                                    switch (effectTarget) {\r\n                                        case \"attacker\":\r\n                                            return sourceCharacter.id == combatantId;\r\n                                        case \"attacked\":\r\n                                            return targetCharacter == combatantId;\r\n                                        case \"all_enemies\":\r\n                                            const actingCharacterParty = sourceCharacter.id === 0 ? 0 : 1;\r\n                                            return actingCharacterParty !== state.combat.combatantCombatStats[combatantId].party;\r\n                                        default:\r\n                                            throw new Error();\r\n                                    }\r\n                                });\r\n                                targets.forEach(combatantId => {\r\n                                    const existingEffect = state.combat.combatantCombatStats[combatantId].modifiers.find(modifier => {\r\n                                        return modifier.source.character === sourceCharacter.id && modifier.source.ability === trait;\r\n                                    });\r\n                                    if (existingEffect) {\r\n                                        existingEffect.roundDuration = evaluateExpression(trait[event].duration.rounds, {$rank: rank});\r\n                                    } else {\r\n                                        state.combat.combatantCombatStats[combatantId].modifiers.push(modifier);\r\n                                    }\r\n                                    _.get(state, \"attack.otherEffects\", []).push({\r\n                                        event: \"add_modifier\",\r\n                                        source: sourceCharacter.id,\r\n                                        target: combatantId,\r\n                                        effect: modifier,\r\n                                    });\r\n                                });\r\n                            })\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nexport function evaluateExpression(expression, context) {\r\n    if(expression === null || expression === undefined) {\r\n        return expression;\r\n    }\r\n    if (!expressionCache[expression]) {\r\n        expressionCache[expression] = new Function(\"context\", `with(context) {return ${expression}}`);\r\n    }\r\n    context.Decimal = Decimal;\r\n    return expressionCache[expression].call(null, context);\r\n}\r\n\r\nexport function getPowerNeededForLevel(level) {\r\n    return evaluateExpression(config.mechanics.levelToPowerEquation, {\r\n        $level: Decimal(level)\r\n    });\r\n}\r\n\r\nexport function getLevelForPower(powerPoints) {\r\n    return evaluateExpression(config.mechanics.powerToLevelEquation, {\r\n        $powerPoints: Decimal(powerPoints)\r\n    });\r\n}\r\n\r\nexport function reincarnateAs(monsterId, newAttributes) {\r\n    const player = getCharacter(0);\r\n    // Improve your starting traits\r\n    const currentDemon = Creatures[player.appearance];\r\n    if (currentDemon) {\r\n        currentDemon.traits.forEach(trait => {\r\n            if (!globalState.startingTraits[trait] || player.powerLevel.gt(globalState.startingTraits[trait])) {\r\n                globalState.startingTraits[trait] = player.powerLevel;\r\n            }\r\n        });\r\n    }\r\n\r\n    if (monsterId === \"random\") {\r\n        const options = _.difference(Object.keys(Creatures).filter(m => {\r\n            return _.get(globalState, [\"debug\", \"creatures\", m, \"enabled\"], true) &&\r\n                Creatures[m].enabled !== false\r\n        }), Object.keys(globalState.unlockedMonsters)\r\n            .filter(m => globalState.unlockedMonsters[m]));\r\n        monsterId = options[Math.floor(Math.random() * options.length)];\r\n    }\r\n\r\n    // Update player attributes\r\n    Object.keys(player.attributes).forEach(attribute => {\r\n        player.attributes[attribute] = Decimal(newAttributes[attribute.substring(1)]);\r\n    })\r\n\r\n    // Add your level to your starting energy.\r\n    globalState.startingPower = globalState.startingPower.plus(globalState.characters[0].powerLevel.minus(1).pow(2));\r\n    globalState.characters[0].absorbedPower = globalState.startingPower;\r\n    globalState.characters[0].reincarnate(monsterId, globalState.startingTraits);\r\n    globalState.unlockedMonsters[monsterId] = true;\r\n\r\n    // Gain the traits of your new demon amd your new power level\r\n    Creatures[monsterId].traits.forEach(trait => {\r\n        if (!globalState.startingTraits[trait] || player.powerLevel.gt(globalState.startingTraits[trait])) {\r\n            globalState.startingTraits[trait] = player.powerLevel;\r\n        }\r\n    });\r\n    getCharacter(0).traits = {...globalState.startingTraits};\r\n\r\n    globalState.currentEncounter = null;\r\n    globalState.currentAction = \"reincarnating\";\r\n    getCharacter(0).currentHp = getCharacter(0).maximumHp;\r\n    getGlobalState().passivePowerIncome = Decimal(0);\r\n\r\n    saveGlobalState();\r\n}\r\n\r\nexport function unpause() {\r\n    globalState.paused = false;\r\n}\r\n\r\nfunction stateReviver(key, value) {\r\n    switch (key) {\r\n        case \"_attributes\":\r\n        case \"startingTraits\":\r\n        case \"traits\":\r\n            return Object.keys(value).reduce((all, next) => {\r\n                all[next] = Decimal(value[next]);\r\n                return all;\r\n            }, {});\r\n        case \"startingPower\":\r\n        case \"minLevel\":\r\n        case \"maxLevel\":\r\n            return Decimal(value);\r\n        case \"characters\":\r\n            return Object.keys(value).reduce((characters, id) => {\r\n                characters[id] = new Character(value[id]);\r\n                return characters;\r\n            }, {});\r\n        case \"enemies\":\r\n            return Object.keys(value).map(character => {\r\n                return new Character(value[character]);\r\n            });\r\n        case \"paused\":\r\n            return false;\r\n        case \"passivePowerIncome\":\r\n            return Decimal(value);\r\n        case \"value\":\r\n            const parsed = Number.parseFloat(value);\r\n            if (Number.isNaN(parsed)) {\r\n                return value;\r\n            }\r\n            return Decimal(value);\r\n        default:\r\n            return value;\r\n    }\r\n}\r\n\r\nexport function resetDebug() {\r\n    globalState.debug.creatures = {};\r\n    globalState.debug.regions = {};\r\n}\r\n\r\nexport function getManualSpeedMultiplier() {\r\n    const debugMultiplier = _.get(globalState, [\"debug\", \"manualSpeedMultiplier\"]);\r\n    const baseMultiplier = globalState.manualSpeedMultiplier;\r\n    return debugMultiplier || baseMultiplier;\r\n}","import {v4} from \"node-uuid\";\r\n\r\nexport function generateHitCombatResult(tick, attackingCharacterId, targetCharacterId, damageDone, otherEffects) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"hit\",\r\n        target: targetCharacterId,\r\n        actor: attackingCharacterId,\r\n        effects: [{\r\n            event: \"damage\",\r\n            value: damageDone,\r\n            target: targetCharacterId\r\n        }, ...otherEffects]\r\n    }\r\n}\r\n\r\nexport function generateMissCombatResult(tick, attackingCharacterId, targetCharacterId) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"miss\",\r\n        target: targetCharacterId,\r\n        actor: attackingCharacterId,\r\n        effects: []\r\n    }\r\n}\r\n\r\nexport function generateSkipActionResult(tick, actingCharacterId) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"action_skipped\",\r\n        actor: actingCharacterId,\r\n        effects: []\r\n    }\r\n}","import * as _ from \"lodash\";\r\nimport {evaluateExpression, generateCreature, getGlobalState} from \"../engine\";\r\nimport {config} from \"../config\";\r\nimport {debugMessage} from \"../debugging\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nclass Region {\r\n    constructor(name, available, encounters, background) {\r\n        this.name = name;\r\n        this.encounters = encounters;\r\n        this.background = background;\r\n    }\r\n\r\n    startEncounter(player, rng) {\r\n\r\n        const candidateMinimumLevel = _.get(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], player.powerLevel.minus(config.encounters.lesserLevelScale * 2));\r\n        const minimumLevel = candidateMinimumLevel.lt(1) ? Decimal(1) : candidateMinimumLevel;\r\n\r\n        const candidateMaxLevel = _.get(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"],\r\n            player.powerLevel.plus(config.encounters.greaterLevelScale * 2));\r\n        const maximumLevel = candidateMaxLevel.gte(config.mechanics.maxLevel) ? Decimal(config.mechanics.maxLevel - 1) : candidateMaxLevel;\r\n\r\n        if (config.debug) {\r\n            debugMessage(`Generating an encounter between ${minimumLevel.toFixed()} and ${maximumLevel.toFixed()} `);\r\n        }\r\n        const encounterLevelModifier = minimumLevel.toNumber() + Math.floor(rng.double() * (maximumLevel.toNumber() - minimumLevel.toNumber()));\r\n        const encounterLevel = Decimal(Math.max(1, encounterLevelModifier));\r\n        if (config.debug) {\r\n            debugMessage(`Generated encounter level is ${encounterLevel}`);\r\n        }\r\n        const encounterDef = chooseRandomEncounter(this);\r\n        if (encounterDef === undefined) {\r\n            throw new Error(\"No encounter selected\");\r\n        }\r\n        const encounter = {\r\n            encounterLevel,\r\n            ...encounterDef,\r\n            pendingActions: [],\r\n            enemies: encounterDef.enemies.flatMap(enemyDef => _.range(0, enemyDef.count).map(i => {\r\n                return generateCreature(enemyDef.name, encounterLevel, rng)\r\n            }))\r\n        };\r\n        return encounter;\r\n    }\r\n}\r\n\r\nexport const Regions = {\r\n    forest: new Region(\"The Prey's Lament\", true, {\r\n            bloodthirstyKnight: {\r\n                description: \"1 Bloodthirsty Knight\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"bloodthirstyKnight\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            rapaciousHighwayman: {\r\n                description: \"1 Rapacious Highwayman\",\r\n                type: \"combat\",\r\n                enabled: false,\r\n                enemies: [\r\n                    {\r\n                        name: \"rapaciousHighwayman\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            crushingSnake: {\r\n                description: \"1 Crushing Snake\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"crushingSnake\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            skitteringHorror: {\r\n                description: \"1 Skittering Horror\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"skitteringHorror\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            deadlyHornet: {\r\n                description: \"1 Deadly Hornet\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"deadlyHornet\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            }\r\n\r\n        },\r\n        {\r\n            background: \"backgrounds/parallax-demon-woods-bg.png\",\r\n            far: \"backgrounds/parallax-demon-woods-far-trees.png\",\r\n            mid: \"backgrounds/parallax-demon-woods-mid-trees.png\",\r\n            close: \"backgrounds/parallax-demon-woods-close-trees.png\"\r\n        }\r\n    ),\r\n    caves: new Region(\"The Bottomless Caverns\", false, {}, {}),\r\n    mountains: new Region(\"The Crags of Futility\", false, {}, {}),\r\n    desert: new Region(\"The Desert of Isolation\", false, {}, {})\r\n}\r\n\r\nfunction chooseRandomEncounter(region) {\r\n    const possibleEncounters = Object.keys(region.encounters).filter(encounterId => {\r\n        debugMessage(`Determining if '${encounterId}' is enabled.`);\r\n        const encounterEnabled = region.encounters[encounterId].enabled !== false;\r\n        if (!encounterEnabled) {\r\n            debugMessage(`Encounter '${encounterId}' disabled`);\r\n        }\r\n        const debugNotDisabled = _.get(getGlobalState(), [\"debug\", \"regions\", region.id, \"encounters\", encounterId]) !== false;\r\n        if (!debugNotDisabled) {\r\n            debugMessage(`Encounter '${encounterId}' disabled by debug.`);\r\n        }\r\n        return encounterEnabled && debugNotDisabled;\r\n    });\r\n    const randomKey = possibleEncounters[Math.floor(Math.random() * Object.keys(possibleEncounters).length)];\r\n    debugMessage(`Selected encounter '${randomKey}'`);\r\n    return region.encounters[randomKey];\r\n}","import React from \"react\";\r\n\r\nexport const Actions = {\r\n    exploring: {\r\n        id: \"exploring\",\r\n        duration: \"exploration.explorationTime\",\r\n        description: \"Exploring...\"\r\n    },\r\n    approaching: {\r\n        id: \"approaching\",\r\n        duration: \"exploration.approachTime\",\r\n        description: \"Approaching Enemy...\"\r\n    },\r\n    looting: {\r\n        id: \"looting\",\r\n        duration: \"exploration.lootingTime\",\r\n        description: \"Looting the body...\"\r\n    },\r\n    fleeing: {\r\n        id: \"fleeing\",\r\n        duration: \"exploration.fleeingTime\",\r\n        description: \"Fleeing in terror!\"\r\n    },\r\n    fighting: {\r\n        id: \"fighting\",\r\n        duration: \"exploration.combatTime\",\r\n        description: \"In Combat!\",\r\n    },\r\n    reincarnating: {\r\n        id: \"resurrecting\",\r\n        duration: \"exploration.reincarnationTime\",\r\n        description: \"Reincarnating...\"\r\n    },\r\n    recovering: {\r\n        id:\"recovering\",\r\n        duration: \"exploration.recoveryTime\",\r\n        description: \"Healing...\"\r\n    },\r\n    intimidating: {\r\n        id:\"intimidating\",\r\n        duration: \"exploration.intimidateTime\",\r\n        description: \"Intimidating...\"\r\n    }\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {Creatures} from \"../../data/creatures\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport {getCharacter, getGlobalState, getLevelForPower, getSpriteForCreature} from \"../../engine\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport * as _ from \"lodash\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {config} from \"../../config\";\r\nimport \"../../App.css\";\r\nimport { Decimal } from \"decimal.js\";\r\n\r\nexport default function ReincarnationSelectionPage(props) {\r\n    const globalState = useRef(getGlobalState());\r\n    const history = useHistory();\r\n    const player = getCharacter(0);\r\n    const currentCreature = Creatures[player.appearance] || {};\r\n    const [attributes, setAttributes] = useState(Object.keys(player.attributes)\r\n        .reduce((attributes, next) => {\r\n            attributes[next.substring(1)] = player.attributes[next];\r\n            return attributes;\r\n        }, {}));\r\n    const newStartingPower = globalState.current.startingPower.plus(player.powerLevel.minus(1).pow(2));\r\n    const spendableBonusPoints = getLevelForPower(newStartingPower).times(config.characters.player.attributesPerLevel);\r\n\r\n    useEffect(() => {\r\n        getGlobalState().paused = true;\r\n    }, []);\r\n\r\n    return <Grid container>\r\n        <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n            <strong>Reincarnate</strong>\r\n        </Grid>\r\n        <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n            Select a soul to reincarnate as.\r\n            <br/>\r\n            You will reincarnate with <strong>{newStartingPower.toFixed()}</strong> starting power, letting you start at level {getLevelForPower(newStartingPower).toFixed()}\r\n            <br/>\r\n            You will also gain the following Traits as a result of your previous reincarnations:\r\n            <Grid container>\r\n                {_.uniq(Object.keys(globalState.current.startingTraits).concat(currentCreature.traits || []))\r\n                    .map(trait => {\r\n                        const player = getCharacter(0);\r\n                        const currentStartingRank = _.get(globalState.current.startingTraits, trait, Decimal(0));\r\n                        const combinedLevel = player.powerLevel.gt(currentStartingRank) ? player.powerLevel : currentStartingRank;\r\n                        return <Grid item xs={1}>\r\n                            <Tooltip title={<div dangerouslySetInnerHTML={{\r\n                                __html:\r\n                                    Traits[trait].description({\r\n                                        rank: combinedLevel\r\n                                    })\r\n                            }}></div>}>\r\n                                <img src={Traits[trait].icon}/>\r\n                            </Tooltip>\r\n                        </Grid>\r\n                    })}\r\n            </Grid>\r\n        </Grid>\r\n\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Spend {spendableBonusPoints.toFixed()} {player.powerLevel.gt(1) ? \"points\" : \"point\"} on bonuses:</strong>\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Attributes</strong>\r\n            </Grid>\r\n            {Object.keys(config.attributes).map(attribute => {\r\n                return <Grid item xs={3}>\r\n                    <Tooltip title={config.attributes[attribute].description({\r\n                        rank: attributes[attribute].toFixed()\r\n                    })}>\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <img src={config.attributes[attribute].icon}/>\r\n                            <div>\r\n                                <Button disabled={spendableBonusPoints.eq(_.sum(Object.values(attributes).map(x => x.toNumber())))}\r\n                                        onClick={() => {\r\n                                            setAttributes({...attributes, [attribute]: attributes[attribute].plus(1)})\r\n                                        }}>\r\n                                    <AddIcon/>\r\n                                </Button>\r\n                                {attributes[attribute].toFixed()}\r\n                                <Button disabled={attributes[attribute].toNumber() <= 0} onClick={() => {\r\n                                    setAttributes({...attributes, [attribute]: attributes[attribute].minus(1)})\r\n                                }}>\r\n                                    <RemoveIcon/>\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </Tooltip>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n\r\n        <Grid container item xs={12} alignItems=\"stretch\" justify=\"flex-start\">\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Choose a demon to reincarnate as.</strong>\r\n            </Grid>\r\n            {\r\n                Object.keys(Creatures)\r\n                    .filter(id => {\r\n                            const creatureEnabled = Creatures[id].enabled !== false;\r\n                            const debugEnabled = _.get(getGlobalState(), [\"debug\", \"creatures\", id, \"enabled\"], true);\r\n                            return creatureEnabled && debugEnabled;\r\n                        }\r\n                    )\r\n                    .map(name => {\r\n                    if (!getGlobalState().unlockedMonsters[name]) {\r\n                        return <Grid item container xs={3} justify=\"space-around\" style={{height: \"138px\"}}>\r\n                            <Grid item xs={12} style={{textAlign: \"center\", height: \"64%\"}}>\r\n                                <Tooltip\r\n                                    title={<div>An unknown type of Demon. Selects a random Demon you have not already\r\n                                        played as.</div>}>\r\n                                    <Button variant=\"contained\" style={{height: \"100%\", width: \"50%\"}}\r\n                                            onClick={() => {\r\n                                                props.reincarnate(\"random\", attributes);\r\n                                                history.push(\"/adventuring\");\r\n                                            }}>\r\n                                        <Grid container>\r\n                                            <Grid item xs={12}>\r\n                                                ???\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Button>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                        </Grid>\r\n                    } else {\r\n                        return <Grid item container xs={3} justify=\"space-around\">\r\n                            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                                <Tooltip title={<div>{Creatures[name].description}</div>}>\r\n                                    <Button variant=\"contained\" style={{height: \"100%\", width: \"50%\"}}\r\n                                            onClick={() => {\r\n                                                props.reincarnate(name, attributes);\r\n                                                history.push(\"/adventuring\");\r\n                                            }}>\r\n                                        <Grid container>\r\n                                            <Grid item xs={12}>\r\n                                                <img src={getSpriteForCreature(name)}/>\r\n                                            </Grid>\r\n                                            <Grid item xs={12}>\r\n                                                {Creatures[name].name}\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Button>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                            {\r\n                                Creatures[name].traits.map(trait => <Grid item xs={1}>\r\n                                    <Tooltip title={<div dangerouslySetInnerHTML={{\r\n                                        __html: Traits[trait].description({\r\n                                            rank: getLevelForPower(newStartingPower)\r\n                                        })\r\n                                    }}>\r\n                                    </div>}>\r\n                                        <img src={Traits[trait].icon}/>\r\n                                    </Tooltip>\r\n                                </Grid>)\r\n                            }\r\n                        </Grid>\r\n                    }\r\n                })\r\n            }\r\n        </Grid>\r\n    </Grid>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useMemo} from \"react\";\r\n\r\nexport default function PowerLevelDisplay(props) {\r\n    const powerLevelDisplay = useMemo(() => props.powerLevel.toFixed(), [props.powerLevel]);\r\n    return <React.Fragment>\r\n        <Grid item xs={6}>\r\n            Level\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n            {powerLevelDisplay}\r\n        </Grid>\r\n    </React.Fragment>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Help} from \"@material-ui/icons\";\r\nimport {config} from \"../../config\";\r\nimport React from \"react\";\r\n\r\nexport default function CharacterAttributes(props) {\r\n    return <React.Fragment>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                Health\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.currentHp.toFixed()} / {props.character.maximumHp.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={\r\n                        <span>Health is how much damage needed to destroy you. If you die, you forcibly reincarnate.</span>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.brutality.label}\r\n            </Grid>\r\n            <Grid item xs={5} title={``}>\r\n                {props.character.attributes.brutality.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={<span\r\n                        dangerouslySetInnerHTML={{__html: config.attributes.brutality.description(\r\n                                {\r\n                                    rank: props.character.attributes.brutality.toNumber()\r\n                                }\r\n                            )}}></span>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.cunning.label}\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.attributes.cunning.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={\r\n                        <span\r\n                            dangerouslySetInnerHTML={{__html: config.attributes.cunning.description(\r\n                                    {\r\n                                        rank: props.character.attributes.cunning.toNumber()\r\n                                    }\r\n                                )}}></span>\r\n                    }>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.deceit.label}\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.attributes.deceit.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={\r\n                        <span\r\n                            dangerouslySetInnerHTML={{__html: config.attributes.deceit.description(\r\n                                    {\r\n                                        rank: props.character.attributes.deceit.toNumber()\r\n                                    }\r\n                                )}}>\r\n                            </span>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.madness.label}\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.attributes.madness.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={<span\r\n                        dangerouslySetInnerHTML={{__html: config.attributes.madness.description(\r\n                                {\r\n                                    rank: props.character.attributes.madness.toNumber()\r\n                                }\r\n                            )}}/>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n    </React.Fragment>\r\n}","import Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport React from \"react\";\r\n\r\nexport default function CharacterTraits(props) {\r\n    return <React.Fragment>\r\n        {Object.keys(props.character.traits).map(trait => <Tooltip key={trait} title={\r\n            <React.Fragment>\r\n                <span>Rank {props.character.traits[trait].toFixed()}: </span>\r\n            <span dangerouslySetInnerHTML={{\r\n                __html: Traits[trait].description({\r\n                    rank: props.character.traits[trait]\r\n                })\r\n            }}></span>\r\n            </React.Fragment>}>\r\n            <img src={Traits[trait].icon}></img>\r\n        </Tooltip>)\r\n        }\r\n    </React.Fragment>\r\n\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useMemo} from \"react\";\r\nimport {getPowerNeededForLevel, getSpriteForCreature} from \"../engine\";\r\nimport {config} from \"../config\";\r\nimport PowerLevelDisplay from \"./charactersheet/PowerLevelDisplay\";\r\nimport CharacterAttributes from \"./charactersheet/CharacterAttributes\";\r\nimport CharacterTraits from \"./charactersheet/CharacterTraits\";\r\n\r\nconst styles = {\r\n    tooltip: {\r\n        fontSize: \"12pt\"\r\n    }\r\n}\r\n\r\nexport default function CharacterSheet(props) {\r\n    const spriteSrc = useMemo(() => getSpriteForCreature(props.character.appearance), [props.character.appearance]);\r\n    const combinedHitWeights = props.character.combat.minimumDamageWeight.plus(props.character.combat.medianDamageWeight)\r\n        .plus(props.character.combat.maximumDamageWeight);\r\n    const powerRequiredForCurrentLevel = getPowerNeededForLevel(props.character.powerLevel);\r\n    const powerNeededForNextLevel = getPowerNeededForLevel(props.character.powerLevel.plus(1));\r\n    const progressToNextLevel = props.character.absorbedPower.minus(powerRequiredForCurrentLevel);\r\n\r\n    return <Grid container>\r\n        <Grid item xs={12}>\r\n            <img src={spriteSrc} style={{height: \"75px\"}}/>\r\n        </Grid>\r\n        <Grid item container>\r\n            <PowerLevelDisplay powerLevel={props.character.powerLevel}/>\r\n        </Grid>\r\n        {props.character.absorbedPower !== undefined && <Grid item xs={12}>\r\n            <progress\r\n                value={progressToNextLevel.div(powerNeededForNextLevel).times(100).toNumber()}\r\n                max={100}\r\n                title={`${progressToNextLevel.toFixed()}/${powerNeededForNextLevel.toFixed()}`}\r\n            ></progress>\r\n        </Grid>}\r\n        <Grid container>\r\n            <Grid item container>\r\n                <Grid item xs>\r\n                    <strong>Combat Attributes</strong>\r\n                </Grid>\r\n            </Grid>\r\n            <CharacterAttributes character={props.character}/>\r\n        </Grid>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Derived</strong>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={4}>\r\n                    Glancing Blow\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.minimumDamageWeight.div(combinedHitWeights).times(100).toFixed()}%\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.minimumDamage.toFixed()}\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={4}>\r\n                    Solid Hit\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.medianDamageWeight.div(combinedHitWeights).times(100).toFixed()}%\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.medianDamage.toFixed()}\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={4}>\r\n                    Critical Hit\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.maximumDamageWeight.div(combinedHitWeights).times(100).toFixed()}%\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.maximumDamage.toFixed()}\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Traits</strong>\r\n            </Grid>\r\n            <CharacterTraits character={props.character}/>\r\n        </Grid>\r\n        {config.artifacts.enabled && <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Artifacts</strong>\r\n            </Grid>\r\n            <Grid>\r\n                {\r\n                    JSON.stringify(props.character.items)\r\n                }\r\n            </Grid>\r\n        </Grid>}\r\n    </Grid>\r\n\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React from \"react\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nconst styles = {\r\n    root: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#eeeeee\"\r\n    }\r\n}\r\n\r\nexport default function PlayerStats(props) {\r\n    return <Paper style={styles.root} elevation={2}>\r\n        <CharacterSheet character={props.player}/>\r\n    </Paper>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useMemo} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {getCharacter, getGlobalState, getLevelForPower, getPowerNeededForLevel} from \"../engine\";\r\n\r\nconst styles = {\r\n    root: {\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flex: \"0\"\r\n    },\r\n    buttons: {\r\n        width: \"100%\"\r\n    }\r\n}\r\n\r\nexport default function TopSection(props) {\r\n    const history = useHistory();\r\n    const reincarnateEnabled = useMemo(() => getLevelForPower(getGlobalState().startingPower).lt(getCharacter(0).powerLevel), [\r\n        getGlobalState().powerLevel,\r\n        getCharacter(0).powerLevel\r\n    ])\r\n    return <div style={styles.root}>\r\n        <Button onClick={() => history.push(\"/reincarnating\")} style={styles.buttons} variant=\"contained\" color=\"secondary\" disabled={!reincarnateEnabled}>\r\n            Reincarnate\r\n        </Button>\r\n    </div>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {getCharacter, getGlobalState} from \"../engine\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { config } from \"../config\";\r\nimport { Decimal } from \"decimal.js\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flex: \"1 0 auto\",\r\n        justifyContent: \"flex-end\",\r\n        flexDirection: \"column\"\r\n    },\r\n    actions: {\r\n        container: {\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            flexDirection: \"row\"\r\n        },\r\n        buttons: {\r\n            alignSelf: \"flex-end\",\r\n            flex: \"1\"\r\n        }\r\n    },\r\n    action: {\r\n        maxHeight: \"15%\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    },\r\n    actionProgress: {\r\n        width: \"100%\"\r\n    },\r\n    history: {\r\n        height: \"15%\",\r\n        flexDirection: \"column\",\r\n        overflowY: \"scroll\"\r\n    }\r\n}\r\nexport default function BottomSection(props) {\r\n    if (!props.currentAction) {\r\n        throw new Error(\"No current action\");\r\n    }\r\n    return <div style={styles.root} onMouseEnter={props.startManualSpeedup} onMouseLeave={props.stopManualSpeedup}>\r\n        <Paper style={styles.actions.container}>\r\n            <Button style={styles.actions.buttons} onClick={() => {\r\n                getGlobalState().paused = !getGlobalState().paused;\r\n                props.togglePause(getGlobalState().paused);\r\n            }}>\r\n                {props.paused ? \"Unpause\" : \"Pause\"}\r\n            </Button>\r\n        </Paper>\r\n        <Paper style={styles.actions.container}>\r\n            {actionButton(\"fighting\", \"Fight\", \"Combat the enemy. On victory, steal some of the power of the vanquished foe.\", props)}\r\n            {actionButton(\"fleeing\", \"Flee\", \"Attempt to escape. You will automatically escape from Greater Demons.\", props)}\r\n            {actionButton(\"intimidating\", \"Intimidate\", \"Try to cow the enemy, compelling them to continuously provide you a portion of their life force.\", props)}\r\n            {_.get(config, \"features.negotiating.enabled\") && actionButton(\"negotiating\", \"Negotiate\", \"Combat the enemy. On victory, steal some of the power of the vanquished foe.\", props)}\r\n        </Paper>\r\n        <Paper style={styles.action}>\r\n            <strong>{props.currentAction.description}</strong>\r\n            <progress style={styles.actionProgress} value={props.actionTime}\r\n                      max={_.get(props.state, props.currentAction.duration)}/>\r\n        </Paper>\r\n        <Paper style={styles.history}>\r\n            {\r\n                props.actionLog.map(item => printActionItem(item))\r\n            }\r\n        </Paper>\r\n    </div>\r\n}\r\n\r\nfunction printActionItem(item) {\r\n    if (item.message) {\r\n        return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n            <Grid item xs={11}>\r\n            <span dangerouslySetInnerHTML={{\r\n                __html: item.message\r\n            }}></span>\r\n            </Grid>\r\n        </Grid>\r\n    } else {\r\n        switch (item.result) {\r\n            case \"add_modifier\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{`${getCharacter(item.actor).name}`}</Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"hit\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item\r\n                          xs={11}>{getCharacter(item.actor).name} hit! {item.effects.map(effect => describeEffect(item.target, effect)).join(\" \")}</Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"miss\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        {getCharacter(item.actor).name} Missed! {item.effects.map(effect => describeEffect(item.target, effect)).join(\" \")}\r\n                    </Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"kill\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item\r\n                          xs={11}><strong>{getCharacter(item.target).name} {item.target === 0 ? 'Were' : 'Was'} Killed!</strong></Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"gainedPower\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        You absorbed {item.value.toFixed()} power.\r\n                    </Grid>\r\n                </Grid>\r\n            case \"healed\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        {`${getCharacter(item.target).name} gained ${item.value} health.`}\r\n                    </Grid>\r\n                </Grid>\r\n            case \"escaped\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        You escaped.\r\n                    </Grid>\r\n                </Grid>\r\n            case \"action_skipped\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{getCharacter(item.actor).name} {item.actor === 0 ? 'Skip' : 'Skips'} their\r\n                        action: {item.reason}</Grid>\r\n                    <Grid item xs={1}>\r\n                        {item.tick}\r\n                    </Grid>\r\n                </Grid>\r\n            case \"intimidated\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{getCharacter(item.target).name} was Bound to you, granting you {item.value.toFixed()} power while you explore. </Grid>\r\n                </Grid>\r\n            case \"enemy-fled\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{getCharacter(item.target).name} Fled!</Grid>\r\n                </Grid>\r\n        }\r\n    }\r\n}\r\n\r\nfunction describeEffect(target, effect) {\r\n    switch (effect.event) {\r\n        case \"damage\":\r\n            return `${getCharacter(target).name} ${target === 0 ? 'take' : 'takes'} ${effect.value} Damage.`;\r\n        default:\r\n            return Object.keys(effect.effect.effects).map(mod => {\r\n                switch (mod) {\r\n                    case \"speed\":\r\n                        const percentModifier = Decimal(effect.effect.effects.speed.percent); // FIXME: 3 layers, the same name?\r\n                        if (percentModifier.lt(0)) {\r\n                            return `${getCharacter(effect.target).name} ${effect.target == 0 ? 'suffer' : 'suffers'} a ${percentModifier.toFixed()}% penalty to Action Speed.`;\r\n                        } else {\r\n                            return `${getCharacter(effect.target).name} ${effect.target == 0 ? 'gain' : 'gains'} a ${percentModifier.toFixed()}% bonus to Action Speed.`;\r\n                        }\r\n                }\r\n            })\r\n            switch (effect.effect.modifier) {\r\n                case \"speed_modifier\":\r\n\r\n\r\n            }\r\n\r\n    }\r\n}\r\n\r\nfunction actionButton(action, text, description, props) {\r\n    return <Tooltip title={description}>\r\n        <Button onClick={() => props.setNextAction(action)} style={styles.actions.buttons}\r\n                disabled={props.currentAction.id !== \"approaching\"}\r\n                variant={props.nextActionName === action ? \"contained\" : \"outlined\"}\r\n                color={props.nextActionName === action ? \"primary\" : \"default\"}>\r\n            {text}\r\n        </Button>\r\n    </Tooltip>\r\n}","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nconst styles = {\r\n    root: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#eeeeee\"\r\n    }\r\n}\r\n\r\nexport default function EnemySidebar(props) {\r\n    return <Paper style={styles.root}>\r\n        {props.currentEncounter && <CharacterSheet character={props.currentEncounter.enemies[0]} /> }\r\n    </Paper>\r\n}","import PlayerStats from \"../PlayerStats\";\r\nimport TopSection from \"../TopSection\";\r\nimport {getCharacter, getGlobalState} from \"../../engine\";\r\nimport BottomSection from \"../BottomSection\";\r\nimport EnemySidebar from \"../EnemySidebar\";\r\nimport React from \"react\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flex: \"1\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        overflow: \"hidden\"\r\n    },\r\n    image: {\r\n        position: \"absolute\",\r\n        height: \"100%\",\r\n        left: 0\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        left: 0\r\n    }\r\n}\r\n\r\nexport default function AdventuringPage(props) {\r\n    return <div className=\"App\" style={styles.root}>\r\n        <div id=\"background\" style={{\r\n            position: \"absolute\",\r\n            zIndex: \"-10\",\r\n            overflow: \"hidden\",\r\n            height: \"100vh\",\r\n            width: \"100vw\"\r\n        }}>\r\n            <img style={styles.background} src={\"./backgrounds/parallax-demon-woods-bg.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-far-trees.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-mid-trees.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-close-trees.png\"}/>\r\n        </div>\r\n        <PlayerStats player={props.player}/>\r\n        <div style={{display: \"flex\", flex: \"1 0 auto\", flexDirection: \"column\"}}>\r\n            <TopSection character={getCharacter(0)}/>\r\n            <BottomSection state={getGlobalState()} actionLog={props.actionLog}\r\n                           togglePause={props.togglePause}\r\n                           paused={props.paused}\r\n                           nextActionName={props.nextAction}\r\n                           currentAction={props.currentAction}\r\n                           setNextAction={(newAction) => {\r\n                               props.setNextAction(newAction);\r\n                               getGlobalState().nextAction = newAction;\r\n                           }}\r\n                           actionTime={props.actionTime}\r\n                           startManualSpeedup={props.startManualSpeedup}\r\n                           stopManualSpeedup={props.stopManualSpeedup}\r\n            />\r\n        </div>\r\n        <EnemySidebar currentEncounter={props.currentEncounter} actionLog={props.actionLog}/>\r\n\r\n    </div>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useState} from \"react\";\r\nimport { Decimal } from \"decimal.js\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {Creatures} from \"../data/creatures\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddCircleOutlineRoundedIcon from '@material-ui/icons/AddCircleOutlineRounded';\r\nimport RemoveCircleOutlineRoundedIcon from '@material-ui/icons/RemoveCircleOutlineRounded';\r\nimport {getCharacter, getGlobalState, resetDebug, saveKey} from \"../engine\";\r\nimport * as _ from \"lodash\";\r\nimport {Regions} from \"../data/Regions\";\r\nimport {config} from \"../config\";\r\n\r\nconst styles = {\r\n    root: {\r\n        position: \"absolute\",\r\n        minHeight: \"100vh\",\r\n        bottom: 0,\r\n        left: 0,\r\n        padding: \"20px\"\r\n    }\r\n}\r\n\r\nexport default function DebugUi(props) {\r\n    const [creatures, setCreatures] = useState(_.get(getGlobalState(), [\"debug\", \"creatures\"]));\r\n    const [regions, setRegions] = useState(_.get(getGlobalState(), [\"debug\", \"regions\"]));\r\n    const [minLevel, setMinLevel] = useState(_.get(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale).lt(Decimal(1)) ?\r\n        Decimal(1) : getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale)));\r\n    const [maxLevel, setMaxLevel] = useState(_.get(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale).gt(100) ?\r\n        Decimal(100) : getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale * 2)));\r\n    const [manualSpeedMultiplier, setManualSpeedMultiplier] = useState(_.get(getGlobalState(), [\"debug\", \"manualSpeedMultiplier\"],\r\n        getGlobalState().manualSpeedMultiplier));\r\n    const [playerAbsorbedPower, setPlayerAbsorbedPower] = useState(getCharacter(0).absorbedPower);\r\n\r\n    function reset() {\r\n        resetDebug();\r\n        setCreatures(_.get(getGlobalState(), [\"debug\", \"creatures\"]));\r\n        setRegions(_.get(getGlobalState(), [\"debug\", \"regions\"]));\r\n        setMinLevel(getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale).lt(Decimal(1)) ?\r\n            Decimal(1) : getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale));\r\n        setMaxLevel(getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale).gt(100) ?\r\n            Decimal(100) : getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale * 2));\r\n    }\r\n\r\n    function clearSave() {\r\n        window.localStorage.removeItem(saveKey);\r\n        alert(\"local storage cleared\");\r\n    }\r\n\r\n    return <Paper style={styles.root} disabled={true}>\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <h3>Debug Menu</h3>\r\n            </Grid>\r\n            <Grid item container xs={12}>\r\n                <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={reset}>\r\n                        Reset Debug Settings\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={clearSave}>\r\n                        Clear Save\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid item xs={3}>\r\n                    <TextField type=\"number\" value={manualSpeedMultiplier} onChange={e => {\r\n                        const newValue = Number.parseInt(e.target.value);\r\n                        _.set(getGlobalState(), [\"debug\", \"manualSpeedMultiplier\"], newValue);\r\n                        setManualSpeedMultiplier(newValue);\r\n                    }} label=\"Manual speed multiplier\"/>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TextField type=\"number\" min=\"0\" value={playerAbsorbedPower} onChange={e => {\r\n                        e.target.value = e.target.value === \"\" ? 0 : e.target.value;\r\n                        const newValue = Decimal(Number.parseInt(e.target.value));\r\n                        if(newValue.lt(0)) {\r\n                            getCharacter(0).absorbedPower = Decimal(0);\r\n                            setPlayerAbsorbedPower(Decimal(0));\r\n                        } else {\r\n                            getCharacter(0).absorbedPower = newValue;\r\n                            setPlayerAbsorbedPower(newValue);\r\n                        }\r\n\r\n                    }} label=\"Current player absorbed power\"/>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <h3>Creatures</h3>\r\n            </Grid>\r\n            <Grid container item xs={12}>\r\n                {Object.keys(Creatures).map(id => {\r\n                    const enabled = creatures[id] !== false && _.get(creatures, [id, \"enabled\"]) !== false;\r\n                    return <Grid item xs={3} style={{height: \"100%\"}}>\r\n                        <Button variant=\"contained\" color={enabled ? \"default\" : \"secondary\"}\r\n                                style={{width: \"100%\", height: \"100%\"}}\r\n                                onClick={() => {\r\n                                    _.set(getGlobalState(), [\"debug\", \"creatures\", id, \"enabled\"], !enabled);\r\n                                    setCreatures({...creatures, [id]: {enabled: !enabled}})\r\n                                }}\r\n                        >\r\n                            <img src={`./monsters/${Creatures[id].texture}`}/>\r\n                            {Creatures[id].name}\r\n                        </Button>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid item style={{textAlign: \"center\"}}>\r\n                <h4>Regions</h4>\r\n            </Grid>\r\n            <Grid container item xs={12}>\r\n                {Object.keys(Regions).map(regionId => {\r\n                    return <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                        <h4>{Regions[regionId].name}</h4>\r\n                        <Grid item container xs={12}>\r\n                            {Object.keys(Regions[regionId].encounters).map(encounterId => {\r\n                                const enabled = _.get(regions, [regionId, \"encounters\", encounterId, \"enabled\"]) !== false;\r\n                                return <Grid item xs={3}>\r\n                                    <Button variant=\"contained\" color={enabled ? \"default\" : \"secondary\"}\r\n                                            style={{width: \"100%\", height: \"100%\"}}\r\n                                            onClick={() => {\r\n                                                _.set(getGlobalState(), [\"debug\", \"regions\", regionId, \"encounters\", encounterId, \"enabled\"], !enabled);\r\n                                                setRegions({\r\n                                                    ...regions, [regionId]: _.set(regions[regionId],\r\n                                                        [\"encounters\", encounterId, \"enabled\"],\r\n                                                        !enabled\r\n                                                    )\r\n                                                })\r\n                                            }}\r\n                                    >\r\n                                        {Regions[regionId].encounters[encounterId].description}\r\n                                    </Button>\r\n                                </Grid>;\r\n                            })}\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                    <h4>Encounter rules</h4>\r\n                </Grid>\r\n                <Grid container item xs={3}>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            setMinLevel(minLevel.plus(1));\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], minLevel.plus(1));\r\n                            if (minLevel.plus(1).gt(maxLevel)) {\r\n                                setMaxLevel(minLevel.plus(1));\r\n                                _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], minLevel.plus(1));\r\n                            }\r\n                        }}>\r\n                            <AddCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        Minimum level {minLevel.toFixed()}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], minLevel.minus(1));\r\n                            setMinLevel(minLevel.minus(1));\r\n                        }}>\r\n                            <RemoveCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container item xs={3}>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            setMaxLevel(maxLevel.plus(1));\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], maxLevel.plus(1));\r\n                        }}>\r\n                            <AddCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        Maximum level {maxLevel.toFixed()}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], maxLevel.minus(1));\r\n                            setMaxLevel(maxLevel.minus(1));\r\n                            if (maxLevel.minus(1).lt(minLevel)) {\r\n                                setMinLevel(maxLevel.minus(1));\r\n                                _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], maxLevel.minus(1));\r\n                            }\r\n                        }}>\r\n                            <RemoveCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useEffect} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport {getGlobalState} from \"../../engine\";\r\nconst pkg = require(\"../../../package.json\");\r\nconst changelog = require(\"../../changelog.json\");\r\n\r\nexport default function SplashPage(props) {\r\n    useEffect(() => {\r\n        getGlobalState().paused = true;\r\n    })\r\n    const history = useHistory();\r\n    return <Paper>\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                Conquest of Hell Ver. {pkg.version}\r\n            </Grid>\r\n            <Grid item container>\r\n                {Object.keys(changelog).map(version => {\r\n                    return <Grid key={version} item container xs={12}>\r\n                        <Grid item xs={12}>\r\n                            {version}\r\n                        </Grid>\r\n                        <ul>\r\n                        {changelog[version].map(entry => {\r\n                            return <li key={entry}>\r\n                                {entry}\r\n                            </li>\r\n                        })}\r\n                        </ul>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <Button onClick={() => {\r\n                    if(getGlobalState().currentAction === null) {\r\n                        history.push(\"/reincarnating\")\r\n                    } else {\r\n                        getGlobalState().paused = false;\r\n                        history.push(\"/adventuring\")\r\n                    }\r\n                }}>\r\n                    Start\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>\r\n}","import './App.css';\nimport {v4} from \"node-uuid\";\nimport * as _ from \"lodash\";\nimport React, {useEffect, useRef, useState} from \"react\";\nimport 'react-circular-progressbar/dist/styles.css';\nimport {Regions} from \"./data/Regions\";\nimport {Actions} from \"./data/Actions\";\nimport { Decimal } from \"decimal.js\";\nimport {\n    evaluateExpression,\n    getCharacter,\n    getGlobalState, getManualSpeedMultiplier,\n    loadGlobalState, reincarnateAs,\n    resolveCombat, saveGlobalState, unpause\n} from \"./engine\";\nimport * as seedrandom from \"seedrandom\";\nimport {config} from \"./config\";\nimport {MemoryRouter, Route, Switch} from \"react-router-dom\";\nimport ReincarnationSelectionPage from \"./components/scene/ReincarnationSelectionPage\";\nimport AdventuringPage from \"./components/scene/AdventuringPage\";\nimport DebugUi from \"./components/DebugUi\";\nimport {useHotkeys} from \"react-hotkeys-hook\";\nimport {debugMessage} from \"./debugging\";\nimport SplashPage from \"./components/scene/SplashPage\";\n\nloadGlobalState();\n\nconst rng = seedrandom();\n\nlet lastTime;\n\nfunction changeCurrentAction(newAction) {\n    getGlobalState().currentAction = newAction;\n    return getGlobalState().currentAction;\n}\n\nfunction pushLogItem(item) {\n    if (getGlobalState().actionLog.length > (config.actionLog.maxSize || 10)) {\n        getGlobalState().actionLog.pop();\n    }\n    getGlobalState().actionLog.unshift(item);\n}\n\n\nfunction App() {\n    const [currentEncounter, setCurrentEncounter] = useState(getGlobalState().currentEncounter);\n    const accruedTime = useRef(0);\n    const manualSpeedUpActive = useRef(false);\n    const [displayedTime, setDisplayedTime] = useState(0);\n    const [currentAction, setCurrentAction] = useState(Actions[getGlobalState().currentAction]);\n    const [actionLog, setActionLog] = useState(getGlobalState().actionLog);\n    const [nextAction, setNextAction] = useState(getGlobalState().nextAction);\n    const player = useRef(getCharacter(0));\n    const [debugUiEnabled, setDebugUiEnabled] = useState(false);\n    const [paused, setPaused] = useState(getGlobalState().paused);\n\n    useHotkeys(\"p\", () => getGlobalState().paused = !getGlobalState().paused);\n    useHotkeys(\"`\", () => {\n        setDebugUiEnabled(enabled => {\n            if (config.debug) {\n                if (!enabled) {\n                    getGlobalState().paused = true;\n                    setPaused(getGlobalState().paused);\n                }\n                saveGlobalState();\n                return !enabled\n            } else {\n                return false;\n            }\n        });\n    });\n\n    useEffect(() => {\n        function applyAction(action) {\n            pushLogItem(action);\n            switch (action.result) {\n                case \"combat-end\":\n                    if (player.current.currentHp < player.current.maximumHp) {\n                        setCurrentAction(Actions[changeCurrentAction(\"recovering\")]);\n                    } else {\n                        if (config.artifacts.enabled) {\n                            setCurrentAction(Actions[changeCurrentAction(\"looting\")]);\n                        } else {\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                        }\n                    }\n                    setCurrentEncounter(getGlobalState().currentEncounter = null);\n                    break;\n                case \"kill\":\n                    if (getGlobalState().currentEncounter.pendingActions[0].result === \"combat-end\") {\n                        if (getCharacter(0).isDamaged) {\n                            getGlobalState().nextAction = \"healing\";\n                            setNextAction(getGlobalState().nextAction);\n                        }\n                        applyAction(getGlobalState().currentEncounter.pendingActions.shift());\n                    }\n                    const enemy = getCharacter(action.target);\n                    const enemyIsLesserDemon = getCharacter(0).otherDemonIsLesserDemon(enemy);\n                    if (enemyIsLesserDemon) {\n                        debugMessage(`Not gaining power because enemy ${action.target} was a Lesser Demon.`);\n                    }\n                    if (action.actor === 0 && action.target !== 0 && !enemyIsLesserDemon) {\n                        debugMessage(\"Player killed a non-lesser enemy and gained power.\");\n                        const player = getCharacter(0);\n                        const powerToGain = enemy.powerLevel.mul(2);\n                        player.gainPower(powerToGain);\n                        pushLogItem(wrapLogItem({\n                            result: \"gainedPower\",\n                            value: powerToGain\n                        }))\n                    }\n                    break;\n                case \"hit\":\n                case \"miss\":\n                    (action.effects || []).forEach(effect => {\n                        const targetCharacter = getCharacter(effect.target);\n                        switch (effect.event) {\n                            case \"damage\":\n                                targetCharacter.currentHp = targetCharacter.currentHp.minus(effect.value);\n                                if (targetCharacter.currentHp.lt(Decimal(0))) {\n                                    targetCharacter.currentHp = Decimal(0);\n                                }\n                                if (getGlobalState().currentEncounter.pendingActions[0].result === \"kill\") {\n                                    applyAction(getGlobalState().currentEncounter.pendingActions.shift());\n                                }\n                                break;\n                            case \"apply_effect\":\n                                targetCharacter.addModifier({\n                                    effect: effect.effect,\n                                    magnitude: effect.value\n                                });\n                                break;\n                        }\n                    });\n                    break;\n                case \"action_skipped\":\n                    break;\n                default:\n                    throw new Error();\n            }\n            saveGlobalState();\n        }\n\n        function clearActionLog() {\n            setActionLog(getGlobalState().actionLog = []);\n        }\n\n        function tick(timestamp) {\n            if (!lastTime) {\n                lastTime = timestamp;\n            } else if (!getGlobalState().paused) {\n                if (accruedTime.current >= _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration)) {\n                    saveGlobalState();\n                    accruedTime.current = 0;\n                    switch (getGlobalState().currentAction) {\n                        case \"exploring\":\n                            if (getCharacter(0).currentHp.lt(getCharacter(0).maximumHp)) {\n                                setCurrentAction(Actions[changeCurrentAction(\"recovering\")]);\n                                // TODO: Implement random encounter chance\n                            } else {\n                                const player = getCharacter(0);\n                                getGlobalState().currentEncounter = Regions[getGlobalState().currentRegion].startEncounter(getCharacter(0), rng);\n                                setCurrentEncounter(getGlobalState().currentEncounter);\n                                setCurrentAction(Actions[changeCurrentAction(\"approaching\")]);\n                                getGlobalState().nextAction = getGlobalState().currentEncounter.enemies.reduce((actionSoFar, nextEnemy) => {\n                                    if (actionSoFar !== \"fighting\") {\n                                        return actionSoFar;\n                                    }\n\n                                    if (player.otherDemonIsLesserDemon(nextEnemy)) {\n                                        return \"intimidating\";\n                                    } else if (player.otherDemonIsGreaterDemon(nextEnemy)) {\n                                        return \"fleeing\";\n                                    } else {\n                                        return \"fighting\";\n                                    }\n                                }, \"fighting\");\n                                setNextAction(getGlobalState().nextAction);\n                                clearActionLog();\n                                if(getGlobalState().passivePowerIncome.gt(0)) {\n                                    getCharacter(0).absorbedPower = getCharacter(0).absorbedPower.plus(getGlobalState().passivePowerIncome);\n                                    pushLogItem({\n                                        message: `Your Bound lesser demons grant you ${getGlobalState().passivePowerIncome.toFixed()} power.`,\n                                        uuid: v4()\n                                    })\n                                }\n\n                                const enemies = getGlobalState().currentEncounter.enemies;\n                                if (player.otherDemonIsGreaterDemon(enemies[0])) {\n                                    pushLogItem({\n                                        message: `💀Approaching Greater ${enemies[0].name}.💀`,\n                                        uuid: v4()\n                                    });\n                                } else if (player.otherDemonIsLesserDemon(enemies[0])) {\n                                    pushLogItem({\n                                        message: `Approaching Lesser ${enemies[0].name}.`,\n                                        uuid: v4()\n                                    });\n                                } else {\n                                    pushLogItem({\n                                        message: `Approaching ${enemies[0].name}.`,\n                                        uuid: v4()\n                                    });\n                                }\n                                saveGlobalState();\n                            }\n                            break;\n                        case \"approaching\": {\n                            // Since we're starting a new combat, remove any old, dead characters\n                            const player = getCharacter(0);\n                            switch (getGlobalState().nextAction) {\n                                case \"fighting\":\n                                    const enemies = getGlobalState().currentEncounter.enemies;\n                                    resolveCombat(rng, {\n                                        parties: [[player], enemies]\n                                    }).onRoundResolved((result, lastRound) => {\n                                        if (lastRound !== undefined) {\n                                            getGlobalState().currentEncounter.pendingActions.push(lastRound);\n                                        }\n                                    });\n                                    break;\n                            }\n                            setCurrentAction(Actions[changeCurrentAction(getGlobalState().nextAction)]);\n                            setNextAction();\n                            const deadCharacters = Object.keys(getGlobalState().characters)\n                                .filter(id => id !== '0' && !getGlobalState().currentEncounter.enemies.find(c => c.id == id));\n                            deadCharacters.forEach(id => {\n                                delete getGlobalState().characters[id]\n                            });\n                            break;\n                        }\n                        case \"intimidating\": {\n                            const enemy = getGlobalState().currentEncounter.enemies[0];\n                            const chanceToIntimidate = Decimal(5).times(Decimal(2).pow(getCharacter(0).powerLevel.minus(1).minus(enemy.powerLevel).toNumber()));\n                            const roll = Math.floor(rng.double() * 100) + 1;\n                            if (chanceToIntimidate.gte(roll)) {\n                                const periodicPowerIncreases = Decimal(1);\n                                pushLogItem(wrapLogItem({\n                                    result: \"intimidated\",\n                                    target: enemy.id,\n                                    value: periodicPowerIncreases\n                                }));\n                                getGlobalState().passivePowerIncome = getGlobalState().passivePowerIncome.plus(periodicPowerIncreases);\n                            } else {\n                                pushLogItem(wrapLogItem({\n                                    result: \"enemy-fled\",\n                                    target: enemy.id\n                                }));\n                            }\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            break;\n                        }\n                        case \"fleeing\":\n                            const player = getCharacter(0);\n                            const enemy = getGlobalState().currentEncounter.enemies[0];\n                            getGlobalState().currentEncounter = null;\n                            setCurrentEncounter(null);\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            pushLogItem({\n                                result: \"escaped\",\n                                uuid: v4()\n                            });\n                            if (player.otherDemonIsGreaterDemon(enemy)) {\n                                const powerToGain = evaluateExpression(config.mechanics.xpFromGreaterDemon, {\n                                    $enemy: enemy\n                                });\n                                player.gainPower(powerToGain);\n                                pushLogItem(wrapLogItem({\n                                    result: \"gainedPower\",\n                                    value: powerToGain,\n                                }));\n                            }\n                            break;\n                        case \"fighting\" : {\n                            if (getGlobalState().currentEncounter.pendingActions.length) {\n                                const nextAction = getGlobalState().currentEncounter.pendingActions.shift();\n                                applyAction(nextAction);\n                                setActionLog([...getGlobalState().actionLog]);\n                            } else {\n                                setCurrentAction(Actions[changeCurrentAction(\"fleeing\")]);\n                            }\n                            break;\n                        }\n                        case \"looting\":\n                            const lootRoll = Math.floor(rng.double() * 666);\n                            if (lootRoll <= getGlobalState().currentEncounter.encounterLevel) {\n\n                            }\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            break;\n                        case \"recovering\": {\n                            const player = getCharacter(0);\n                            if (player.currentHp.lt(player.maximumHp)) {\n                                const amountToHeal = player.currentHp.plus(player.healing).gt(player.maximumHp) ?\n                                    player.maximumHp.minus(player.currentHp) : player.healing;\n                                player.currentHp = player.currentHp.plus(amountToHeal);\n                                pushLogItem({\n                                    target: player.id,\n                                    value: amountToHeal,\n                                    result: \"healed\",\n                                    uuid: v4()\n                                })\n                            }\n                            if (player.currentHp.gte(player.maximumHp)) {\n                                setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            }\n                            break;\n                        }\n                        case \"reincarnating\":\n                            setCurrentEncounter();\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            setActionLog([]);\n                            getGlobalState().actionLog = [];\n                            break;\n                        default:\n                            throw new Error(`Action ${getGlobalState().currentAction} not supported.`);\n                    }\n                }\n\n                setDisplayedTime(accruedTime.current);\n                const passedTime = timestamp - lastTime;\n                const adjustedTime = passedTime * (manualSpeedUpActive.current ? getManualSpeedMultiplier() : 1);\n                accruedTime.current = Math.min(accruedTime.current + adjustedTime, _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration));\n            }\n            lastTime = timestamp;\n            requestAnimationFrame(tick);\n            setActionLog([...getGlobalState().actionLog]);\n        }\n\n        requestAnimationFrame(tick)\n    }, []);\n\n    return (\n        <MemoryRouter initialEntries={[\n            getGlobalState().currentAction === \"reincarnating\" ? \"/reincarnatin\" : (\n                getGlobalState().currentAction === \"adventuring\" ? \"/adventuring\" : \"/\")\n        ]} basename=\"%PUBLIC_URL%\">\n            <Switch>\n                <Route path=\"/\" exact>\n                    <SplashPage/>\n                </Route>\n                <Route path=\"/reincarnating\" exact>\n                    <ReincarnationSelectionPage reincarnate={(monster, attributes) => {\n                        reincarnateAs(monster, attributes);\n                        setCurrentAction(getGlobalState().currentAction);\n                        unpause();\n                        setPaused(false);\n                        accruedTime.current = 10000000;\n                    }}/>\n                </Route>\n                <Route path=\"/adventuring\" exact>\n                    <AdventuringPage player={player.current}\n                                     paused={paused}\n                                     togglePause={(newValue) => setPaused(newValue)}\n                                     setNextAction={newAction => setNextAction(newAction)}\n                                     actionTime={displayedTime}\n                                     currentEncounter={currentEncounter}\n                                     startManualSpeedup={() => {\n                                         manualSpeedUpActive.current = config.manualSpeedup.enabled;\n                                     }}\n                                     stopManualSpeedup={() => {\n                                         manualSpeedUpActive.current = false\n                                     }}\n                                     currentAction={currentAction}\n                                     nextAction={nextAction}\n                                     actionLog={actionLog}\n                    />\n                </Route>\n            </Switch>\n            {debugUiEnabled && <DebugUi/>}\n        </MemoryRouter>\n    );\n}\n\nexport default App;\n\nfunction wrapLogItem(item) {\n    return {\n        uuid: v4(),\n        ...item\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}