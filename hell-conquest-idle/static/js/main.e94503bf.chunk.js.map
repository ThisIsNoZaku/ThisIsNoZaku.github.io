{"version":3,"sources":["data/creatures.js","config.js","debugging.js","data/Tactics.js","data/Statuses.js","data/Traits.js","character.js","engine/index.js","data/Regions.js","data/Actions.js","data/Attributes.js","components/charactersheet/TacticsDescription.js","components/scene/ReincarnationSelectionPage.js","components/charactersheet/CharacterAttributes.js","components/charactersheet/CharacterTraits.js","components/charactersheet/TacticsSection.js","engine/combat/getHitChanceBy.js","engine/combat/calculateDamageBy.js","components/CharacterSheet.js","components/PlayerStats.js","components/TopSection.js","components/CharacterCombatSummary.js","components/BottomSection.js","components/EnemySidebar.js","engine/CharacterCombatState.js","engine/combat/index.js","combatResult.js","generateLogItem.js","components/scene/AdventuringPage.js","components/DebugUi.js","components/scene/SplashPage.js","App.js","reportWebVitals.js","index.js"],"names":["Creatures","bloodthirstyKnight","name","traits","enabled","appearance","texture","description","rapaciousHighwayman","condemnedSlasher","crushingSnake","skitteringHorror","deadlyHornet","tormentedDead","wheezingApparition","assertCreatureExists","id","Error","console","log","process","REACT_APP_DEBUG_MODE","config","manualSpeedup","multiplier","actionLog","maxSize","REACT_APP_MAX_ACTIONLOG_SIZE","encounters","lesserEncounterChanceWeight","greaterEncounterChanceWeight","evenEncounterChanceWeight","lesserLevelScale","greaterLevelScale","chanceToIntimidateLesser","chanceToEscapeGreater","mechanics","artifacts","REACT_APP_FEATURE_ARTIFACTS_ENABLED","reincarnation","bonusPointsForHighestLevel","latentPowerGainOnReincarnate","latentPowerEffectScale","traitPointCost","xp","gainedFromGreaterDemon","gainedFromLesserDemon","gainedFromOtherDemon","levelToPowerEquation","powerToLevelEquation","maxLevel","combat","randomEncounterChance","determineHit","precision","baseAttribute","effectPerPoint","resilience","evasion","power","traitRank","fatigue","evasionPenaltyPerPoint","hp","base","pointsPerLevel","healingPerLevel","baseHitChance","baseDamage","attributeDamageModifier","defaultMinimumDamageMultiplier","defaultMedianDamageMultiplier","defaultMaximumDamageMultiplier","baseMinimumDamageWeight","baseMedianDamageWeight","baseMaximumDamageWeight","debug","debugMessage","apply","arguments","Tactics","aggressive","title","modifiers","power_modifier","precision_modifier","defensive","resilience_modifier","healing_modifier","deceptive","evasion_modifier","critical_hit_damage_modifier","Statuses","berserk","icon","effects","terrified","skip_turn","decays","restrained","accuracy_modifier","Traits","bloodrage","_","on_round_end","conditions","health_percentage","target","below","add_statuses","rank","cupidity","on_intimidate","chance","steal_item_chance","exhaustingTouch","inescapableGrasp","on_hitting","critical_hit","duration","rounds","sadisticJoy","on_kill","power_gain_modifier","piercingStrike","continuous","modifier","sharedPain","on_taking_damage","damage","terrifyingSkitter","on_combat_start","Character","props","this","_isPc","isPc","_name","_absorbedPower","Decimal","absorbedPower","_latentPower","latentPower","_attributes","Attributes","attributes","_currentHp","maximumHp","_combat","CombatStats","_traits","Object","keys","reduce","transformed","next","_appearance","_modifiers","_tactics","tactics","_statuses","statuses","forEach","status","newAppearance","newTraits","other","greaterDemonScale","evaluateExpression","player","enemy","powerLevel","gte","plus","lesserDemonScale","lte","minus","powerGained","latentPowerMultiplier","times","floor","push","newTactics","getLevelForPower","newHealth","lt","currentHp","gt","newLatentPower","attributeMultiplier","madness","mul","baseHealing","tacticsMultiplier","value","getPowerNeededForLevel","trait","div","ceil","getGlobalState","unlockedTraits","character","_brutality","brutality","_cunning","cunning","_deceit","deceit","_madness","defineProperty","calculateDamage","calculateCombatStat","hitTypeDamageMultiplier","combatAttribute","attributeBase","tacticsModifier","statusesModifier","currentValue","nextStatus","statusDefinition","traitModifier","previousValue","traitDefinition","saveKey","require","Package","expressionCache","globalState","loadGlobalState","saveGlobalState","window","localStorage","setItem","JSON","stringify","state","loaded","getItem","previousCompatibleVersions","changelog","pkg","version","compatiblePreviousVersions","latestVersion","nextKey","parse","stateReviver","creatures","regions","reincarnationCount","passivePowerIncome","unlockedMonsters","paused","currentAction","nextAction","highestLevelReached","startingTraits","currentEncounter","manualSpeedMultiplier","currentRegion","exploration","explorationTime","approachTime","combatTime","lootingTime","recoveryTime","fleeingTime","intimidateTime","reincarnationTime","characters","0","items","minimumDamageMultiplier","medianDamageMultiplier","maximumDamageMultiplier","tutorials","getCharacter","assertCharacterExists","nextMonsterId","getSpriteForCreature","expression","context","undefined","Function","call","level","$level","powerPoints","$powerPoints","key","map","parsed","Number","parseFloat","isNaN","Region","available","background","rng","encounterType","combinedEncounterChances","encounterTypeRoll","Math","double","lesserChance","evenChance","encounterLevel","encounterOffset","max","difference","min","encounterDef","region","possibleEncounters","filter","encounterId","encounterEnabled","debugNotDisabled","randomKey","random","length","chooseRandomEncounter","pendingActions","enemies","flatMap","enemyDef","count","i","nextId","generateCreature","Regions","forest","type","far","mid","close","caves","mountains","desert","Actions","exploring","approaching","dead","looting","fleeing","fighting","reincarnating","recovering","intimidating","label","Grid","container","tactic","Tooltip","style","color","textAlign","ReincarnationSelectionPage","history","useHistory","useState","substring","setAttributes","setPlayerTactics","setStartingTraits","availableBonusPoints","values","sum","x","traitsOwned","nextBonusTraitCost","useEffect","item","xs","toFixed","attribute","src","Button","disabled","onClick","traitId","justify","height","variant","dangerouslySetInnerHTML","__html","visibility","direction","TacticsDescription","alignItems","creatureEnabled","debugEnabled","width","reincarnate","CharacterAttributes","Fragment","fontSize","CharacterTraits","TacticsSection","getHitChanceBy","attackingCharacter","against","targetCharacter","attackerPrecision","targetEvasion","med","calculateDamageBy","attacker","debugOutput","attackerPower","powerMultiplier","pow","defenderResilience","resilienceMultiplier","damageModifier","minimumDamage","medianDamage","maximumDamage","CharacterSheet","spriteSrc","useMemo","hitChances","calculatedDamage","combinedHitWeights","total","powerRequiredForCurrentLevel","powerNeededForNextLevel","progressToNextLevel","toNumber","Help","styles","root","backgroundColor","PlayerStats","Paper","elevation","display","flex","buttons","TopSection","reincarnateEnabled","isAlive","CharacterCombatSummary","low","high","optimum","justifyContent","flexDirection","actions","alignSelf","action","maxHeight","actionProgress","overflowY","BottomSection","escapeChance","intimidateChance","onMouseEnter","startManualSpeedup","onMouseLeave","stopManualSpeedup","togglePause","actionButton","details","actionTime","message","tick","uuid","printActionItem","text","setNextAction","nextActionName","EnemySidebar","CharacterCombatState","originalCharacter","party","baseBrutality","baseDeceit","baseCunning","baseMadness","_speed","speed","lastActed","newSpeed","baseSpeed","speedMultiplier","percent","baseAccuracy","statusesMultiplier","canAct","resolveCombat","definition","combatResult","winner","combatantCombatStats","parties","partyIndex","combatant","startOfCombatEffects","triggerEvent","actor","round","effect","initiatives","initiativeCount","actingCharacter","beginningOfRoundEffects","enemyParty","livingEnemies","attackRollResult","combatState","roll","accuracy","rawRoll","makeAttackRoll","hitType","hitTypeChances","damageCategories","damageRoll","baseDamageToInflict","attackResult","attackMultiplier","defenseDivisor","attack","damageMultiplier","finalDamage","event","source","join","attackingCharacterId","targetCharacterId","damageDone","otherEffects","v4","result","generateHitCombatResult","resolveHit","generateMissCombatResult","resolveMiss","actingCharacterId","generateSkipActionResult","resolveSkippedAction","combatantId","parseInt","roundDuration","endOfRoundEffects","playerPartyDead","every","enemyPartyDead","selectTargets","sourceCharacter","combatants","targetType","eventType","recordedEffects","roundEvents","includes","rankModifier","condition","targetPercent","targetCurrentHealth","targetMaxHealth","currentHealthPercent","thisConditionMet","chanceToTrigger","$rank","traitEffect","percentDamageModifier","newMultiplier","damageToInflict","attackDamage","defenseModifier","statusesDefinition","statusType","effectTarget","targets","statusLevel","applyTrait","generateLogItem","original","describeEffect","eq","lastTime","overflow","image","position","left","changeCurrentAction","newAction","pushLogItem","pop","unshift","AdventuringPage","accruedTime","useRef","setEnemy","setActionLog","setCurrentEncounter","setCurrentAction","setPaused","displayedTime","setDisplayedTime","manualSpeedUpActive","useHotkeys","lastFrame","applyAction","lastTick","powerToGain","traitMultiplier","gainPower","shift","requestAnimationFrame","timestamp","current","clearStatuses","proceedingToEncounter","encounterChance","amountToHeal","healing","encounterRoll","startEncounter","actionSoFar","nextEnemy","otherDemonIsLesserDemon","otherDemonIsGreaterDemon","gainedPower","find","c","chanceToIntimidate","periodicPowerIncreases","chanceToFlee","$enemy","adjustedTime","debugMultiplier","baseMultiplier","getManualSpeedMultiplier","cancelAnimationFrame","className","onMouseOver","zIndex","p","minHeight","bottom","padding","DebugUi","setCreatures","setRegions","minLevel","setMinLevel","setMaxLevel","setManualSpeedMultiplier","playerAbsorbedPower","setPlayerAbsorbedPower","removeItem","alert","TextField","onChange","e","newValue","regionId","SplashPage","changes","entry","seedrandom","App","debugUiEnabled","setDebugUiEnabled","initialEntries","basename","path","exact","monster","monsterId","newAttributes","currentDemon","options","m","latentPowerGain","t","reincarnateAs","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e94503bf.chunk.js","sourcesContent":["export const Creatures  = {\r\n    bloodthirstyKnight: {\r\n        name: \"Bloodthirsty Knight\",\r\n        traits: [\"bloodrage\"],\r\n        enabled: true,\r\n        appearance: \"bloodthirstyKnight\",\r\n        texture: \"01_warrior.png\",\r\n        description: \"A ruthless warrior who delighted in slaughtering whoever they encounter on the battlefield.\",\r\n    },\r\n    rapaciousHighwayman: {\r\n        name: \"Rapacious Highwayman\",\r\n        traits: [\"cupidity\"],\r\n        enabled: false,\r\n        appearance: \"rapaciousHighwayman\",\r\n        texture: \"02_hunter.png\",\r\n        description: \"A thief who stole from whomever he could get away with, from wealthy merchants to starving vagrants.\",\r\n    },\r\n    condemnedSlasher: {\r\n        name: \"Condemned Slasher\",\r\n        traits: [\"sadisticJoy\"],\r\n        enabled: true,\r\n        appearance: \"condemnedSlasher\",\r\n        texture: \"03_rogue.png\",\r\n        description: \"A madman who gained exquisite pleasure from seeing how many cuts could be made in a victim's body before they died.\",\r\n    },\r\n    crushingSnake: {\r\n        name: \"Crushing Snake\",\r\n        traits: [\"inescapableGrasp\"],\r\n        enabled: true,\r\n        appearance: \"crushingSnake\",\r\n        texture: \"06_snake_01.png\",\r\n        description: \"A monstrous reptile which\",\r\n    },\r\n    skitteringHorror: {\r\n        name: \"Skittering Horror\",\r\n        traits: [\"terrifyingSkitter\"],\r\n        enabled: true,\r\n        appearance: \"skitteringHorror\",\r\n        texture: \"10_spider.png\",\r\n        description: \"A massive spider that enjoys stalking its prey, frightening it by the sickening skittering of it's arachnid legs.\"\r\n    },\r\n    deadlyHornet: {\r\n        name: \"Deadly Hornet\",\r\n        traits: [\"piercingStrike\"],\r\n        enabled: true,\r\n        appearance: \"deadlyHornet\",\r\n        texture: \"12_wasp.png\",\r\n        description: \"An insect whose stinger is able to pierce even metal protection.\"\r\n    },\r\n    tormentedDead: {\r\n        name: \"Tormented Dead\",\r\n        traits: [\"sharedPain\"],\r\n        enabled: true,\r\n        appearance: \"tormentedDead\",\r\n        texture: \"29_zombie.png\",\r\n        description: \"A human denied eternal rest and in agony from its ruined flesh.\"\r\n    },\r\n    wheezingApparition: {\r\n        name: \"Wheezing Apparition\",\r\n        traits: [\"exhaustingTouch\"],\r\n        enabled: false,\r\n        appearance: \"wheezingApparition\",\r\n        texture: \"128_sorrowsworn.png\",\r\n        description: \"A soul of someone killed by strangulation, searching endlessly for victims upon which it can inflict the same fate.\"\r\n    }\r\n}\r\n\r\nexport function assertCreatureExists(id) {\r\n    if(!Creatures[id]) {\r\n        throw new Error(`No creature with id ${id} is defined`);\r\n    }\r\n}","import * as _ from \"lodash\";\r\nconsole.log(process.env.REACT_APP_DEBUG_MODE, typeof process.env.REACT_APP_DEBUG_MODE);\r\n\r\nexport const config = {\r\n    manualSpeedup: {\r\n        enabled: false,\r\n        multiplier: 2\r\n    },\r\n\r\n    actionLog: {\r\n        maxSize:  process.env.REACT_APP_MAX_ACTIONLOG_SIZE || 20,\r\n    },\r\n    encounters: {\r\n        lesserEncounterChanceWeight: 10,\r\n        greaterEncounterChanceWeight: 10,\r\n        evenEncounterChanceWeight: 80,\r\n        lesserLevelScale: 1, // A demon is \"lesser\" than another when its level is this much lower.\r\n        greaterLevelScale: 1, // A demon is \"greater\" than another when its level is this much higher.\r\n        chanceToIntimidateLesser: \"player.powerLevel.minus(enemy.powerLevel).pow(2).times(10)\",\r\n        chanceToEscapeGreater: \"player.powerLevel.gt(enemy.powerLevel) ? 100 : Decimal.max(enemy.powerLevel.minus(player.powerLevel), 1).pow(2).times(10)\"\r\n    },\r\n\r\n    mechanics: {\r\n        artifacts: {\r\n            enabled: process.env.REACT_APP_FEATURE_ARTIFACTS_ENABLED || false\r\n        },\r\n        reincarnation: {\r\n            bonusPointsForHighestLevel: 2,\r\n            latentPowerGainOnReincarnate: \"player.powerLevel.pow(2).times(2)\",\r\n            latentPowerEffectScale: .01,\r\n            traitPointCost: \"Decimal.max(1, traitsOwned.times(2))\"\r\n        },\r\n        xp: {\r\n            gainedFromGreaterDemon: \"enemy.powerLevel\",\r\n            gainedFromLesserDemon: \"enemy.powerLevel\",\r\n            gainedFromOtherDemon: \"enemy.powerLevel.times(5)\"\r\n        },\r\n        levelToPowerEquation: \"$level.eq(1) ? Decimal(0) : Decimal($level.minus(1).toNumber()).pow(2).times(5)\",\r\n        powerToLevelEquation: \"Decimal(0).eq($powerPoints) ? Decimal(1) : Decimal.sqrt($powerPoints.div(5)).plus(1).floor()\",\r\n        maxLevel: 100,\r\n        combat: {\r\n            randomEncounterChance: \"player.powerLevel.div(10).floor().times(10)\",\r\n            determineHit: \"roll >= target ? 'hit' : 'miss'\",\r\n            precision: { // Determines how precision rolls work\r\n                baseAttribute: \"deceit\",\r\n                effectPerPoint: .1\r\n            },\r\n            resilience: {\r\n                baseAttribute: \"brutality\",\r\n                effectPerPoint: .1\r\n            },\r\n            evasion: {\r\n                baseAttribute: \"cunning\",\r\n                effectPerPoint: .1\r\n            },\r\n            power: {\r\n                baseAttribute: \"brutality\",\r\n                effectPerPoint: .1\r\n            },\r\n            traitRank: {\r\n                baseAttribute: \"madness\",\r\n                effectPerPoint: .05\r\n            },\r\n            fatigue: {\r\n                evasionPenaltyPerPoint: 2\r\n            },\r\n            hp: {\r\n                base: 25,\r\n                pointsPerLevel: 25,\r\n                healingPerLevel: 5,\r\n                baseAttribute: \"madness\",\r\n                effectPerPoint: .05\r\n            },\r\n            baseHitChance: 90,\r\n            baseDamage: \"player.powerLevel.times(10)\",\r\n            attributeDamageModifier: .02,\r\n            defaultMinimumDamageMultiplier: .5,\r\n            defaultMedianDamageMultiplier: 1,\r\n            defaultMaximumDamageMultiplier: 1.5,\r\n            baseMinimumDamageWeight: 5,\r\n            baseMedianDamageWeight: 90,\r\n            baseMaximumDamageWeight: 5\r\n        }\r\n    },\r\n    debug: process.env.REACT_APP_DEBUG_MODE === \"true\"\r\n}","import {config} from \"./config\";\r\n\r\nexport function debugMessage() {\r\n    if(config.debug) {\r\n        console.debug.apply(null, arguments);\r\n    }\r\n}","export const Tactics = {\r\n    aggressive: {\r\n        title: \"Aggressive\",\r\n        description: \"Your tactics emphasize overwhelming power and violence.\",\r\n        modifiers: {\r\n            power_modifier: .5,\r\n            precision_modifier: .25\r\n        }\r\n    },\r\n    defensive: {\r\n        title: \"Defensive\",\r\n        description: \"Your tactics emphasize caution and husbanding your strength.\",\r\n        modifiers: {\r\n            resilience_modifier: .50,\r\n            healing_modifier: 1\r\n        }\r\n    },\r\n    deceptive: {\r\n        title: \"Deceptive\",\r\n        description: \"Your tactics emphasize disorientation and trickery.\",\r\n        modifiers: {\r\n            evasion_modifier: .5,\r\n            critical_hit_damage_modifier: .5\r\n        }\r\n    }\r\n}","export const Statuses = {\r\n    berserk: {\r\n        name: \"Berserk\",\r\n        icon: \"./icons/icons-516.png\",\r\n        description: \"\",\r\n        effects: {\r\n            power_modifier: 1.2,\r\n            evasion_modifier: .9\r\n        }\r\n    },\r\n    terrified: {\r\n        name: \"Terrified\",\r\n        icon: \"icons/icons-130.png\",\r\n        effects: {\r\n            skip_turn: true\r\n        },\r\n        decays: true\r\n    },\r\n    restrained: {\r\n        name: \"Restrained\",\r\n        icon: \"icons/icons-1276.png\",\r\n        effects: {\r\n            accuracy_modifier: .9\r\n        },\r\n        decays: true\r\n    }\r\n}","import * as _ from \"lodash\";\r\n// FIXME: Implement validation\r\nexport const Traits = {\r\n    bloodrage: {\r\n        name: \"Blood Rage\",\r\n        icon: \"icons/icons-139.png\",\r\n        description: _.template(\"This demon's unquenchable thirst for blood causes it to gain ${rank} stacks of Berserk when an enemy has 50% or less health.\"),\r\n        on_round_end: {\r\n            conditions : {\r\n                health_percentage: {\r\n                    target: \"any_enemy\",\r\n                    below: 50\r\n                }\r\n            },\r\n            effects: {\r\n                add_statuses: {\r\n                    berserk: {\r\n                        target: \"attacker\",\r\n                        rank: \"rank\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    cupidity: {\r\n        name: \"Cupidity\",\r\n        icon: \"icons/icons-2503.png\",\r\n        description: _.template(\"When this demon successfully Intimidates another demon, it gains a <span style='color: red'>${rank}%</span> chance to seize the intimidated demon's Artifacts as though it were killed.\"),\r\n        on_intimidate: {\r\n            conditions: {\r\n                chance: \"$rank\"\r\n            },\r\n            effects: {\r\n                steal_item_chance: {\r\n                    target: \"enemies\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    exhaustingTouch: {\r\n        name: \"Strangulation\",\r\n        icon: \"icons/icons-115.png\",\r\n        description: _.template(\"The demon's touch saps the strength from the victims limbs, reducing both Damage and Defense by <span>${rank.times(5)}%</span> for 1 round.\")\r\n    },\r\n    inescapableGrasp: {\r\n        name: \"Inescapable Grasp\",\r\n        icon: \"icons/icons-2221.png\",\r\n        description: _.template(\"You bind your victims when you strike, causing ${rank} levels of Restrained when you hit with an attack.\"),\r\n        on_hitting: {\r\n            conditions: {\r\n                critical_hit: {\r\n                    chance: 100\r\n                }\r\n            },\r\n            effects: {\r\n                add_statuses: {\r\n                    restrained: {\r\n                        target: \"attacked\",\r\n                        rank: \"rank\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: 2\r\n            }\r\n        }\r\n    },\r\n    sadisticJoy: {\r\n        name: \"Sadistic Joy\",\r\n        icon: \"icons/icons-852.png\",\r\n        description: _.template(\"The demon gains vile pleasure from the pain it inflicts, absorbing an additional ${rank.times(25)}% power from killing other demons.\"),\r\n        on_kill: {\r\n            effects: {\r\n                power_gain_modifier: \"rank.times(.25)\"\r\n            }\r\n        }\r\n    },\r\n    piercingStrike: {\r\n        name: \"Piercing Strike\",\r\n        icon: \"icons/icons-113.png\",\r\n        description: _.template(\"Your fierce attacks can punch right through even armor. Your <span style='color: lightgreen'>Precision</span> is increased by <span style='color: orangered'>${rank.times(25)}%</span>\"),\r\n        continuous: {\r\n            effects: {\r\n                precision_modifier: {\r\n                    target: \"self\",\r\n                    modifier: \"rank.times(.1)\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    sharedPain: {\r\n        name: \"Shared Pain\",\r\n        icon: \"icons/icons-146.png\",\r\n        description: _.template(\"You return the pain of injuries inflicted on you, reflecting <span style='color: orangered'>${rank.times(5).toFixed()}%</span> of the damage back.\"),\r\n        on_taking_damage: {\r\n            effects: {\r\n                target: \"attacker\",\r\n                damage: \"$rank.times(5).div(100).times(attackDamage)\"\r\n            }\r\n        }\r\n    },\r\n    terrifyingSkitter: {\r\n        name: \"Terrifying Skitter\",\r\n        icon: \"icons/icons-2260.png\",\r\n        description: _.template(\"The sickening sound of your feet on the ground unnerves even other demons, making the enemy <span style='color: violet'>Terrified</span> for <span style='color: lightblue'>${rank.div(10).round(0, 0).plus(1).toFixed()}</span> round(s), stunning them.\"),\r\n        on_combat_start: {\r\n            effects: {\r\n                add_statuses: {\r\n                    terrified: {\r\n                        target: \"all_enemies\",\r\n                        rank: \"rank\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: \"$rank.div(10).round(0, 0).plus(1)\"\r\n            }\r\n        }\r\n    },\r\n}\r\n\r\nexport function getTrait(traitId) {\r\n    return Traits[traitId];\r\n}","import {config} from \"./config\";\r\nimport {evaluateExpression, getGlobalState, getLevelForPower, getPowerNeededForLevel} from \"./engine\";\r\nimport {Creatures} from \"./data/creatures\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {Tactics} from \"./data/Tactics\";\r\nimport {Statuses} from \"./data/Statuses\";\r\nimport * as _ from \"lodash\";\r\nimport {Traits} from \"./data/Traits\";\r\n\r\nexport class Character {\r\n    constructor(props) {\r\n\r\n        this._isPc = props.isPc || props._isPc;\r\n        this.id = props.id;\r\n        this._name = props.name || props._name;\r\n        this._absorbedPower = Decimal(props.absorbedPower || props._absorbedPower || 0);\r\n        this._latentPower = Decimal(props.latentPower || props._latentPower || 0);\r\n        this._attributes = new Attributes(props.attributes || props._attributes, this);\r\n        this._currentHp = Decimal(props._currentHp || this.maximumHp);\r\n        this._combat = new CombatStats(props.combat || props._combat, this);\r\n        this._traits = Object.keys(props.traits || props._traits).reduce((transformed, next) => {\r\n            transformed[next] = Decimal((props.traits || props._traits)[next]);\r\n            return transformed;\r\n        }, {});\r\n        this._appearance = props.appearance || props._appearance;\r\n        this._modifiers = props.modifiers || props._modifiers || [];\r\n        this._tactics = props.tactics || props._tactics || \"defensive\";\r\n        this._statuses = props.statuses || props._statuses || {};\r\n    }\r\n\r\n    get tactics() {\r\n        return this._tactics;\r\n    }\r\n\r\n    get statuses() {\r\n        return this._statuses;\r\n    }\r\n\r\n    clearStatuses() {\r\n        Object.keys(this._statuses).forEach(status => delete this._statuses[status]);\r\n    }\r\n\r\n    set tactics(newTactics) {\r\n        this._tactics = newTactics;\r\n    }\r\n\r\n    get isPc() {\r\n        return this._isPc;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get powerLevel() {\r\n        return getLevelForPower(this._absorbedPower);\r\n    }\r\n\r\n    get currentHp() {\r\n        return Decimal(this._currentHp);\r\n    }\r\n\r\n    set currentHp(newHealth) {\r\n        if (this.maximumHp.lt(newHealth)) {\r\n            this._currentHp = this.maximumHp;\r\n        } else {\r\n            this._currentHp = newHealth;\r\n        }\r\n    }\r\n\r\n    get isAlive() {\r\n        return Decimal(this.currentHp).gt(0);\r\n    }\r\n\r\n    get latentPower() {\r\n        return this._latentPower;\r\n    }\r\n\r\n    set latentPower(newLatentPower) {\r\n        this._latentPower = newLatentPower;\r\n    }\r\n\r\n    get maximumHp() {\r\n        const attributeMultiplier = this.attributes.madness.times(config.mechanics.combat.hp.effectPerPoint);\r\n        return this.powerLevel\r\n            .times(attributeMultiplier.plus(1))\r\n            .mul(config.mechanics.combat.hp.pointsPerLevel)\r\n            .floor();\r\n    }\r\n\r\n    get attributes() {\r\n        return this._attributes;\r\n    }\r\n\r\n    get combat() {\r\n        return this._combat;\r\n    }\r\n\r\n    get traits() {\r\n        return this._traits;\r\n    }\r\n\r\n    set traits(newTraits) {\r\n        this._traits = newTraits;\r\n    }\r\n\r\n    get appearance() {\r\n        return this._appearance;\r\n    }\r\n\r\n    reincarnate(newAppearance, newTraits) {\r\n        this._appearance = newAppearance;\r\n        this._traits = newTraits;\r\n    }\r\n\r\n    otherDemonIsGreaterDemon(other) {\r\n        const greaterDemonScale = evaluateExpression(config.encounters.greaterLevelScale, {\r\n            player: this,\r\n            enemy: other\r\n        });\r\n        return other.powerLevel.gte(this.powerLevel.plus(greaterDemonScale));\r\n    }\r\n\r\n    otherDemonIsLesserDemon(other) {\r\n        const lesserDemonScale = evaluateExpression(config.encounters.lesserLevelScale, {\r\n            player: this,\r\n            enemy: other\r\n        });\r\n        return other.powerLevel.lte(this.powerLevel.minus(lesserDemonScale));\r\n    }\r\n\r\n    gainPower(powerGained) {\r\n        const latentPowerMultiplier = this.latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale)\r\n            .plus(1);\r\n        powerGained = powerGained.times(latentPowerMultiplier).floor();\r\n        this.absorbedPower = this.absorbedPower.plus(powerGained);\r\n        return powerGained;\r\n    }\r\n\r\n    get healing() {\r\n        const baseHealing = Decimal(this.powerLevel.times(config.mechanics.combat.hp.healingPerLevel));\r\n        const tacticsMultiplier = Decimal(1).plus(Tactics[this.tactics].modifiers.healing_modifier || 0);\r\n        return baseHealing.times(tacticsMultiplier);\r\n    }\r\n\r\n    get absorbedPower() {\r\n        return this._absorbedPower;\r\n    }\r\n\r\n    set absorbedPower(value) {\r\n        this._absorbedPower = value;\r\n        if (getLevelForPower(this._absorbedPower).gt(config.mechanics.maxLevel)) {\r\n            this._absorbedPower = getPowerNeededForLevel(config.mechanics.maxLevel);\r\n        }\r\n        if (this.appearance) {\r\n            Creatures[this.appearance].traits.forEach(trait => {\r\n                this._traits[trait] = getLevelForPower(this._absorbedPower).div(10).ceil();\r\n                getGlobalState().unlockedTraits[trait] = getLevelForPower(this._absorbedPower).div(10).ceil();\r\n            });\r\n        }\r\n    }\r\n\r\n    get speed() {\r\n        return Decimal(100);\r\n    }\r\n\r\n    addModifier(modifier) {\r\n        this._modifiers.push(modifier);\r\n    }\r\n\r\n    get modifiers() {\r\n        return this._modifiers;\r\n    }\r\n}\r\n\r\nexport class Attributes {\r\n    constructor(attributes, character) {\r\n        this._brutality = attributes.brutality || attributes._brutality || 0;\r\n        this._cunning = attributes.cunning || attributes._cunning || 0;\r\n        this._deceit = attributes.deceit || attributes._deceit || 0;\r\n        this._madness = attributes.madness || attributes._madness || 0;\r\n        Object.defineProperty(this, \"character\", {\r\n            value: () => character\r\n        })\r\n    }\r\n\r\n    get baseBrutality() {\r\n        return Decimal(this._brutality).floor();\r\n    }\r\n\r\n    get baseCunning() {\r\n        return Decimal(this._cunning).floor();\r\n    }\r\n\r\n    get baseDeceit() {\r\n        return Decimal(this._deceit).floor();\r\n    }\r\n\r\n    get baseMadness() {\r\n        return Decimal(this._madness).floor();\r\n    }\r\n\r\n    get brutality() {\r\n        const latentPowerMultiplier = this.character().latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale)\r\n            .plus(1);\r\n        return Decimal(this._brutality).times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get cunning() {\r\n        const latentPowerMultiplier = this.character().latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale)\r\n            .plus(1);\r\n        return Decimal(this._cunning).times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get deceit() {\r\n        const latentPowerMultiplier = this.character().latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale)\r\n            .plus(1);\r\n        return Decimal(this._deceit).times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get madness() {\r\n        const latentPowerMultiplier = this.character().latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale)\r\n            .plus(1);\r\n        return Decimal(this._madness).times(latentPowerMultiplier).floor();\r\n    }\r\n}\r\n\r\nclass CombatStats {\r\n    constructor(props, character) {\r\n        this.character = function () {\r\n            return character;\r\n        }\r\n    }\r\n\r\n    get minimumDamage() {\r\n        return calculateDamage(config.mechanics.combat.defaultMinimumDamageMultiplier, this.character()).floor();\r\n    }\r\n\r\n    get medianDamage() {\r\n        return calculateDamage(config.mechanics.combat.defaultMedianDamageMultiplier, this.character()).floor();\r\n    }\r\n\r\n    get maximumDamage() {\r\n        const tacticsMultiplier = Decimal(1).plus(\r\n            Tactics[this.character().tactics].modifiers.critical_hit_damage_modifier || 0\r\n        )\r\n        return calculateDamage(Decimal(config.mechanics.combat.defaultMaximumDamageMultiplier), this.character())\r\n            .times(tacticsMultiplier).floor();\r\n    }\r\n\r\n    get evasion() {\r\n        return calculateCombatStat(this.character(), \"evasion\");\r\n    }\r\n\r\n    get precision() {\r\n        return calculateCombatStat(this.character(), \"precision\");\r\n    }\r\n\r\n    get resilience() { // TODO: Refactor all these into a shared method.\r\n        return calculateCombatStat(this.character(), \"resilience\");\r\n    }\r\n\r\n    get power() {\r\n        return calculateCombatStat(this.character(), \"power\");\r\n    }\r\n\r\n}\r\n\r\nfunction calculateDamage(hitTypeDamageMultiplier, character) {\r\n    const baseDamage = evaluateExpression(config.mechanics.combat.baseDamage, {\r\n        player: character\r\n    });\r\n    return baseDamage\r\n        .times(hitTypeDamageMultiplier).ceil();\r\n}\r\n\r\nexport function calculateCombatStat(character, combatAttribute) {\r\n    const attributeBase = character.attributes[config.mechanics.combat[combatAttribute].baseAttribute];\r\n    const tacticsModifier = Decimal(0).plus(Tactics[character.tactics].modifiers[`${combatAttribute}_modifier`] || 0);\r\n    const statusesModifier = Object.keys(character.statuses).reduce((currentValue, nextStatus) => {\r\n        const statusDefinition = Statuses[nextStatus];\r\n        return currentValue.plus(statusDefinition.effects[`${combatAttribute}_modifier`] || 0);\r\n    }, Decimal(0));\r\n    const traitModifier = Object.keys(character.traits).reduce((previousValue, trait) => {\r\n        const traitDefinition = Traits[trait];\r\n        if(_.get(traitDefinition, [\"continuous\", \"effects\", `${combatAttribute}_modifier`, \"target\"]) === \"self\") {\r\n            return previousValue.plus(evaluateExpression(_.get(traitDefinition, [\"continuous\", \"effects\", `${combatAttribute}_modifier`, \"modifier\"]), {\r\n                rank: Decimal(character.traits[trait])\r\n            }));\r\n        }\r\n        return previousValue;\r\n    }, Decimal(0));\r\n    return attributeBase.times(tacticsModifier.plus(statusesModifier).plus(traitModifier).plus(1));\r\n}","import * as _ from \"lodash\";\r\nimport {assertCreatureExists, Creatures} from \"../data/creatures\";\r\nimport {debugMessage} from \"../debugging\";\r\nimport { Decimal } from \"decimal.js\";\r\nimport {Character} from \"../character\";\r\nimport {config} from \"../config\";\r\nimport * as Package from \"../../package.json\";\r\nimport {Tactics} from \"../data/Tactics\";\r\nimport changelog from \"../changelog.json\";\r\nimport pkg from \"../../package.json\";\r\n\r\nexport const saveKey = require(\"md5\")(`hell-conquest-${Package.version}`);\r\n\r\nconst expressionCache = {};\r\n\r\nlet globalState = loadGlobalState()\r\n\r\nexport function getGlobalState() {\r\n    return globalState;\r\n}\r\n\r\nexport function saveGlobalState() {\r\n    window.localStorage.setItem(saveKey, JSON.stringify(globalState));\r\n}\r\n\r\nexport function loadGlobalState(state) {\r\n    let loaded = window.localStorage.getItem(saveKey);\r\n    if(!loaded) {\r\n        // try to load previous versions\r\n        const previousCompatibleVersions = changelog[pkg.version].compatiblePreviousVersions;\r\n        if(previousCompatibleVersions) {\r\n            loaded = previousCompatibleVersions.reduce((latestVersion, version) => {\r\n                const nextKey = require(\"md5\")(`hell-conquest-${version}`);\r\n                return window.localStorage.getItem(nextKey) || latestVersion;\r\n            }, null);\r\n        }\r\n    }\r\n    return loaded ? JSON.parse(loaded, stateReviver) : {\r\n        debug: {\r\n            creatures: {},\r\n            regions: {}\r\n        },\r\n        reincarnationCount: 0,\r\n        passivePowerIncome: Decimal(0),\r\n        unlockedMonsters: {},\r\n        unlockedTraits: {},\r\n        paused: true,\r\n        currentAction: null,\r\n        nextAction: null,\r\n        id: 0,\r\n        highestLevelReached: Decimal(1),\r\n        startingTraits: {},\r\n        currentEncounter: null,\r\n        manualSpeedMultiplier: config.manualSpeedup.enabled ? config.manualSpeedup.multiplier : 1,\r\n        currentRegion: \"forest\",\r\n        actionLog: [],\r\n        exploration: {\r\n            explorationTime: 5 * 1000,\r\n            approachTime: 5 * 1000,\r\n            combatTime: 5 * 1000,\r\n            lootingTime: 5 * 1000,\r\n            recoveryTime: 2 * 1000,\r\n            fleeingTime: 5 * 1000,\r\n            intimidateTime: 5 * 1000,\r\n            reincarnationTime: 1\r\n        },\r\n        characters: {\r\n            0: new Character({\r\n                id: 0,\r\n                isPc: true,\r\n                name: \"You\",\r\n                powerLevel: Decimal(1),\r\n                absorbedPower: Decimal(0),\r\n                appearance: \"\",\r\n                statuses: {},\r\n                traits: {},\r\n                tactics: \"defensive\",\r\n                items: [],\r\n                attributes: {\r\n                    brutality: Decimal(0),\r\n                    cunning: Decimal(0),\r\n                    deceit: Decimal(0),\r\n                    madness: Decimal(0)\r\n                },\r\n                combat: {\r\n                    fatigue: 0,\r\n                    minimumDamageMultiplier: .5,\r\n                    medianDamageMultiplier: 1,\r\n                    maximumDamageMultiplier: 1.5\r\n                }\r\n            })\r\n        },\r\n        tutorials: {}\r\n    }\r\n}\r\n\r\nexport function getCharacter(id) {\r\n    assertCharacterExists(id);\r\n    return globalState.characters[id];\r\n}\r\n\r\nlet nextMonsterId = 1;\r\n\r\nexport function generateCreature(id, powerLevel, rng) {\r\n    assertCreatureExists(id);\r\n    if (config.debug) {\r\n        debugMessage(`Generating creature with id ${id} and level ${powerLevel}`);\r\n    }\r\n    if (powerLevel === undefined) {\r\n        throw new Error(\"No powerLevel\");\r\n    }\r\n    if (Number.isNaN(powerLevel)) {\r\n        throw new Error(\"Level cannot be NaN\");\r\n    }\r\n    const tactics = Object.keys(Tactics)[Math.floor(rng.double() * 3)];\r\n    const nextId = nextMonsterId++;\r\n    globalState.characters[nextId] = new Character({\r\n        id: nextId,\r\n        ...Creatures[id],\r\n        latentPower: Decimal(evaluateExpression(config.mechanics.reincarnation.latentPowerGainOnReincarnate, {\r\n            player: {\r\n                powerLevel: powerLevel.minus(1)\r\n            }\r\n        })).times(5),\r\n        tactics,\r\n        traits: Creatures[id].traits.reduce((traits, next) => {\r\n            traits[next] = powerLevel.div(10).ceil();\r\n            return traits;\r\n        }, {}),\r\n        absorbedPower: getPowerNeededForLevel(powerLevel),\r\n        artifacts: [],\r\n        statuses: {},\r\n        attributes: {\r\n            brutality: powerLevel.div(2).floor(),\r\n            cunning: powerLevel.div(2).floor(),\r\n            deceit: powerLevel.div(2).floor(),\r\n            madness: powerLevel.div(2).floor(),\r\n        },\r\n        combat: {\r\n            fatigue: 0,\r\n            minimumDamageMultiplier: .5,\r\n            medianDamageMultiplier: 1,\r\n            maximumDamageMultiplier: 1.5\r\n        }\r\n    });\r\n    saveGlobalState();\r\n    return globalState.characters[nextId];\r\n}\r\n\r\n\r\nexport function getSpriteForCreature(name) {\r\n    assertCreatureExists(name);\r\n    return `monsters/${Creatures[name].texture}`;\r\n}\r\n\r\nfunction assertCharacterExists(id) {\r\n    if (!globalState.characters[id]) {\r\n        throw new Error(`No creature exists for '${id}'`);\r\n    }\r\n}\r\n\r\nexport function evaluateExpression(expression, context) {\r\n    if(expression === null || expression === undefined) {\r\n        return expression;\r\n    }\r\n    if (!expressionCache[expression]) {\r\n        expressionCache[expression] = new Function(\"context\", `with(context) {return ${expression}}`);\r\n    }\r\n    context.Decimal = Decimal;\r\n    context.config = config;\r\n    return expressionCache[expression].call(null, context);\r\n}\r\n\r\nexport function getPowerNeededForLevel(level) {\r\n    return evaluateExpression(config.mechanics.levelToPowerEquation, {\r\n        $level: Decimal(level)\r\n    });\r\n}\r\n\r\nexport function getLevelForPower(powerPoints) {\r\n    return evaluateExpression(config.mechanics.powerToLevelEquation, {\r\n        $powerPoints: Decimal(powerPoints)\r\n    });\r\n}\r\n\r\nexport function reincarnateAs(monsterId, newAttributes) {\r\n    const player = getCharacter(0);\r\n    // Improve your starting traits\r\n    const currentDemon = Creatures[player.appearance];\r\n    if (currentDemon) {\r\n        currentDemon.traits.forEach(trait => {\r\n            if (!globalState.unlockedTraits[trait] || player.powerLevel.gt(globalState.unlockedTraits[trait])) {\r\n                globalState.unlockedTraits[trait] = player.powerLevel;\r\n            }\r\n        });\r\n    }\r\n\r\n    if(Decimal(globalState.highestLevelReached).lt(player.powerLevel)) {\r\n        globalState.highestLevelReached = player.powerLevel;\r\n    }\r\n\r\n    if (monsterId === \"random\") {\r\n        const options = _.difference(Object.keys(Creatures).filter(m => {\r\n            return _.get(globalState, [\"debug\", \"creatures\", m, \"enabled\"], true) &&\r\n                Creatures[m].enabled !== false\r\n        }), Object.keys(globalState.unlockedMonsters)\r\n            .filter(m => globalState.unlockedMonsters[m]));\r\n        monsterId = options[Math.floor(Math.random() * options.length)];\r\n    }\r\n\r\n    // Update player attributes\r\n    Object.keys(player.attributes).forEach(attribute => {\r\n        player.attributes[attribute] = Decimal(newAttributes[attribute.substring(1)]);\r\n    })\r\n    if(globalState.reincarnationCount !== 0) {\r\n        // Add your level to your starting energy.\r\n        const latentPowerGain = evaluateExpression(config.mechanics.reincarnation.latentPowerGainOnReincarnate, {\r\n            player\r\n        });\r\n        globalState.characters[0].latentPower = globalState.characters[0].latentPower.plus(latentPowerGain);\r\n    }\r\n\r\n\r\n    globalState.characters[0].absorbedPower = Decimal(0);\r\n    globalState.characters[0].reincarnate(monsterId, globalState.startingTraits);\r\n    globalState.unlockedMonsters[monsterId] = true;\r\n\r\n    getCharacter(0).traits = Object.keys(globalState.startingTraits)\r\n        .filter(t => globalState.startingTraits[t])\r\n        .reduce((startingTraits, trait) => {\r\n        startingTraits[trait] = globalState.unlockedTraits[trait];\r\n        return startingTraits;\r\n    }, {});\r\n    Creatures[monsterId].traits.forEach(trait => {\r\n        getCharacter(0).traits[trait] = 1;\r\n    })\r\n\r\n    globalState.currentEncounter = null;\r\n    globalState.currentAction = \"reincarnating\";\r\n    getCharacter(0).currentHp = getCharacter(0).maximumHp;\r\n    getGlobalState().passivePowerIncome = Decimal(0);\r\n    globalState.reincarnationCount++;\r\n\r\n    saveGlobalState();\r\n}\r\n\r\nexport function unpause() {\r\n    globalState.paused = false;\r\n}\r\n\r\nfunction stateReviver(key, value) {\r\n    switch (key) {\r\n        case \"characters\":\r\n            return Object.keys(value).reduce((characters, id) => {\r\n                characters[id] = new Character(value[id]);\r\n                return characters;\r\n            }, {});\r\n        case \"enemies\":\r\n            return Object.keys(value).map(character => {\r\n                return new Character(value[character]);\r\n            });\r\n        case \"paused\":\r\n            return false;\r\n        case \"passivePowerIncome\":\r\n            return Decimal(value);\r\n        case \"value\":\r\n            const parsed = Number.parseFloat(value);\r\n            if (Number.isNaN(parsed)) {\r\n                return value;\r\n            }\r\n            return Decimal(value);\r\n        default:\r\n            return value;\r\n    }\r\n}\r\n\r\nexport function resetDebug() {\r\n    globalState.debug.creatures = {};\r\n    globalState.debug.regions = {};\r\n}\r\n\r\nexport function getManualSpeedMultiplier() {\r\n    const debugMultiplier = _.get(globalState, [\"debug\", \"manualSpeedMultiplier\"]);\r\n    const baseMultiplier = globalState.manualSpeedMultiplier;\r\n    return debugMultiplier || baseMultiplier;\r\n}","import * as _ from \"lodash\";\r\nimport {evaluateExpression, generateCreature, getGlobalState} from \"../engine\";\r\nimport {config} from \"../config\";\r\nimport {debugMessage} from \"../debugging\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nclass Region {\r\n    constructor(name, available, encounters, background) {\r\n        this.name = name;\r\n        this.encounters = encounters;\r\n        this.background = background;\r\n    }\r\n\r\n    startEncounter(player, rng) {\r\n        let encounterType;\r\n        const combinedEncounterChances = config.encounters.lesserEncounterChanceWeight +\r\n            config.encounters.greaterLevelScale +\r\n            config.encounters.evenEncounterChanceWeight;\r\n        const encounterTypeRoll = Math.floor(rng.double() * combinedEncounterChances) + 1;\r\n        const lesserChance = config.encounters.lesserEncounterChanceWeight;\r\n        const evenChance = config.encounters.lesserEncounterChanceWeight + config.encounters.evenEncounterChanceWeight;\r\n        debugMessage(`Determine encounter. Roll ${encounterTypeRoll} vs lesser (<=${lesserChance}), even (<=${evenChance})`);\r\n        if (encounterTypeRoll <= config.encounters.lesserEncounterChanceWeight) {\r\n            encounterType = \"lesser\";\r\n            debugMessage(`Lesser triggered`)\r\n        } else if (encounterTypeRoll <= config.encounters.lesserEncounterChanceWeight + config.encounters.evenEncounterChanceWeight) {\r\n            encounterType = \"even\";\r\n            debugMessage(`Even level encounter triggered`);\r\n        } else {\r\n            encounterType = \"greater\";\r\n            debugMessage(`Greater encounter triggered`);\r\n        }\r\n        let encounterLevel = player.powerLevel;\r\n        switch (encounterType) {\r\n            case \"greater\": {\r\n                const encounterOffset = Math.floor(rng.double() * config.encounters.greaterLevelScale);\r\n                encounterLevel = encounterLevel.plus(encounterOffset);\r\n                break;\r\n            }\r\n            case \"lesser\": {\r\n                const encounterOffset = Math.floor(rng.double() * config.encounters.lesserLevelScale);\r\n                encounterLevel = Decimal.max(1, encounterLevel.minus(encounterOffset));\r\n                break;\r\n            }\r\n            case \"even\": {\r\n                const difference = Math.max(config.encounters.greaterLevelScale, config.encounters.lesserLevelScale) - Math.min(config.encounters.greaterLevelScale, config.encounters.lesserLevelScale);\r\n                const encounterOffset = Math.floor(rng.double() * difference) - difference;\r\n                encounterLevel = Decimal.max(1, encounterLevel.plus(encounterOffset));\r\n            }\r\n        }\r\n        if (config.debug) {\r\n            debugMessage(`Generated encounter level is ${encounterLevel}`);\r\n        }\r\n        const encounterDef = chooseRandomEncounter(this);\r\n        if (encounterDef === undefined) {\r\n            throw new Error(\"No encounter selected\");\r\n        }\r\n        const encounter = {\r\n            encounterLevel,\r\n            ...encounterDef,\r\n            pendingActions: [],\r\n            enemies: encounterDef.enemies.flatMap(enemyDef => _.range(0, enemyDef.count).map(i => {\r\n                return generateCreature(enemyDef.name, encounterLevel, rng)\r\n            }))\r\n        };\r\n        return encounter;\r\n    }\r\n}\r\n\r\nexport const Regions = {\r\n    forest: new Region(\"The Prey's Lament\", true, {\r\n            bloodthirstyKnight: {\r\n                description: \"1 Bloodthirsty Knight\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"bloodthirstyKnight\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            rapaciousHighwayman: {\r\n                description: \"1 Rapacious Highwayman\",\r\n                type: \"combat\",\r\n                enabled: false,\r\n                enemies: [\r\n                    {\r\n                        name: \"rapaciousHighwayman\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            condemnedSlasher: {\r\n                description: \"1 Condemned Slasher\",\r\n                type: \"combat\",\r\n                enabled: true,\r\n                enemies: [\r\n                    {\r\n                        name: \"condemnedSlasher\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            crushingSnake: {\r\n                description: \"1 Crushing Snake\",\r\n                type: \"combat\",\r\n                enabled: true,\r\n                enemies: [\r\n                    {\r\n                        name: \"crushingSnake\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            skitteringHorror: {\r\n                description: \"1 Skittering Horror\",\r\n                type: \"combat\",\r\n                enabled: true,\r\n                enemies: [\r\n                    {\r\n                        name: \"skitteringHorror\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            deadlyHornet: {\r\n                description: \"1 Deadly Hornet\",\r\n                type: \"combat\",\r\n                enabled: true,\r\n                enemies: [\r\n                    {\r\n                        name: \"deadlyHornet\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            tormentedDead: {\r\n                description: \"1 Tormented Dead\",\r\n                type: \"combat\",\r\n                enabled: true,\r\n                enemies: [\r\n                    {\r\n                        name: \"tormentedDead\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            background: \"backgrounds/parallax-demon-woods-bg.png\",\r\n            far: \"backgrounds/parallax-demon-woods-far-trees.png\",\r\n            mid: \"backgrounds/parallax-demon-woods-mid-trees.png\",\r\n            close: \"backgrounds/parallax-demon-woods-close-trees.png\"\r\n        }\r\n    ),\r\n    caves: new Region(\"The Bottomless Caverns\", false, {}, {}),\r\n    mountains: new Region(\"The Crags of Futility\", false, {}, {}),\r\n    desert: new Region(\"The Desert of Isolation\", false, {}, {})\r\n}\r\n\r\nfunction chooseRandomEncounter(region) {\r\n    const possibleEncounters = Object.keys(region.encounters).filter(encounterId => {\r\n        debugMessage(`Determining if '${encounterId}' is enabled.`);\r\n        const encounterEnabled = region.encounters[encounterId].enabled !== false;\r\n        if (!encounterEnabled) {\r\n            debugMessage(`Encounter '${encounterId}' disabled`);\r\n        }\r\n        const debugNotDisabled = _.get(getGlobalState(), [\"debug\", \"regions\", region.id, \"encounters\", encounterId]) !== false;\r\n        if (!debugNotDisabled) {\r\n            debugMessage(`Encounter '${encounterId}' disabled by debug.`);\r\n        }\r\n        return encounterEnabled && debugNotDisabled;\r\n    });\r\n    const randomKey = possibleEncounters[Math.floor(Math.random() * Object.keys(possibleEncounters).length)];\r\n    debugMessage(`Selected encounter '${randomKey}'`);\r\n    return region.encounters[randomKey];\r\n}","import React from \"react\";\r\n\r\nexport const Actions = {\r\n    exploring: {\r\n        id: \"exploring\",\r\n        duration: \"exploration.explorationTime\",\r\n        description: \"Exploring...\"\r\n    },\r\n    approaching: {\r\n        id: \"approaching\",\r\n        duration: \"exploration.approachTime\",\r\n        description: \"Approaching Enemy...\"\r\n    },\r\n    dead: {\r\n        id: \"dead\",\r\n        duration: 100000000,\r\n        description: \"Rotting, time to reincarnate...\"\r\n    },\r\n    looting: {\r\n        id: \"looting\",\r\n        duration: \"exploration.lootingTime\",\r\n        description: \"Looting the body...\"\r\n    },\r\n    fleeing: {\r\n        id: \"fleeing\",\r\n        duration: \"exploration.fleeingTime\",\r\n        description: \"Fleeing in terror!\"\r\n    },\r\n    fighting: {\r\n        id: \"fighting\",\r\n        duration: \"exploration.combatTime\",\r\n        description: \"In Combat!\",\r\n    },\r\n    reincarnating: {\r\n        id: \"resurrecting\",\r\n        duration: \"exploration.reincarnationTime\",\r\n        description: \"Reincarnating...\"\r\n    },\r\n    recovering: {\r\n        id:\"recovering\",\r\n        duration: \"exploration.recoveryTime\",\r\n        description: \"Healing...\"\r\n    },\r\n    intimidating: {\r\n        id:\"intimidating\",\r\n        duration: \"exploration.intimidateTime\",\r\n        description: \"Intimidating...\"\r\n    }\r\n}","import { config } from \"../config\";\r\nimport * as _ from \"lodash\";\r\n\r\nexport const Attributes = {\r\n    brutality: {\r\n        label: \"Brutality\",\r\n            description: _.template(`Brutality is how savage and ruthless a Demon is. It adds to Power and Resilience.`),\r\n            icon: \"icons/icons-92.png\"\r\n    },\r\n    cunning: {\r\n        label: \"Cunning\",\r\n            description: _.template(\"Cunning is how quick thinking a Demon is. It adds to Evasion.\"),\r\n            icon: \"icons/icons-24.png\"\r\n    },\r\n    deceit: {\r\n        label: \"Deceit\",\r\n            description: _.template(\"Deceit is how underhanded and manipulative a Demon is. It adds to Precision.\"),\r\n            icon: \"icons/icons-17.png\"\r\n    },\r\n    madness: {\r\n        label: \"Madness\",\r\n            description: _.template(`Madness is how disconnected from the limits of reality the Demon is. It gives a \\${rank * ${ config.mechanics.combat.traitRank.effectPerPoint * 100}}% bonus to the effects of Traits and health.`),\r\n            icon: \"icons/icons-124.png\"\r\n    }\r\n}","import {Tactics} from \"../../data/Tactics\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport React from \"react\";\r\n\r\nexport default function (props) {\r\n    return <Grid container>\r\n        <ul>\r\n            {Tactics[props.tactic].modifiers.power_modifier &&\r\n            <Tooltip title=\"Power makes your hits deal additional damage.\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    +{Tactics[props.tactic].modifiers.power_modifier * 100}% to Power\r\n                </li>\r\n            </Tooltip>}\r\n            {Tactics[props.tactic].modifiers.precision_modifier &&\r\n            <Tooltip title=\"Precision makes your hits more severe.\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    +{Tactics[props.tactic].modifiers.precision_modifier * 100}% to Precision\r\n                </li>\r\n            </Tooltip>}\r\n            {Tactics[props.tactic].modifiers.resilience_modifier &&\r\n            <Tooltip title=\"Resilience makes you more resistant to damage.\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    +{Tactics[props.tactic].modifiers.resilience_modifier * 100}% to Resilience\r\n                </li>\r\n            </Tooltip>}\r\n            {Tactics[props.tactic].modifiers.healing_modifier &&\r\n            <Tooltip title=\"Healing increases how quickly you recover from injury.\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    +{Tactics[props.tactic].modifiers.healing_modifier * 100}% to Healing\r\n                </li>\r\n            </Tooltip>}\r\n            {Tactics[props.tactic].modifiers.evasion_modifier &&\r\n            <Tooltip title=\"Evasion makes incoming attacks less severe.\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    +{Tactics[props.tactic].modifiers.evasion_modifier * 100}% to Evasion\r\n                </li>\r\n            </Tooltip>}\r\n            {Tactics[props.tactic].modifiers.critical_hit_damage_modifier &&\r\n            <Tooltip title=\"Critical hits deal extra damage\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    {Tactics[props.tactic].modifiers.critical_hit_damage_modifier * 100}% to Critical hit\r\n                    damage\r\n                </li>\r\n            </Tooltip>}\r\n        </ul>\r\n    </Grid>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {Creatures} from \"../../data/creatures\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport {evaluateExpression, getCharacter, getGlobalState, getLevelForPower, getSpriteForCreature} from \"../../engine\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport * as _ from \"lodash\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {config} from \"../../config\";\r\nimport \"../../App.css\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {Tactics} from \"../../data/Tactics\";\r\nimport { Attributes } from \"../../data/Attributes\";\r\nimport TacticsDescription from \"../charactersheet/TacticsDescription\";\r\n\r\nexport default function ReincarnationSelectionPage(props) {\r\n    const history = useHistory();\r\n    const player = getCharacter(0);\r\n    const [attributes, setAttributes] = useState(Object.keys(player.attributes)\r\n        .reduce((attributes, next) => {\r\n            attributes[next.substring(1)] = player.attributes[next];\r\n            return attributes;\r\n        }, {}));\r\n    const [playerTactics, setPlayerTactics] = useState(getCharacter(0).tactics);\r\n    const [startingTraits, setStartingTraits] = useState(getGlobalState().startingTraits);\r\n    const newLatentPower = getCharacter(0).latentPower.plus(\r\n        evaluateExpression(config.mechanics.reincarnation.latentPowerGainOnReincarnate, {\r\n            player\r\n        }));\r\n    const spendableBonusPoints = Decimal(getGlobalState().highestLevelReached).times(config.mechanics.reincarnation.bonusPointsForHighestLevel);\r\n    const availableBonusPoints = spendableBonusPoints\r\n        .minus(Object.values(attributes).reduce((sum, next) => Decimal(sum).plus(next)))\r\n        .minus(\r\n            Object.values(startingTraits).filter(x => x).reduce((previousValue, x, i) => {\r\n                return previousValue.plus(evaluateExpression(config.mechanics.reincarnation.traitPointCost, {\r\n                    traitsOwned: Decimal(i)\r\n                }))\r\n            }, Decimal(0))\r\n        );\r\n    const nextBonusTraitCost = evaluateExpression(config.mechanics.reincarnation.traitPointCost, {\r\n        traitsOwned: Decimal(Object.values(startingTraits).filter(x => x).length)\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGlobalState().paused = true;\r\n    }, []);\r\n\r\n    return <Grid container>\r\n        <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n            <strong>Reincarnate</strong>\r\n        </Grid>\r\n        <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n            Select a soul to reincarnate as.\r\n            <br/>\r\n            You will reincarnate with a <strong>{newLatentPower.toFixed()}%</strong> bonus to Attributes and absorbed power due to your Latent Power acquired from previous reincarnations.\r\n            <br/>\r\n        </Grid>\r\n\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Spend {availableBonusPoints.toFixed()} {player.powerLevel.gt(1) ? \"points\" : \"point\"} on\r\n                    bonuses </strong> (Reach higher levels to gain more points)\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Attributes</strong>\r\n            </Grid>\r\n            {Object.keys(Attributes).map(attribute => {\r\n                return <Grid item xs={3}>\r\n                    <Tooltip title={Attributes[attribute].description({\r\n                        rank: Decimal(attributes[attribute]).toFixed()\r\n                    })}>\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <img src={Attributes[attribute].icon}/>\r\n                            <div>\r\n                                <Button disabled={availableBonusPoints.lte(0)}\r\n                                        onClick={() => {\r\n                                            setAttributes({\r\n                                                ...attributes,\r\n                                                [attribute]: Decimal(attributes[attribute]).plus(1)\r\n                                            })\r\n                                        }}>\r\n                                    <AddIcon/>\r\n                                </Button>\r\n                                {Decimal(attributes[attribute]).toFixed()}\r\n                                <Button disabled={Decimal(attributes[attribute]).lte(0)} onClick={() => {\r\n                                    setAttributes({...attributes, [attribute]: Decimal(attributes[attribute]).minus(1)})\r\n                                }}>\r\n                                    <RemoveIcon/>\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </Tooltip>\r\n                </Grid>\r\n            })}\r\n            {Object.keys(getGlobalState().unlockedTraits).length > 0 &&\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Bonus Starting Traits</strong> (Start with traits in addition to that innate to your new demon\r\n                form)\r\n            </Grid>}\r\n            {Object.keys(getGlobalState().unlockedTraits).map(traitId => {\r\n                return <Grid item container xs={3} justify=\"space-around\" style={{height: \"138px\"}}>\r\n                    <Grid item xs={12} style={{textAlign: \"center\", height: \"64%\"}}>\r\n                        <Button variant=\"contained\"\r\n                                color={getGlobalState().startingTraits[traitId] ? \"secondary\" : \"default\"}\r\n                                disabled={availableBonusPoints.lt(nextBonusTraitCost) && !startingTraits[traitId]}\r\n                                onClick={() => {\r\n                                    getGlobalState().startingTraits[traitId] = !getGlobalState().startingTraits[traitId];\r\n                                    setStartingTraits({...getGlobalState().startingTraits});\r\n                                }}\r\n                        >\r\n                            <Tooltip title={<div dangerouslySetInnerHTML={{\r\n                                __html: `Rank ${Decimal(getGlobalState().unlockedTraits[traitId]).toFixed()}: ${Traits[traitId].description({\r\n                                    rank: Decimal(getGlobalState().unlockedTraits[traitId])\r\n                                })}`\r\n                            }}>\r\n                            </div>}>\r\n                                <Grid container>\r\n                                    <Grid item xs={12}>\r\n                                        <img src={Traits[traitId].icon}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        {Traits[traitId].name} {Decimal(getGlobalState().unlockedTraits[traitId]).toFixed()}\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <em style={{visibility: startingTraits[traitId] ? \"hidden\" : \"visible\" }}>{nextBonusTraitCost.toFixed()} pts</em>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Tooltip>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n        <Grid container item>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <Tooltip title=\"Tactics provide modifiers based on your fighting style\">\r\n                    <strong>Choose Tactics</strong>\r\n                </Tooltip>\r\n            </Grid>\r\n            <Grid container item xs={12} justify=\"space-around\" direction=\"row\">\r\n                {Object.keys(Tactics).map(tactic =>\r\n                    <Grid item>\r\n                        <Button variant=\"contained\" onClick={() => {\r\n                            setPlayerTactics(getCharacter(0).tactics = tactic)\r\n                        }}\r\n                                color={player.tactics === tactic ? \"primary\" : \"default\"}\r\n                        >{Tactics[tactic].title}</Button>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n            <Grid item style={{textAlign: \"center\"}}>\r\n                <em>{Tactics[player.tactics].description}</em>\r\n            </Grid>\r\n\r\n            <TacticsDescription tactic={player.tactics}/>\r\n\r\n        </Grid>\r\n\r\n        <Grid container item xs={12} alignItems=\"stretch\" justify=\"flex-start\">\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Choose a demon to reincarnate as.</strong>\r\n            </Grid>\r\n            {\r\n                Object.keys(Creatures)\r\n                    .filter(id => {\r\n                            const creatureEnabled = Creatures[id].enabled !== false;\r\n                            const debugEnabled = _.get(getGlobalState(), [\"debug\", \"creatures\", id, \"enabled\"], true);\r\n                            return creatureEnabled && debugEnabled;\r\n                        }\r\n                    )\r\n                    .map(name => {\r\n                        if (!getGlobalState().unlockedMonsters[name]) {\r\n                            return <Grid container xs={3} justify=\"space-around\" style={{height: \"150px\"}}>\r\n                                <Grid item xs={12} style={{textAlign: \"center\", height: \"64%\"}}>\r\n                                    <Tooltip\r\n                                        title={<div>An unknown type of Demon. Selects a random Demon you have not\r\n                                            already\r\n                                            played as.</div>}>\r\n                                        <Button variant=\"contained\" style={{height: \"100%\", width: \"50%\"}}\r\n                                                onClick={() => {\r\n                                                    props.reincarnate(\"random\", attributes);\r\n                                                    history.push(\"/adventuring\");\r\n                                                }}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={12}>\r\n                                                    ???\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                            </Grid>\r\n                        } else {\r\n                            return <Grid container xs={3} justify=\"space-around\">\r\n                                <Grid item xs={12} style={{textAlign: \"center\", height: \"150px\"}}>\r\n                                    <Tooltip title={<div>{Creatures[name].description}</div>}>\r\n                                        <Button variant=\"contained\" style={{height: \"75%\", width: \"50%\"}}\r\n                                                onClick={() => {\r\n                                                    props.reincarnate(name, attributes);\r\n                                                    history.push(\"/adventuring\");\r\n                                                }}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={12}>\r\n                                                    <img src={getSpriteForCreature(name)}/>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    {Creatures[name].name}\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    })\r\n            }\r\n        </Grid>\r\n    </Grid>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Help} from \"@material-ui/icons\";\r\nimport {config} from \"../../config\";\r\nimport React from \"react\";\r\nimport { Attributes } from \"../../data/Attributes\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nexport default function CharacterAttributes(props) {\r\n    return <React.Fragment>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                Health\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.currentHp.toFixed()} / {props.character.maximumHp.toFixed()}\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container direction=\"row\">\r\n            {Object.keys(Attributes).map(attribute => {\r\n                return <Grid item xs>\r\n                    <Tooltip title={Attributes[attribute].description({\r\n                        rank: Decimal(props.character.attributes[attribute]).toFixed()\r\n                    })}>\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <img src={Attributes[attribute].icon}/>\r\n                            <div>\r\n                                <span style={{fontSize: \"12\"}}>{Attributes[attribute].label}</span>\r\n                            </div>\r\n                            <div>\r\n                                {Decimal(props.character.attributes[attribute]).toFixed()}\r\n                            </div>\r\n                        </div>\r\n                    </Tooltip>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n\r\n    </React.Fragment>\r\n}","import Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport React from \"react\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nexport default function CharacterTraits(props) {\r\n    return <React.Fragment>\r\n        {Object.keys(props.character.traits).map(trait => <Tooltip key={trait} title={\r\n            <React.Fragment>\r\n                <span>Tier {Decimal(props.character.traits[trait]).toFixed()}: </span>\r\n            <span dangerouslySetInnerHTML={{\r\n                __html: Traits[trait].description({\r\n                    rank: Decimal(props.character.traits[trait])\r\n                })\r\n            }}></span>\r\n            </React.Fragment>}>\r\n            <img src={Traits[trait].icon}></img>\r\n        </Tooltip>)\r\n        }\r\n    </React.Fragment>\r\n\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport React from \"react\";\r\nimport TacticsDescription from \"./TacticsDescription\";\r\nimport {Tactics} from \"../../data/Tactics\";\r\n\r\nexport default function TacticsSection(props) {\r\n    return <Grid container>\r\n        <Grid item xs={12}>\r\n            <Tooltip title=\"Your approach to combat\">\r\n                <span>Utilizing {Tactics[props.character.tactics].title} Tactics</span>\r\n            </Tooltip>\r\n        </Grid>\r\n        <Grid container direction=\"row\">\r\n            <TacticsDescription tactic={props.character.tactics}/>\r\n        </Grid>\r\n\r\n    </Grid>\r\n}","import {config} from \"../../config\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport * as _ from \"lodash\";\r\n\r\nexport default function getHitChanceBy(attackingCharacter) {\r\n    return {\r\n        against: function(targetCharacter) {\r\n            const attackerPrecision = attackingCharacter.combat.precision;\r\n            const targetEvasion = Decimal(_.get(targetCharacter, [\"combat\", \"evasion\"], 0));\r\n            return {\r\n                min: Decimal(config.mechanics.combat.baseMinimumDamageWeight)\r\n                    .plus(targetEvasion.times(3)),\r\n                med: Decimal(config.mechanics.combat.baseMedianDamageWeight)\r\n                    .plus(targetEvasion).plus(attackerPrecision),\r\n                max: Decimal(config.mechanics.combat.baseMaximumDamageWeight)\r\n                    .plus(attackerPrecision.times(2)),\r\n            }\r\n        }\r\n    }\r\n}","import {Decimal} from \"decimal.js\";\r\nimport * as _ from \"lodash\";\r\nimport { config } from \"../../config\";\r\nimport {debugMessage} from \"../../debugging\";\r\nimport {defaultMergeProps} from \"react-redux/lib/connect/mergeProps\";\r\n\r\nexport default function calculateDamageBy(attacker) {\r\n    return {\r\n        against: function (target, debugOutput) {\r\n            const attackerPower = attacker.combat.power;\r\n            const powerMultiplier = Decimal(config.mechanics.combat.power.effectPerPoint).plus(1)\r\n                .pow(attackerPower);\r\n            debugMessage(`Attacker ${attacker.id} has power ${attackerPower} for multiplier ${powerMultiplier}.`);\r\n            const defenderResilience = _.get(target, [\"combat\", \"resilience\"], 0);\r\n            const resilienceMultiplier = Decimal(1).minus(config.mechanics.combat.power.effectPerPoint)\r\n                .pow(defenderResilience);\r\n            if(target) {\r\n                debugMessage(`Defender ${target.id} has resilience ${defenderResilience} for multiplier ${resilienceMultiplier}.`);\r\n            } else {\r\n                debugMessage(`No target means an effective resilience of ${defenderResilience} and a multiplier of ${resilienceMultiplier}`)\r\n            }\r\n            const damageModifier = powerMultiplier.times(resilienceMultiplier);\r\n            debugMessage(`Final damage multiplier = ${damageModifier}. Min: ${attacker.combat.minimumDamage.times(damageModifier).ceil()} Med: ${attacker.combat.medianDamage.times(damageModifier).ceil()} Max: ${attacker.combat.maximumDamage.times(damageModifier).ceil()}`);\r\n            return {\r\n                min: attacker.combat.minimumDamage.times(damageModifier).ceil(),\r\n                med: attacker.combat.medianDamage.times(damageModifier).ceil(),\r\n                max: attacker.combat.maximumDamage.times(damageModifier).ceil()\r\n            }\r\n        }\r\n    }\r\n\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useMemo} from \"react\";\r\nimport {getCharacter, getGlobalState, getPowerNeededForLevel, getSpriteForCreature} from \"../engine\";\r\nimport {config} from \"../config\";\r\nimport PowerLevelDisplay from \"./charactersheet/PowerLevelDisplay\";\r\nimport CharacterAttributes from \"./charactersheet/CharacterAttributes\";\r\nimport CharacterTraits from \"./charactersheet/CharacterTraits\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport TacticsSection from \"./charactersheet/TacticsSection\";\r\nimport getHitChanceBy from \"../engine/combat/getHitChanceBy\";\r\nimport calculateDamageBy from \"../engine/combat/calculateDamageBy\";\r\nimport * as _ from \"lodash\";\r\nimport {Help} from \"@material-ui/icons\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nconst styles = {\r\n    tooltip: {\r\n        fontSize: \"12pt\"\r\n    }\r\n}\r\n\r\nexport default function CharacterSheet(props) {\r\n    const spriteSrc = useMemo(() => getSpriteForCreature(props.character.appearance), [props.character.appearance]);\r\n    const hitChances = getHitChanceBy(props.character).against(props.enemy)\r\n    const calculatedDamage = useMemo(() => calculateDamageBy(props.character).against(props.enemy),\r\n        [\r\n            props.character,\r\n            props.enemy\r\n        ]);\r\n    const combinedHitWeights = Object.values(hitChances).reduce((total, next) => total.plus(next));\r\n    const powerRequiredForCurrentLevel = getPowerNeededForLevel(props.character.powerLevel);\r\n    const powerNeededForNextLevel = getPowerNeededForLevel(props.character.powerLevel.plus(1));\r\n    const progressToNextLevel = props.character.absorbedPower.minus(powerRequiredForCurrentLevel);\r\n\r\n\r\n    return <Grid container>\r\n        <Grid item xs={12}>\r\n            <img src={spriteSrc} style={{height: \"75px\"}}/>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs>\r\n                Level\r\n            </Grid>\r\n            <Grid item xs>\r\n                {props.character.powerLevel.toFixed()}\r\n            </Grid>\r\n            <Grid item xs>\r\n                Latent Power Bonus\r\n            </Grid>\r\n            <Grid item xs>\r\n                {props.character.latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale).times(100).toFixed()}%\r\n            </Grid>\r\n        </Grid>\r\n        {props.character.absorbedPower !== undefined && <Grid item xs={12}>\r\n            <progress\r\n                value={progressToNextLevel.div(powerNeededForNextLevel).times(100).toNumber()}\r\n                max={100}\r\n                title={`${progressToNextLevel.toFixed()}/${powerNeededForNextLevel.toFixed()}`}\r\n            ></progress>\r\n        </Grid>}\r\n        <Grid container>\r\n            <Grid item container>\r\n                <Grid item xs>\r\n                    <strong>Attributes</strong>\r\n                </Grid>\r\n            </Grid>\r\n            <CharacterAttributes character={props.character}/>\r\n        </Grid>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Combat Statistics</strong>\r\n            </Grid>\r\n            <Grid container>\r\n                <Tooltip title={`Your Power increases the damage your attacks deal by ${Decimal(config.mechanics.combat.power.effectPerPoint).times(props.character.combat.power).times(100).toFixed()}%.`}>\r\n                    <Grid item container>\r\n                        <Grid item xs style={{textAlign: \"center\"}}>\r\n                            Power\r\n                        </Grid>\r\n                        <Grid item xs>\r\n                            {props.character.combat.power.toFixed()}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Tooltip>\r\n                <Tooltip title={`Your Resilience reduces the damage your attacks deal by ${Decimal(config.mechanics.combat.resilience.effectPerPoint).times(props.character.combat.resilience).times(100).toFixed()}%.`}>\r\n                    <Grid item container>\r\n                        <Grid item xs style={{textAlign: \"center\"}}>\r\n                            Resilience\r\n                        </Grid>\r\n                        <Grid item xs>\r\n                            {props.character.combat.resilience.toFixed()}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Tooltip>\r\n                <Tooltip title={`Your Evasion reduces the severity of hits you take.`}>\r\n                    <Grid item container>\r\n                        <Grid item xs style={{textAlign: \"center\"}}>\r\n                            Evasion\r\n                        </Grid>\r\n                        <Grid item xs>\r\n                            {props.character.combat.evasion.toFixed()}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Tooltip>\r\n                <Tooltip title={`Your Precision increases the severity of hits you score.`}>\r\n                    <Grid item container>\r\n                        <Grid item xs style={{textAlign: \"center\"}}>\r\n                            Precision\r\n                        </Grid>\r\n                        <Grid item xs>\r\n                            {props.character.combat.precision.toFixed()}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Tooltip>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <strong>Hit Chances</strong>\r\n                </Grid>\r\n                <Grid item container xs={12}>\r\n                    <Grid item xs><em>Type</em></Grid>\r\n                    <Grid item xs><em>Chance</em></Grid>\r\n                    <Grid item xs><em>Damage</em></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                </Grid>\r\n                <Grid item container xs={12}>\r\n                    <Grid item xs>\r\n                        Glancing Hit\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {hitChances.min.div(combinedHitWeights).times(100).toFixed(2)}%\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {calculatedDamage.min.toFixed()}\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                        <Tooltip title=\"Glancing hits deal 50% less  damage\">\r\n                            <Help/>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item container xs={12}>\r\n                    <Grid item xs>\r\n                        Solid Hit\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {hitChances.med.div(combinedHitWeights).times(100).toFixed(2)}%\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {calculatedDamage.med.toFixed()}\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                        <Tooltip title=\"Solid hits deal normal damage\">\r\n                            <Help/>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item container xs={12}>\r\n                    <Grid item xs>\r\n                        Critical Hit\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {hitChances.max.div(combinedHitWeights).times(100).toFixed(2)}%\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {calculatedDamage.max.toFixed()}\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                        <Tooltip title=\"Critical hits deal 50% more damage.\">\r\n                            <Help/>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Traits</strong>\r\n            </Grid>\r\n            <CharacterTraits character={props.character}/>\r\n        </Grid>\r\n        {config.mechanics.artifacts.enabled && <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Artifacts</strong>\r\n            </Grid>\r\n            <Grid>\r\n                {\r\n                    JSON.stringify(props.character.items)\r\n                }\r\n            </Grid>\r\n        </Grid>}\r\n        <TacticsSection character={props.character}/>\r\n    </Grid>\r\n\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React from \"react\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nconst styles = {\r\n    root: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#eeeeee\"\r\n    }\r\n}\r\n\r\nexport default function PlayerStats(props) {\r\n    return <Paper style={styles.root} elevation={2}>\r\n        <CharacterSheet character={props.player} enemy={props.enemy}/>\r\n    </Paper>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useMemo} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {getCharacter, getGlobalState, getLevelForPower, getPowerNeededForLevel} from \"../engine\";\r\n\r\nconst styles = {\r\n    root: {\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flex: \"0\"\r\n    },\r\n    buttons: {\r\n        width: \"100%\"\r\n    }\r\n}\r\n\r\nexport default function TopSection(props) {\r\n    const history = useHistory();\r\n    const reincarnateEnabled = useMemo(() => getCharacter(0).powerLevel.gt(1) || !getCharacter(0).isAlive, [\r\n        getCharacter(0).powerLevel,\r\n        getCharacter(0).isAlive\r\n    ])\r\n    return <div style={styles.root}>\r\n        <Button onClick={() => history.push(\"/reincarnating\")} style={styles.buttons} variant=\"contained\" color=\"secondary\" disabled={!reincarnateEnabled}>\r\n            Reincarnate\r\n        </Button>\r\n    </div>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React from \"react\";\r\nimport {Statuses} from \"../data/Statuses\";\r\n\r\nexport default function CharacterCombatSummary(props) {\r\n    return <Grid item container xs >\r\n        <Grid item xs={12} container direction={props.direction}>\r\n            <Grid item xs={6}>\r\n                {props.name}\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <meter style={{width: \"80%\"}} low={33} high={66} optimum={100} min={0} max={100}\r\n                       value={props.currentHp.div(props.maximumHp).times(100).floor().toNumber()}\r\n                       max={100}></meter>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container item xs={12} style={{height: \"40px\"}} direction={props.direction}>\r\n            {props.statuses && Object.keys(props.statuses).map(status => {\r\n                return <Grid item xs={1}>\r\n                    <img src={Statuses[status].icon}/>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n    </Grid>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {evaluateExpression, getCharacter, getGlobalState} from \"../engine\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {config} from \"../config\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport CharacterCombatSummary from \"./CharacterCombatSummary\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flex: \"1 0 auto\",\r\n        justifyContent: \"flex-end\",\r\n        flexDirection: \"column\"\r\n    },\r\n    actions: {\r\n        container: {\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            flexDirection: \"row\"\r\n        },\r\n        buttons: {\r\n            alignSelf: \"flex-end\",\r\n            flex: \"1\"\r\n        }\r\n    },\r\n    action: {\r\n        maxHeight: \"15%\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    },\r\n    actionProgress: {\r\n        width: \"100%\"\r\n    },\r\n    history: {\r\n        height: \"15%\",\r\n        flexDirection: \"column\",\r\n        overflowY: \"scroll\"\r\n    },\r\n    combat: {}\r\n}\r\nexport default function BottomSection(props) {\r\n    if (!props.currentAction) {\r\n        throw new Error(\"No current action\");\r\n    }\r\n    const escapeChance = props.enemy ? evaluateExpression(config.encounters.chanceToEscapeGreater, {\r\n        player: props.player,\r\n        enemy: props.enemy\r\n    }) : Decimal(100);\r\n    const intimidateChance = props.enemy ? evaluateExpression(config.encounters.chanceToIntimidateLesser, {\r\n        player: props.player,\r\n        enemy: props.enemy\r\n    }) : Decimal(100);\r\n    return <div style={styles.root} onMouseEnter={props.startManualSpeedup} onMouseLeave={props.stopManualSpeedup}>\r\n        <Paper style={styles.actions.container}>\r\n            <Button style={styles.actions.buttons} onClick={() => {\r\n                getGlobalState().paused = !getGlobalState().paused;\r\n                props.togglePause(getGlobalState().paused);\r\n            }}>\r\n                {props.paused ? \"Unpause\" : \"Pause\"}\r\n            </Button>\r\n        </Paper>\r\n        <Paper style={styles.actions.container}>\r\n            {actionButton(\"fighting\", \"Fight\", \"Combat the enemy. On victory, steal some of the power of the vanquished foe.\", props)}\r\n            {actionButton(\"fleeing\", \"Flee\", `Attempt to escape. Your chance is  ${escapeChance}%.`, props)}\r\n            {actionButton(\"intimidating\", \"Intimidate\", `Try to cow the enemy, compelling them to continuously provide you a portion of their life force. Your chance is ${intimidateChance}%`, props)}\r\n            {_.get(config, \"features.negotiating.enabled\") && actionButton(\"negotiating\", \"Negotiate\", \"Combat the enemy. On victory, steal some of the power of the vanquished foe.\", props)}\r\n        </Paper>\r\n        <Paper style={styles.combat.details}>\r\n            <Grid container>\r\n                <CharacterCombatSummary name=\"Player\" currentHp={props.player.currentHp}\r\n                                        maximumHp={props.player.maximumHp}\r\n                                        statuses={_.get(props.player, \"statuses\")}\r\n                                        direction=\"row\"/>\r\n                <CharacterCombatSummary name={_.get(props.enemy, \"name\")} currentHp={_.get(props.enemy, \"currentHp\", Decimal(0))}\r\n                                        maximumHp={_.get(props.enemy, \"maximumHp\", Decimal(100))}\r\n                                        statuses={_.get(props.enemy, \"statuses\")}\r\n                                        direction=\"row-reverse\"/>\r\n            </Grid>\r\n        </Paper>\r\n        <Paper style={styles.action}>\r\n            <strong>{props.currentAction.description}</strong>\r\n            <progress style={styles.actionProgress} value={props.actionTime}\r\n                      max={_.get(props.state, props.currentAction.duration)}/>\r\n        </Paper>\r\n        <Paper style={styles.history}>\r\n            {\r\n                props.actionLog.map(item => printActionItem(item))\r\n            }\r\n        </Paper>\r\n    </div>\r\n}\r\n\r\nfunction printActionItem(item) {\r\n    return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n        <Grid item xs={11}>\r\n                <span dangerouslySetInnerHTML={{\r\n                    __html: item.message\r\n                }}></span>\r\n        </Grid>\r\n        {item.tick && <Grid item={1}>{item.tick}: </Grid>}\r\n    </Grid>\r\n}\r\n\r\nfunction actionButton(action, text, description, props) {\r\n    return <Tooltip title={description}>\r\n        <Button onClick={() => props.setNextAction(action)} style={styles.actions.buttons}\r\n                disabled={props.currentAction.id !== \"approaching\"}\r\n                variant={props.nextActionName === action ? \"contained\" : \"outlined\"}\r\n                color={props.nextActionName === action ? \"primary\" : \"default\"}>\r\n            {text}\r\n        </Button>\r\n    </Tooltip>\r\n}","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nconst styles = {\r\n    root: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#eeeeee\"\r\n    }\r\n}\r\n\r\nexport default function EnemySidebar(props) {\r\n    return <Paper style={styles.root}>\r\n        {props.enemy && <CharacterSheet enemy={props.player} character={props.enemy} /> }\r\n    </Paper>\r\n}","import {config} from \"../config\";\r\nimport * as _ from \"lodash\";\r\nimport {Attributes, calculateCombatStat} from \"../character\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {Tactics} from \"../data/Tactics\";\r\nimport {Statuses} from \"../data/Statuses\";\r\n\r\nexport default class CharacterCombatState {\r\n    constructor(originalCharacter, party) {\r\n        this.id = originalCharacter.id;\r\n        // FIXME: Symbols?\r\n        this.attributes = new Attributes({\r\n            brutality: originalCharacter.attributes.baseBrutality,\r\n            deceit: originalCharacter.attributes.baseDeceit,\r\n            cunning: originalCharacter.attributes.baseCunning,\r\n            madness: originalCharacter.attributes.baseMadness\r\n        }, originalCharacter);\r\n        this.party = party;\r\n        this.hp = originalCharacter.currentHp;\r\n        this._speed = originalCharacter.speed;\r\n        this.maximumHp = originalCharacter.maximumHp;\r\n        this.fatigue = 0;\r\n        this.lastActed = 0;\r\n        this.modifiers = [];\r\n        this.tactics = originalCharacter.tactics;\r\n        this.traits = {...originalCharacter.traits};\r\n        this.damage = {\r\n            min: originalCharacter.combat.minimumDamage,\r\n            med: originalCharacter.combat.medianDamage,\r\n            max: originalCharacter.combat.maximumDamage\r\n        }\r\n        this.statuses = {...originalCharacter.statuses};\r\n    }\r\n\r\n    get combat() {\r\n        return {\r\n            precision: Decimal(this.precision),\r\n            evasion: Decimal(this.evasion),\r\n            power: Decimal(this.power),\r\n            resilience: Decimal(this.resilience),\r\n            minimumDamage: Decimal(this.damage.min),\r\n            medianDamage: Decimal(this.damage.med),\r\n            maximumDamage: Decimal(this.damage.max)\r\n        }\r\n    }\r\n\r\n    set speed(newSpeed) {\r\n        this._speed = newSpeed;\r\n    }\r\n\r\n    get speed() {\r\n        const baseSpeed = this._speed;\r\n        const speedMultiplier = this.modifiers.reduce((currentValue, modifier) => {\r\n            if(modifier.effects.speed) {\r\n                const multiplier = (modifier.effects.speed.percent.plus(100))/100\r\n                return currentValue.plus(multiplier);\r\n            }\r\n            return currentValue;\r\n        }, _.get(config.tactics, this.tactics, 1));\r\n        return baseSpeed.times(speedMultiplier);\r\n    }\r\n\r\n    get isAlive(){\r\n        return this.hp.gt(0);\r\n    }\r\n\r\n    get accuracy() {\r\n        const baseAccuracy = Decimal(config.mechanics.combat.baseHitChance);\r\n        const statusesMultiplier = Decimal(1).minus(\r\n            Decimal(Statuses[\"restrained\"].effects.accuracy_modifier)\r\n            .times(this.statuses[\"restrained\"] || 0));\r\n        return baseAccuracy.times(statusesMultiplier);\r\n    }\r\n\r\n    get canAct() {\r\n        return Object.keys(this.statuses).reduce((canAct, nextStatus) => {\r\n            return canAct && !Statuses[nextStatus].effects.skip_turn;\r\n        }, true);\r\n    }\r\n\r\n    get power() {\r\n        return calculateCombatStat(this, \"power\");\r\n    }\r\n\r\n    get resilience() {\r\n        return calculateCombatStat(this, \"resilience\");\r\n    }\r\n\r\n    get precision() {\r\n        return calculateCombatStat(this, \"precision\");\r\n    }\r\n\r\n    get evasion() {\r\n        return calculateCombatStat(this, \"evasion\");\r\n    }\r\n}","import CharacterCombatState from \"../CharacterCombatState\";\r\nimport {debugMessage} from \"../../debugging\";\r\nimport {getTrait} from \"../../data/Traits\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {config} from \"../../config\";\r\nimport {v4} from \"node-uuid\";\r\nimport {generateHitCombatResult, generateMissCombatResult, generateSkipActionResult} from \"../../combatResult\";\r\nimport {evaluateExpression, getCharacter} from \"../index\";\r\nimport * as _ from \"lodash\";\r\nimport getHitChanceBy from \"./getHitChanceBy\";\r\nimport {Statuses} from \"../../data/Statuses\";\r\nimport {act} from \"@testing-library/react\";\r\nimport calculateDamageBy from \"./calculateDamageBy\";\r\n\r\nexport function resolveCombat(rng, definition) {\r\n    const combatResult = {\r\n        rounds: [],\r\n        winner: null,\r\n        combatantCombatStats: {},\r\n    }\r\n\r\n    _.flatMap(definition.parties.map((party, partyIndex) => {\r\n        return party.map((character) => {\r\n            combatResult.combatantCombatStats[character.id] = new CharacterCombatState(character, partyIndex);\r\n        })\r\n    }));\r\n    debugMessage(\"Beginning combat\")\r\n    Object.values(combatResult.combatantCombatStats).forEach(combatant => {\r\n        const startOfCombatEffects = [];\r\n        // Trigger start of combat effects.\r\n        triggerEvent(combatant, null, Object.values(combatResult.combatantCombatStats), {\r\n            type: \"on_combat_start\",\r\n            actor: combatant}, 0, {\r\n            combat: combatResult,\r\n            round: {effects: startOfCombatEffects}\r\n        }, rng);\r\n        startOfCombatEffects.forEach(effect => {\r\n            combatResult.rounds.push(effect);\r\n        });\r\n    })\r\n\r\n\r\n    let tick = 0;\r\n    while (combatResult.winner === null) {\r\n        const initiatives = determineInitiatives(combatResult);\r\n        Object.keys(initiatives).forEach(initiativeCount => {\r\n            const actingCharacters = initiatives[initiativeCount];\r\n            actingCharacters.forEach(actingCharacter => {\r\n                const beginningOfRoundEffects = [];\r\n                triggerEvent(actingCharacter, null, Object.values(combatResult.combatantCombatStats), {type: \"on_round_start\"}, tick, {\r\n                    combat: combatResult,\r\n                    round: {effects: beginningOfRoundEffects}\r\n                }, rng);\r\n                beginningOfRoundEffects.forEach(effect => {\r\n                    combatResult.rounds.push(effect);\r\n                });\r\n                tick = actingCharacter.lastActed + actingCharacter.speed.toNumber();\r\n                actingCharacter.lastActed = tick;\r\n                debugMessage(`Tick ${tick}: Resolving action by character '${actingCharacter.id}'.`);\r\n                if (actingCharacter.hp.lte(0)) {\r\n                    debugMessage(`Tick ${tick}: Character ${actingCharacter.id} was dead when their turn to act came up, skipping their action.`);\r\n                    return;\r\n                }\r\n                const enemyParty = (actingCharacter.party + 1) % 2;\r\n                const livingEnemies = definition.parties[enemyParty]\r\n                    .filter(enemy => combatResult.combatantCombatStats[enemy.id].hp.gt(0));\r\n                const target = combatResult.combatantCombatStats[_.get(livingEnemies[Math.floor(rng.double() * livingEnemies.length)], \"id\")];\r\n                if (target === undefined) {\r\n                    debugMessage(`Tick ${tick}: No valid target, skipping action by ${actingCharacter.id}.`);\r\n                    return;\r\n                }\r\n                if (actingCharacter.canAct) {\r\n                    debugMessage(`Tick ${tick}: Attacking ${target}`);\r\n                    const attackRollResult = makeAttackRoll(actingCharacter, target, combatResult, rng);\r\n                    const attackOutcome = evaluateExpression(config.mechanics.combat.determineHit, {\r\n                        roll: attackRollResult.total,\r\n                        target: 100\r\n                    });\r\n                    switch (attackOutcome) {\r\n                        case \"hit\":\r\n                            debugMessage(`Tick ${tick}: ${actingCharacter.id} rolled ${attackRollResult.total}, a hit.`);\r\n                            resolveHit(tick, combatResult, actingCharacter, target, rng);\r\n                            break;\r\n                        default:\r\n                            debugMessage(`Tick ${tick}: ${actingCharacter.id} rolled ${attackRollResult.total}, a miss.`);\r\n                            resolveMiss(tick, combatResult, actingCharacter, target, rng);\r\n                        // TODO: Trigger on-miss effects\r\n                    }\r\n                } else {\r\n                    debugMessage(`${tick}: Character skips their action.`);\r\n                    resolveSkippedAction(tick, combatResult, actingCharacter);\r\n                }\r\n                Object.keys(combatResult.combatantCombatStats).forEach(combatantId => {\r\n                    if (combatResult.combatantCombatStats[combatantId].hp.lte(0)) {\r\n                        debugMessage(`Tick ${tick}: Combatant ${combatantId} died`);\r\n                        combatResult.rounds.push({\r\n                            uuid: v4(),\r\n                            tick,\r\n                            actor: actingCharacter.id,\r\n                            target: Number.parseInt(combatantId),\r\n                            result: \"kill\"\r\n                        });\r\n                    }\r\n                });\r\n\r\n                // TODO: Add logs for when effects expire.\r\n                actingCharacter.modifiers = actingCharacter.modifiers\r\n                    .map(modifier => {\r\n                        modifier.roundDuration = Decimal(modifier.roundDuration).minus(1);\r\n                        return modifier;\r\n                    })\r\n                    .filter(modifier => Decimal(modifier.roundDuration).gt(0));\r\n                const endOfRoundEffects = [];\r\n                triggerEvent(actingCharacter, null, Object.values(combatResult.combatantCombatStats), {\r\n                    type: \"on_round_end\",\r\n                    actor: actingCharacter\r\n                }, tick, {\r\n                    combat: combatResult,\r\n                    round: {effects: endOfRoundEffects}\r\n                }, rng);\r\n                Object.keys(actingCharacter.statuses).filter(x => Statuses[x].decays).forEach(status => {\r\n                    actingCharacter.statuses[status] = actingCharacter.statuses[status].minus(1);\r\n                    if (Decimal(0).lte(actingCharacter.statuses[status] || 0)) {\r\n                        delete actingCharacter.statuses[status]\r\n                        combatResult.rounds.push({\r\n                            uuid: v4(),\r\n                            tick,\r\n                            actor: actingCharacter.id,\r\n                            result: \"status-removed\",\r\n                            status\r\n                        });\r\n                    }\r\n                });\r\n                endOfRoundEffects.forEach(event => {\r\n                    combatResult.rounds.push(event);\r\n                })\r\n            });\r\n        });\r\n        const playerPartyDead = definition.parties[0].every(character => combatResult.combatantCombatStats[character.id].hp.lte(0));\r\n        const enemyPartyDead = definition.parties[1].every(character => combatResult.combatantCombatStats[character.id].hp.lte(0));\r\n        if (playerPartyDead || enemyPartyDead) {\r\n            if (playerPartyDead) {\r\n                debugMessage(\"Every member of party 0 is dead\")\r\n                combatResult.rounds.push({\r\n                    uuid: v4(),\r\n                    tick,\r\n                    winner: 1,\r\n                    result: \"combat-end\"\r\n                })\r\n                combatResult.winner = 1;\r\n                // Clear all end of combat\r\n            } else if (enemyPartyDead) {\r\n                debugMessage(\"Every member of party 1 is dead\")\r\n                combatResult.rounds.push({\r\n                    uuid: v4(),\r\n                    tick,\r\n                    winner: 0,\r\n                    result: \"combat-end\",\r\n                });\r\n                combatResult.winner = 0;\r\n            }\r\n\r\n        } else {\r\n            debugMessage(\"No winner, combat continues\");\r\n        }\r\n    }\r\n    return combatResult\r\n\r\n}\r\n\r\nfunction resolveHit(tick, combatResult, actingCharacter, targetCharacter, rng) {\r\n    if (typeof actingCharacter !== \"object\") {\r\n        throw new Error(`Acting character was not an object!`);\r\n    }\r\n    if (typeof targetCharacter !== \"object\") {\r\n        throw new Error(`Target character was not an object!`);\r\n    }\r\n    const hitTypeChances = getHitChanceBy(actingCharacter).against(targetCharacter);\r\n    const damageCategories = calculateDamageBy(actingCharacter).against(targetCharacter, config.debug.enabled);\r\n    const damageRoll = Math.floor(rng.double() * 100);\r\n    let hitType;\r\n    if (damageRoll <= hitTypeChances.min) {\r\n        hitType = \"min\";\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a glancing hit.`);\r\n    } else if (damageRoll <= hitTypeChances.med.plus(hitTypeChances.min)) {\r\n        hitType = \"med\";\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a solid hit.`);\r\n    } else {\r\n        hitType = \"max\";\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a critical hit.`);\r\n    }\r\n    const baseDamageToInflict = damageCategories[hitType];\r\n    const attackResult = {\r\n        baseDamage: baseDamageToInflict,\r\n        hitType,\r\n        attackMultiplier: Decimal(0),\r\n        defenseDivisor: Decimal(0),\r\n        effects: []\r\n    }\r\n    // Trigger on-hit effects\r\n    triggerEvent(actingCharacter, targetCharacter, Object.values(combatResult.combatantCombatStats), {\r\n        type: \"on_hitting\",\r\n        actor: actingCharacter,\r\n        target: targetCharacter\r\n    }, tick, {\r\n        combat: combatResult,\r\n        attack: attackResult\r\n    }, rng);\r\n    const damageMultiplier = Decimal.max(0.01, attackResult.attackMultiplier.minus(attackResult.defenseDivisor).plus(1));\r\n    const finalDamage = baseDamageToInflict.times(damageMultiplier).ceil();\r\n\r\n    debugMessage(`Damage started off as ${baseDamageToInflict.toFixed()}, with an attack factor of ${attackResult.attackMultiplier} and a target defense factor of ${attackResult.defenseDivisor}, for a total factor of ${damageMultiplier} and a final damage of ${finalDamage.toFixed()}`);\r\n    targetCharacter.hp = targetCharacter.hp.minus(finalDamage);\r\n    attackResult.finalDamage = finalDamage;\r\n    debugMessage(`Tick ${tick}: Hit did ${finalDamage.toFixed()}. Additional effects: ${attackResult.effects.map(effect => {\r\n        switch (effect.event) {\r\n            case \"apply_effect\":\r\n                return `Applying effect ${effect.effect} with from ${effect.source} to ${effect.target.id}.`\r\n            case \"add_statuses\":\r\n                return `Adding status ${effect.status} with rank ${effect.rank} to ${effect.target}`;\r\n        }\r\n\r\n    }).join(\", \")}. Character ${targetCharacter.id} has ${targetCharacter.hp} remaining.`)\r\n    // TODO: Trigger on-damage effects\r\n    triggerEvent(targetCharacter, actingCharacter, Object.values(combatResult.combatantCombatStats), {\r\n        type: \"on_taking_damage\",\r\n        actor: actingCharacter,\r\n        target: targetCharacter\r\n    }, tick, {combat: combatResult, attack: attackResult}, rng);\r\n    attackResult.effects.forEach(effect => {\r\n        switch (effect.event) {\r\n            case \"damage\":\r\n                combatResult.combatantCombatStats[effect.target].hp = combatResult.combatantCombatStats[effect.target].hp.minus(effect.value);\r\n                break;\r\n        }\r\n    })\r\n    combatResult.rounds.push(generateHitCombatResult(tick, actingCharacter.id, targetCharacter.id, finalDamage, attackResult.effects));\r\n}\r\n\r\nfunction resolveMiss(tick, combatResult, actingCharacter, targetCharacter, rng) {\r\n    combatResult.rounds.push(generateMissCombatResult(tick, actingCharacter.id, targetCharacter.id));\r\n}\r\n\r\nfunction resolveSkippedAction(tick, combatResult, actingCharacter) {\r\n    combatResult.rounds.push(generateSkipActionResult(tick, actingCharacter.id));\r\n}\r\n\r\nfunction applyTrait(sourceCharacter, targetCharacter, trait, rank, event, state, tick, rng) {\r\n    const eventType = event.type;\r\n    const recordedEffects = roundEvents.includes(eventType) ? state.round.effects : state.attack.effects;\r\n    const rankModifier = Decimal(sourceCharacter.attributes[config.mechanics.combat.traitRank.baseAttribute]).times(config.mechanics.combat.traitRank.effectPerPoint).div(100);\r\n    rank = Decimal.min(Decimal(rank).plus(Decimal(rank).times(rankModifier)).floor(), 100);\r\n    debugMessage(`Character has a bonus to rank of ${sourceCharacter.attributes.madness.toFixed()}% from madness, for an effective rank of ${rank}`);\r\n    debugMessage(`Tick ${tick}: Determining if trait ${trait.name} applies`);\r\n    if (trait[eventType]) {\r\n        const effect = trait[eventType];\r\n        if (effect.conditions !== undefined) {\r\n            debugMessage(\"Trait has conditions\");\r\n        }\r\n        const effectTriggers = effect.conditions === undefined || Object.keys(effect.conditions)\r\n            .every(condition => {\r\n                switch (condition) {\r\n                    case \"critical_hit\":\r\n                        return state.attack.hitType === \"max\";\r\n                    case \"health_percentage\":\r\n                        // Fixme: Implement validation\r\n                        const targets = selectTargets(event.actor, event.target, Object.values(state.combat.combatantCombatStats), \"all_enemies\", state);\r\n                        return targets.reduce((previousValue, combatant) => {\r\n                            const targetPercent = Decimal(effect.conditions[condition].below);\r\n                            const targetCurrentHealth = combatant.hp;\r\n                            const targetMaxHealth = combatant.maximumHp;\r\n                            const currentHealthPercent = (targetCurrentHealth.mul(100).div(targetMaxHealth));\r\n                            const thisConditionMet = targetPercent.gte(currentHealthPercent);\r\n                            debugMessage(`Tick ${tick}: Target health percentage is ${currentHealthPercent}, which is ${thisConditionMet ? \"\" : \"not\"} enough to trigger.`);\r\n                            return previousValue && thisConditionMet;\r\n                        }, true);\r\n\r\n                    case \"chance\":\r\n                        const chanceToTrigger = evaluateExpression(trait[eventType].conditions[condition], {\r\n                            $rank: rank\r\n                        });\r\n                        const roll = Math.floor(rng.double() * 100) + 1;\r\n                        if (chanceToTrigger >= roll) {\r\n                            debugMessage(`Chance to trigger ${chanceToTrigger} with roll ${roll}: success`);\r\n                            return true;\r\n                        } else {\r\n                            debugMessage(`Chance to trigger ${chanceToTrigger} with roll ${roll}: failure.`);\r\n                            return false;\r\n                        }\r\n                    default:\r\n                        return false;\r\n                }\r\n            })\r\n        if (effectTriggers) {\r\n            debugMessage(`Tick ${tick}: Effect triggered, applying effects`);\r\n            Object.keys(trait[eventType].effects).forEach(traitEffect => {\r\n                    // FIXME\r\n                    switch (traitEffect) {\r\n                        case \"damage_modifier\":\r\n                            // FIXME: Validation\r\n                            const percentDamageModifier = evaluateExpression(trait[eventType].effects[traitEffect].percent, {\r\n                                $rank: rank\r\n                            });\r\n                            if (percentDamageModifier) {\r\n                                const newMultiplier = state.attack.attackMultiplier.plus(percentDamageModifier);\r\n                                debugMessage(`Tick ${tick}: Applying ${percentDamageModifier.toFixed()} modifier to damage, changing damage multiplier from ${state.attack.attackMultiplier.div(100).toFixed()} to ${newMultiplier.div(100).toFixed()}`);\r\n                                state.attack.attackMultiplier = newMultiplier;\r\n                            }\r\n                            break;\r\n                        case \"damage\":\r\n                            const target = trait[eventType].effects.target\r\n                            const damageToInflict = evaluateExpression(trait[eventType].effects.damage, {\r\n                                $rank: Decimal(rank),\r\n                                attackDamage: state.attack.finalDamage\r\n                            }).floor();\r\n                            debugMessage(`Inflicting ${damageToInflict} damage to ${target}`);\r\n                            if (damageToInflict.gt(0)) {\r\n                                const targets = selectTargets(event.actor, event.target, Object.values(state.combat.combatantCombatStats), target, state);\r\n                                targets.forEach(target => {\r\n                                    recordedEffects.push({\r\n                                        event: \"damage\",\r\n                                        value: damageToInflict,\r\n                                        target: target.id\r\n                                    });\r\n                                });\r\n                            }\r\n                            break;\r\n                        case \"defense_modifier\": {\r\n                            const defenseModifier = evaluateExpression(trait[eventType].effects[traitEffect].percent, {\r\n                                $rank: rank\r\n                            }).div(100).plus(1);\r\n                            const newMultiplier = state.attack.defenseDivisor.times(defenseModifier);\r\n                            debugMessage(`Tick ${tick}: Applying ${defenseModifier} modifier to defense, changing defense multiplier from ${state.attack.defenseDivisor.toFixed()} to ${newMultiplier.toFixed()}`);\r\n                            state.attack.defenseDivisor = newMultiplier;\r\n                            break;\r\n                        }\r\n                        case \"add_statuses\":\r\n                            const statusesDefinition = trait[eventType].effects.add_statuses;\r\n                            Object.keys(statusesDefinition).forEach(statusType => {\r\n                                const effectTarget = statusesDefinition[statusType].target;\r\n                                // Determine targets\r\n                                const targets = selectTargets(event.actor, event.target, Object.values(state.combat.combatantCombatStats), effectTarget, state);\r\n                                const statusLevel = evaluateExpression(statusesDefinition[statusType].rank, {\r\n                                    rank\r\n                                });\r\n                                targets.forEach(combatant => {\r\n                                    const existingLevel = Decimal(combatant.statuses[statusType] || 0);\r\n                                    if (existingLevel.lt(statusLevel)) {\r\n                                        combatant.statuses[statusType] = statusLevel;\r\n                                        recordedEffects.push({\r\n                                            event: \"add_statuses\", // FIXME: Shouldn't require both event and result.\r\n                                            result: \"add_statuses\",\r\n                                            source: sourceCharacter.id,\r\n                                            target: combatant.id,\r\n                                            status: statusType,\r\n                                            level: statusLevel,\r\n                                            tick\r\n                                        });\r\n                                    }\r\n                                });\r\n                            })\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nfunction makeAttackRoll(actingCharacter, target, combatState, rng) {\r\n    // TODO: Validation\r\n    const accuracy = actingCharacter.accuracy;\r\n    const roll = accuracy.plus(Math.floor((rng.double() * 100)));\r\n    return {\r\n        rawRoll: roll,\r\n        total: roll\r\n    };\r\n}\r\n\r\nfunction selectTargets(sourceCharacter, targetCharacter, combatants, targetType, state) {\r\n    return combatants.filter(combatant => {\r\n        switch (targetType) {\r\n            case \"attacker\":\r\n                return sourceCharacter.id == combatant.id;\r\n            case \"attacked\":\r\n                return targetCharacter.id == combatant.id;\r\n            case \"all_enemies\":\r\n                const actingCharacterParty = sourceCharacter.id === 0 ? 0 : 1;\r\n                return actingCharacterParty !== combatant.party;\r\n            default:\r\n                throw new Error();\r\n        }\r\n    });\r\n}\r\n\r\nfunction triggerEvent(sourceCharacter, targetCharacter, combatants, event, tick, state, rng) {\r\n    debugMessage(`Triggering event ${event.type}`);\r\n    Object.keys(sourceCharacter.traits).forEach(trait => {\r\n        applyTrait(sourceCharacter, targetCharacter, getTrait(trait), sourceCharacter.traits[trait], event, state, tick, rng);\r\n    });\r\n}\r\n\r\nfunction determineInitiatives(state) {\r\n    const combatants = Object.values(state.combatantCombatStats);\r\n    return combatants.reduce((initiatives, combatant) => {\r\n        if (initiatives[combatant.speed.toNumber()]) {\r\n            initiatives[combatant.speed.toNumber()].push(combatant);\r\n        } else {\r\n            initiatives[combatant.speed.toNumber()] = [combatant];\r\n        }\r\n        return initiatives;\r\n    }, {});\r\n}\r\n\r\nconst roundEvents = [\"on_round_start\", \"on_combat_start\", \"on_round_end\"];","import {v4} from \"node-uuid\";\r\n\r\nexport function generateHitCombatResult(tick, attackingCharacterId, targetCharacterId, damageDone, otherEffects) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"hit\",\r\n        target: targetCharacterId,\r\n        actor: attackingCharacterId,\r\n        effects: [{\r\n            event: \"damage\",\r\n            value: damageDone,\r\n            target: targetCharacterId\r\n        }, ...otherEffects]\r\n    }\r\n}\r\n\r\nexport function generateMissCombatResult(tick, attackingCharacterId, targetCharacterId) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"miss\",\r\n        target: targetCharacterId,\r\n        actor: attackingCharacterId,\r\n        effects: []\r\n    }\r\n}\r\n\r\nexport function generateSkipActionResult(tick, actingCharacterId) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"action_skipped\",\r\n        actor: actingCharacterId,\r\n        effects: []\r\n    }\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport {getCharacter} from \"./engine\";\r\nimport React from \"react\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {debugMessage} from \"./debugging\";\r\nimport {Statuses} from \"./data/Statuses\";\r\n\r\nexport default function generateLogItem(item) {\r\n    const result = {\r\n        original: item,\r\n        tick: item.tick\r\n    };\r\n    if(item.message) {\r\n        return item;\r\n    }\r\n    switch (item.result) {\r\n        case \"hit\":\r\n            result.message = `${getCharacter(item.actor).name} hit! ${item.effects.map(effect => describeEffect(item.target, effect)).join(\" \")}`;\r\n            break;\r\n        case \"miss\":\r\n            result.message = `${getCharacter(item.actor).name} ${item.actor === 0 ? 'miss' : 'missed'}! ${item.effects.map(effect => describeEffect(item.target, effect)).join(\" \")}`;\r\n            break;\r\n        case \"kill\":\r\n            result.message = `<strong>${getCharacter(item.target).name} ${item.target === 0 ? 'Were' : 'Was'} Killed!</strong>`;\r\n            break;\r\n        case \"gainedPower\":\r\n            result.message = `You absorbed ${item.value.toFixed()} power.`;\r\n            break;\r\n        case \"healed\":\r\n            result.message = `${getCharacter(item.target).name} gained ${item.value} health.`\r\n            break;\r\n        case \"escaped\":\r\n            result.message = \"You escaped\";\r\n            break;\r\n        case \"action_skipped\":\r\n            result.message = `${getCharacter(item.actor).name} lost ${item.actor === 0 ? 'your' : 'their'} action.`;\r\n            break;\r\n        case \"intimidated\":\r\n            result.message = `${getCharacter(item.target).name} was Bound to you, granting you {item.value.toFixed()} power while you explore.`\r\n            break;\r\n        case \"enemy-fled\":\r\n            result.message = `${getCharacter(item.target).name} Fled!`;\r\n            break;\r\n        case \"combat-end\":\r\n            result.message = `Battle ended`;\r\n            break;\r\n        case \"add_statuses\":\r\n            result.message = `${getCharacter(item.target).name} ${item.target === 0 ? 'gain' : 'gained'} ${Decimal(item.level).toFixed()} ${Decimal(item.level).eq(1) ? 'level' : 'levels'} of ${Statuses[item.status].name}`\r\n            break;\r\n        case \"status-removed\":\r\n            result.message = `${Statuses[item.status].name} was removed from ${getCharacter(item.actor).name}.`\r\n            break;\r\n        default:\r\n            debugMessage(`${JSON.stringify(item)}`);\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction describeEffect(target, effect) {\r\n    switch (effect.event) {\r\n        case \"damage\":\r\n            return `${getCharacter(effect.target).name} ${effect.target == 0 ? 'take' : 'takes'} ${effect.value} Damage.`;\r\n        case \"add_statuses\":\r\n            return `${getCharacter(effect.target).name} gained ${Decimal(effect.level).toFixed()} of ${Statuses[effect.status].name}.`;\r\n    }\r\n}","import PlayerStats from \"../PlayerStats\";\r\nimport TopSection from \"../TopSection\";\r\nimport {\r\n    evaluateExpression,\r\n    getCharacter,\r\n    getGlobalState,\r\n    getManualSpeedMultiplier,\r\n    saveGlobalState\r\n} from \"../../engine\";\r\nimport BottomSection from \"../BottomSection\";\r\nimport EnemySidebar from \"../EnemySidebar\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport {config} from \"../../config\";\r\nimport {Actions} from \"../../data/Actions\";\r\nimport {debugMessage} from \"../../debugging\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {v4} from \"node-uuid\";\r\nimport {Regions} from \"../../data/Regions\";\r\nimport {resolveCombat} from \"../../engine/combat\";\r\nimport {useHotkeys} from \"react-hotkeys-hook\";\r\nimport generateLogItem from \"../../generateLogItem\";\r\nimport {Traits} from \"../../data/Traits\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flex: \"1\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        overflow: \"hidden\"\r\n    },\r\n    image: {\r\n        position: \"absolute\",\r\n        height: \"100%\",\r\n        left: 0\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        left: 0\r\n    }\r\n}\r\n\r\nlet lastTime;\r\n\r\nfunction changeCurrentAction(newAction) {\r\n    getGlobalState().currentAction = newAction;\r\n    return getGlobalState().currentAction;\r\n}\r\n\r\nfunction pushLogItem(item) {\r\n    if (getGlobalState().actionLog.length > (config.actionLog.maxSize || 10)) {\r\n        getGlobalState().actionLog.pop();\r\n    }\r\n    getGlobalState().actionLog.unshift(generateLogItem(item));\r\n}\r\n\r\nexport default function AdventuringPage(props) {\r\n    const accruedTime = useRef(0);\r\n    const [enemy, setEnemy] = useState(_.get(getGlobalState(), [\"currentEncounter\", \"enemies\", 0]));\r\n    const [actionLog, setActionLog] = useState(getGlobalState().actionLog);\r\n    const [currentEncounter, setCurrentEncounter] = useState(getGlobalState().currentEncounter);\r\n    const [currentAction, setCurrentAction] = useState(Actions[getGlobalState().currentAction]);\r\n    const [nextAction, setNextAction] = useState(getGlobalState().nextAction);\r\n    const [paused, setPaused] = useState(getGlobalState().paused);\r\n    const [displayedTime, setDisplayedTime] = useState(0);\r\n    const [player, setPlayer] = useState(getCharacter(0));\r\n    const manualSpeedUpActive = useRef(false);\r\n    function togglePause() {\r\n        getGlobalState().paused = !getGlobalState().paused;\r\n        setPaused(getGlobalState().paused);\r\n    }\r\n\r\n    useHotkeys(\"p\", () => getGlobalState().paused = !getGlobalState().paused);\r\n\r\n    useEffect(() => {\r\n        let lastFrame;\r\n        function applyAction(action, lastTick) {\r\n            if(lastTick && action.tick && action.tick !== lastTick) {\r\n                debugMessage(`Not consuming an action for tick ${action.tick} on tick ${lastTick}`);\r\n                return;\r\n            }\r\n            pushLogItem(action);\r\n            switch (action.result) {\r\n                case \"combat-end\":\r\n                    if (config.mechanics.artifacts.enabled) {\r\n                        setCurrentAction(Actions[changeCurrentAction(\"looting\")]);\r\n                    } else {\r\n                        setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                    }\r\n                    return;\r\n                    break;\r\n                case \"kill\":\r\n                    const enemy = getCharacter(action.target);\r\n                    if (action.actor === 0 && action.target !== 0) {\r\n                        debugMessage(\"Player killed a non-lesser enemy and gained power.\");\r\n                        const player = getCharacter(0);\r\n                        const powerToGain = evaluateExpression(config.mechanics.xp.gainedFromOtherDemon, {\r\n                            enemy\r\n                        });\r\n                        let multiplier = Object.keys(player.traits).reduce((multiplier, trait) => {\r\n                            const traitMultiplier = evaluateExpression(_.get(Traits[trait].on_kill, [\"effects\", \"power_gain_modifier\"], 0),\r\n                                {\r\n                                    rank: Decimal(player.traits[trait])\r\n                                });\r\n                            return multiplier.plus(traitMultiplier);\r\n                        }, Decimal(1))\r\n                        const powerGained = player.gainPower(powerToGain.times(multiplier).floor());\r\n                        pushLogItem(generateLogItem({\r\n                            result: \"gainedPower\",\r\n                            value: powerGained\r\n                        }));\r\n                        getGlobalState().highestLevelReached = Decimal.max(getGlobalState().highestLevelReached, getCharacter(0).powerLevel);\r\n                    } else if (action.target === 0) {\r\n                        getCharacter(0).currentHp = Decimal(0);\r\n                        setCurrentAction(getGlobalState().currentAction = \"dead\");\r\n                        setPaused(getGlobalState().paused = true);\r\n                    }\r\n                    break;\r\n                case \"hit\":\r\n                case \"miss\":\r\n                    (action.effects || []).forEach(effect => {\r\n                        const targetCharacter = getCharacter(effect.target);\r\n                        switch (effect.event) {\r\n                            case \"damage\":\r\n                                targetCharacter.currentHp = targetCharacter.currentHp.minus(effect.value);\r\n                                if (targetCharacter.currentHp.lt(Decimal(0))) {\r\n                                    targetCharacter.currentHp = Decimal(0);\r\n                                }\r\n                                break;\r\n                            case \"add_statuses\":\r\n                                const characterStatuses = getCharacter(effect.target).statuses;\r\n                                characterStatuses[effect.status] = effect.level;\r\n                                break;\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"add_statuses\":\r\n                    const characterStatuses = getCharacter(action.target).statuses;\r\n                    characterStatuses[action.status] = action.level;\r\n                    break;\r\n                case \"status-removed\": {\r\n                    const characterStatuses = getCharacter(action.actor).statuses;\r\n                    delete characterStatuses[action.status];\r\n                }\r\n                case \"action_skipped\":\r\n                    break;\r\n                default:\r\n                    throw new Error();\r\n            }\r\n            // Consume action\r\n            getGlobalState().currentEncounter.pendingActions.shift()\r\n            saveGlobalState();\r\n            const nextAction = getGlobalState().currentEncounter.pendingActions[0];\r\n            if(nextAction) {\r\n                applyAction(nextAction, action.tick);\r\n            }\r\n        }\r\n\r\n        function tick(timestamp) {\r\n            if (!lastTime) {\r\n                lastTime = timestamp;\r\n            } else if (!getGlobalState().paused) {\r\n                if(getCharacter(0).isAlive) {\r\n                    if (accruedTime.current >= _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration)) {\r\n                        const player = getCharacter(0);\r\n                        saveGlobalState();\r\n                        accruedTime.current = 0;\r\n                        switch (getGlobalState().currentAction) {\r\n                            case \"exploring\":\r\n                                if(getCharacter(0).isAlive) {\r\n                                    setCurrentEncounter(getGlobalState().currentEncounter = null);\r\n                                    setEnemy(null);\r\n                                }\r\n                                getCharacter(0).clearStatuses();\r\n                                let proceedingToEncounter = false;\r\n                                if (getCharacter(0).currentHp.lt(getCharacter(0).maximumHp)) {\r\n                                    const encounterChance = evaluateExpression(config.mechanics.combat.randomEncounterChance, {\r\n                                        player\r\n                                    });\r\n                                    const amountToHeal = encounterChance.lte(0) || getCharacter(0).currentHp.plus(getCharacter(0).healing).gt(\r\n                                        getCharacter(0).maximumHp\r\n                                    ) ? getCharacter(0).maximumHp.minus(getCharacter(0).currentHp) : getCharacter(0).healing;\r\n                                    getCharacter(0).currentHp = getCharacter(0).currentHp.plus(amountToHeal);\r\n                                    pushLogItem({\r\n                                        message: `You naturally healed ${amountToHeal} health`,\r\n                                        uuid: v4()\r\n                                    })\r\n                                    const encounterRoll = Math.floor(props.rng.double() * 100) + 1;\r\n                                    debugMessage(`Determining if encounter occurs. Chance ${encounterChance} vs roll ${encounterRoll}.`);\r\n                                    if (encounterChance.gte(encounterRoll)) {\r\n                                        proceedingToEncounter = true;\r\n                                    } else {\r\n                                        if(encounterChance.eq(0)) {\r\n                                            pushLogItem({\r\n                                                message: \"Your weak spiritual energy keeps you hidden while you heal.\",\r\n                                                uuid: v4()\r\n                                            });\r\n                                        } else {\r\n                                            pushLogItem({\r\n                                                message: \"You don't find any trouble while you recover.\",\r\n                                                uuid: v4()\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    proceedingToEncounter = true;\r\n                                }\r\n                                if (proceedingToEncounter) {\r\n                                    getGlobalState().currentEncounter = Regions[getGlobalState().currentRegion].startEncounter(getCharacter(0), props.rng);\r\n                                    setCurrentEncounter(getGlobalState().currentEncounter);\r\n                                    setEnemy(getGlobalState().currentEncounter.enemies[0]);\r\n                                    setCurrentAction(Actions[changeCurrentAction(\"approaching\")]);\r\n                                    getGlobalState().nextAction = getGlobalState().currentEncounter.enemies.reduce((actionSoFar, nextEnemy) => {\r\n                                        if (actionSoFar !== \"fighting\") {\r\n                                            return actionSoFar;\r\n                                        }\r\n\r\n                                        if (player.otherDemonIsLesserDemon(nextEnemy)) {\r\n                                            return \"intimidating\";\r\n                                        } else if (player.otherDemonIsGreaterDemon(nextEnemy)) {\r\n                                            return \"fleeing\";\r\n                                        } else {\r\n                                            return \"fighting\";\r\n                                        }\r\n                                    }, \"fighting\");\r\n                                    setNextAction(getGlobalState().nextAction);\r\n                                    if (getGlobalState().passivePowerIncome.gt(0)) {\r\n                                        const gainedPower = getCharacter(0).gainPower(getGlobalState().passivePowerIncome);\r\n                                        pushLogItem({\r\n                                            message: `Your Bound lesser demons grant you ${gainedPower.toFixed()} power.`,\r\n                                            uuid: v4()\r\n                                        });\r\n                                        getGlobalState().highestLevelReached = Decimal.max(getGlobalState().highestLevelReached, getCharacter(0).powerLevel);\r\n                                    }\r\n\r\n                                    const enemies = getGlobalState().currentEncounter.enemies;\r\n                                    if (player.otherDemonIsGreaterDemon(enemies[0])) {\r\n                                        pushLogItem({\r\n                                            message: `<strong>💀Approaching Greater ${enemies[0].name}.💀</strong>`,\r\n                                            uuid: v4()\r\n                                        });\r\n                                    } else if (player.otherDemonIsLesserDemon(enemies[0])) {\r\n                                        pushLogItem({\r\n                                            message: `<strong>Approaching Lesser ${enemies[0].name}.</strong>`,\r\n                                            uuid: v4()\r\n                                        });\r\n                                    } else {\r\n                                        pushLogItem({\r\n                                            message: `<strong>Approaching ${enemies[0].name}.</strong>`,\r\n                                            uuid: v4()\r\n                                        });\r\n                                    }\r\n                                    saveGlobalState();\r\n                                }\r\n                                break;\r\n                            case \"approaching\": {\r\n                                // Since we're starting a new combat, remove any old, dead characters\r\n                                switch (getGlobalState().nextAction) {\r\n                                    case \"fighting\":\r\n                                        const enemies = getGlobalState().currentEncounter.enemies;\r\n                                        const combatResult = resolveCombat(props.rng, {\r\n                                            parties: [[player], enemies]\r\n                                        });\r\n                                        getGlobalState().currentEncounter.pendingActions = combatResult.rounds;\r\n                                        setEnemy(enemies[0]);\r\n                                        break;\r\n                                }\r\n                                setCurrentAction(Actions[changeCurrentAction(getGlobalState().nextAction)]);\r\n                                setNextAction();\r\n                                const deadCharacters = Object.keys(getGlobalState().characters)\r\n                                    .filter(id => id !== '0' && !getGlobalState().currentEncounter.enemies.find(c => c.id == id));\r\n                                deadCharacters.forEach(id => {\r\n                                    delete getGlobalState().characters[id]\r\n                                });\r\n                                break;\r\n                            }\r\n                            case \"intimidating\": {\r\n                                const enemy = getGlobalState().currentEncounter.enemies[0];\r\n                                const chanceToIntimidate = evaluateExpression(config.encounters.chanceToIntimidateLesser, {\r\n                                    enemy,\r\n                                    player: getCharacter(0)\r\n                                });\r\n                                const roll = Math.floor(props.rng.double() * 100) + 1;\r\n                                if (chanceToIntimidate.gte(roll)) {\r\n                                    const periodicPowerIncreases = evaluateExpression(config.mechanics.xp.gainedFromLesserDemon, {\r\n                                        enemy\r\n                                    });\r\n                                    pushLogItem(generateLogItem({\r\n                                        result: \"intimidated\",\r\n                                        target: enemy.id,\r\n                                        value: periodicPowerIncreases\r\n                                    }));\r\n                                    getGlobalState().passivePowerIncome = getGlobalState().passivePowerIncome.plus(periodicPowerIncreases);\r\n                                } else {\r\n                                    pushLogItem(generateLogItem({\r\n                                        message: `${getCharacter(enemy.id).name} escaped! (You rolled ${roll} vs ${chanceToIntimidate} chance to Bind).`\r\n                                    }));\r\n                                    setCurrentEncounter(getGlobalState().currentEncounter = null);\r\n                                }\r\n                                setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                break;\r\n                            }\r\n                            case \"fleeing\":\r\n                                const enemy = getGlobalState().currentEncounter.enemies[0];\r\n                                const chanceToFlee = evaluateExpression(config.encounters.chanceToEscapeGreater, {\r\n                                    enemy,\r\n                                    player: getCharacter(0)\r\n                                });\r\n                                const roll = Math.floor(props.rng.double() * 100) + 1;\r\n                                if (chanceToFlee.gte(roll)) {\r\n                                    pushLogItem({\r\n                                        result: \"escaped\",\r\n                                        uuid: v4()\r\n                                    });\r\n                                    const powerToGain = evaluateExpression(config.mechanics.xp.gainedFromGreaterDemon, {\r\n                                        $enemy: enemy\r\n                                    });\r\n                                    const powerGained = player.gainPower(powerToGain);\r\n                                    getGlobalState().highestLevelReached = Decimal.max(getGlobalState().highestLevelReached, getCharacter(0).powerLevel);\r\n                                    pushLogItem(generateLogItem({\r\n                                        result: \"gainedPower\",\r\n                                        value: powerGained,\r\n                                    }));\r\n                                    getGlobalState().currentEncounter = null;\r\n                                    setCurrentEncounter(null);\r\n                                    setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                } else {\r\n                                    pushLogItem({\r\n                                        message: `The ${enemy.name} caught you! (Roll ${roll} vs ${chanceToFlee})`,\r\n                                        uuid: v4()\r\n                                    });\r\n                                    const enemies = getGlobalState().currentEncounter.enemies;\r\n                                    const combatResult = resolveCombat(props.rng, {\r\n                                        parties: [[player], enemies]\r\n                                    });\r\n                                    getGlobalState().currentEncounter.pendingActions = combatResult.rounds;\r\n                                    setEnemy(enemies[0]);\r\n                                    setNextAction(Actions[changeCurrentAction(\"fighting\")]);\r\n                                    setCurrentAction(Actions[changeCurrentAction(\"fighting\")]);\r\n                                }\r\n\r\n                                break;\r\n                            case \"fighting\" : {\r\n                                if (getGlobalState().currentEncounter.pendingActions.length) {\r\n                                    const nextAction = getGlobalState().currentEncounter.pendingActions[0];\r\n                                    applyAction(nextAction);\r\n                                    setActionLog([...getGlobalState().actionLog]);\r\n                                } else {\r\n                                    setCurrentAction(Actions[changeCurrentAction(\"fleeing\")]);\r\n                                }\r\n                                break;\r\n                            }\r\n                            case \"looting\":\r\n                                const lootRoll = Math.floor(props.rng.double() * 666);\r\n                                if (lootRoll <= getGlobalState().currentEncounter.encounterLevel) {\r\n\r\n                                }\r\n                                setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                break;\r\n                            case \"reincarnating\":\r\n                                setCurrentEncounter();\r\n                                setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                setActionLog([]);\r\n                                getGlobalState().actionLog = [];\r\n                                break;\r\n                            case \"dead\":\r\n                                setPaused(getGlobalState().paused = true);\r\n                                break;\r\n                            default:\r\n                                if (config.debug) {\r\n                                    throw new Error(`Action ${getGlobalState().currentAction} not supported.`);\r\n                                } else {\r\n                                    setCurrentEncounter();\r\n                                    setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                    setActionLog([]);\r\n                                }\r\n                        }\r\n                    }\r\n\r\n                    setDisplayedTime(accruedTime.current);\r\n                    const passedTime = timestamp - lastTime;\r\n                    const adjustedTime = passedTime * (manualSpeedUpActive.current ? getManualSpeedMultiplier() : 1);\r\n                    if(Math.min(accruedTime.current + adjustedTime, _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration)) === 0) {\r\n                        if(accruedTime.current + adjustedTime === 0) {\r\n                            debugMessage(`Timestamp ${timestamp}, last time ${lastTime}`);\r\n                        } else {\r\n                            debugMessage(\"Action duration was 0\");\r\n                        }\r\n\r\n                    }\r\n                    accruedTime.current = Math.min(accruedTime.current + adjustedTime, _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration));\r\n                }\r\n            }\r\n            if(lastTime === timestamp) {\r\n                debugMessage(\"New and previous timestamp were identical\");\r\n            }\r\n            lastTime = timestamp;\r\n            lastFrame = requestAnimationFrame(tick);\r\n            setActionLog([...getGlobalState().actionLog]);\r\n        }\r\n\r\n        console.log(\"Adventuring Page\");\r\n        lastFrame = requestAnimationFrame(tick)\r\n        return ()=> {\r\n            console.log(\"Cancel frame\");\r\n            cancelAnimationFrame(lastFrame);\r\n        }\r\n    }, []);\r\n    return <div className=\"App\" style={styles.root}\r\n                onMouseOver={() => manualSpeedUpActive.current = true}\r\n                onMouseLeave={() => manualSpeedUpActive.current = false}\r\n    >\r\n        <div id=\"background\" style={{\r\n            position: \"absolute\",\r\n            zIndex: \"-10\",\r\n            overflow: \"hidden\",\r\n            height: \"100vh\",\r\n            width: \"100vw\"\r\n        }}>\r\n            <img style={styles.background} src={\"./backgrounds/parallax-demon-woods-bg.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-far-trees.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-mid-trees.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-close-trees.png\"}/>\r\n        </div>\r\n        <PlayerStats player={player} enemy={enemy}/>\r\n        <div style={{display: \"flex\", flex: \"1 0 auto\", flexDirection: \"column\"}}>\r\n            <TopSection character={player}/>\r\n            <BottomSection state={getGlobalState()} actionLog={actionLog}\r\n                           player={player}\r\n                           enemy={enemy}\r\n                           togglePause={togglePause}\r\n                           paused={paused}\r\n                           nextActionName={nextAction}\r\n                           currentAction={currentAction}\r\n                           setNextAction={(newAction) => {\r\n                               setNextAction(getGlobalState().nextAction = newAction);\r\n                           }}\r\n                           actionTime={displayedTime}\r\n                           startManualSpeedup={props.startManualSpeedup}\r\n                           stopManualSpeedup={props.stopManualSpeedup}\r\n                           togglePause={p => setPaused(p)}\r\n            />\r\n        </div>\r\n        <EnemySidebar player={player} enemy={enemy}/>\r\n\r\n    </div>\r\n}\r\n\r\nfunction wrapLogItem(item) {\r\n    return {\r\n        uuid: v4(),\r\n        ...item\r\n    }\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useState} from \"react\";\r\nimport { Decimal } from \"decimal.js\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {Creatures} from \"../data/creatures\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddCircleOutlineRoundedIcon from '@material-ui/icons/AddCircleOutlineRounded';\r\nimport RemoveCircleOutlineRoundedIcon from '@material-ui/icons/RemoveCircleOutlineRounded';\r\nimport {getCharacter, getGlobalState, resetDebug, saveKey} from \"../engine\";\r\nimport * as _ from \"lodash\";\r\nimport {Regions} from \"../data/Regions\";\r\nimport {config} from \"../config\";\r\n\r\nconst styles = {\r\n    root: {\r\n        position: \"absolute\",\r\n        minHeight: \"100vh\",\r\n        bottom: 0,\r\n        left: 0,\r\n        padding: \"20px\"\r\n    }\r\n}\r\n\r\nexport default function DebugUi(props) {\r\n    const [creatures, setCreatures] = useState(_.get(getGlobalState(), [\"debug\", \"creatures\"]));\r\n    const [regions, setRegions] = useState(_.get(getGlobalState(), [\"debug\", \"regions\"]));\r\n    const [minLevel, setMinLevel] = useState(_.get(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale).lt(Decimal(1)) ?\r\n        Decimal(1) : getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale)));\r\n    const [maxLevel, setMaxLevel] = useState(_.get(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale).gt(100) ?\r\n        Decimal(100) : getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale * 2)));\r\n    const [manualSpeedMultiplier, setManualSpeedMultiplier] = useState(_.get(getGlobalState(), [\"debug\", \"manualSpeedMultiplier\"],\r\n        getGlobalState().manualSpeedMultiplier));\r\n    const [playerAbsorbedPower, setPlayerAbsorbedPower] = useState(getCharacter(0).absorbedPower);\r\n\r\n    function reset() {\r\n        resetDebug();\r\n        setCreatures(_.get(getGlobalState(), [\"debug\", \"creatures\"]));\r\n        setRegions(_.get(getGlobalState(), [\"debug\", \"regions\"]));\r\n        setMinLevel(getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale).lt(Decimal(1)) ?\r\n            Decimal(1) : getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale));\r\n        setMaxLevel(getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale).gt(100) ?\r\n            Decimal(100) : getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale * 2));\r\n    }\r\n\r\n    function clearSave() {\r\n        window.localStorage.removeItem(saveKey);\r\n        alert(\"local storage cleared\");\r\n    }\r\n\r\n    return <Paper style={styles.root} disabled={true}>\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <h3>Debug Menu</h3>\r\n            </Grid>\r\n            <Grid item container xs={12}>\r\n                <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={reset}>\r\n                        Reset Debug Settings\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={clearSave}>\r\n                        Clear Save\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid item xs={3}>\r\n                    <TextField type=\"number\" value={manualSpeedMultiplier} onChange={e => {\r\n                        const newValue = Number.parseInt(e.target.value);\r\n                        _.set(getGlobalState(), [\"debug\", \"manualSpeedMultiplier\"], newValue);\r\n                        setManualSpeedMultiplier(newValue);\r\n                    }} label=\"Manual speed multiplier\"/>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TextField type=\"number\" min=\"0\" value={playerAbsorbedPower} onChange={e => {\r\n                        e.target.value = e.target.value === \"\" ? 0 : e.target.value;\r\n                        const newValue = Decimal(Number.parseInt(e.target.value));\r\n                        if(newValue.lt(0)) {\r\n                            getCharacter(0).absorbedPower = Decimal(0);\r\n                            setPlayerAbsorbedPower(Decimal(0));\r\n                        } else {\r\n                            getCharacter(0).absorbedPower = newValue;\r\n                            setPlayerAbsorbedPower(newValue);\r\n                        }\r\n\r\n                    }} label=\"Current player absorbed power\"/>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <h3>Creatures</h3>\r\n            </Grid>\r\n            <Grid container item xs={12}>\r\n                {Object.keys(Creatures).map(id => {\r\n                    const enabled = creatures[id] !== false && _.get(creatures, [id, \"enabled\"]) !== false;\r\n                    return <Grid item xs={3} style={{height: \"100%\"}}>\r\n                        <Button variant=\"contained\" color={enabled ? \"default\" : \"secondary\"}\r\n                                style={{width: \"100%\", height: \"100%\"}}\r\n                                onClick={() => {\r\n                                    _.set(getGlobalState(), [\"debug\", \"creatures\", id, \"enabled\"], !enabled);\r\n                                    setCreatures({...creatures, [id]: {enabled: !enabled}})\r\n                                }}\r\n                        >\r\n                            <img src={`./monsters/${Creatures[id].texture}`}/>\r\n                            {Creatures[id].name}\r\n                        </Button>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid item style={{textAlign: \"center\"}}>\r\n                <h4>Regions</h4>\r\n            </Grid>\r\n            <Grid container item xs={12}>\r\n                {Object.keys(Regions).map(regionId => {\r\n                    return <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                        <h4>{Regions[regionId].name}</h4>\r\n                        <Grid item container xs={12}>\r\n                            {Object.keys(Regions[regionId].encounters).map(encounterId => {\r\n                                const enabled = _.get(regions, [regionId, \"encounters\", encounterId, \"enabled\"]) !== false;\r\n                                return <Grid item xs={3}>\r\n                                    <Button variant=\"contained\" color={enabled ? \"default\" : \"secondary\"}\r\n                                            style={{width: \"100%\", height: \"100%\"}}\r\n                                            onClick={() => {\r\n                                                _.set(getGlobalState(), [\"debug\", \"regions\", regionId, \"encounters\", encounterId, \"enabled\"], !enabled);\r\n                                                setRegions({\r\n                                                    ...regions, [regionId]: _.set(regions[regionId],\r\n                                                        [\"encounters\", encounterId, \"enabled\"],\r\n                                                        !enabled\r\n                                                    )\r\n                                                })\r\n                                            }}\r\n                                    >\r\n                                        {Regions[regionId].encounters[encounterId].description}\r\n                                    </Button>\r\n                                </Grid>;\r\n                            })}\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                    <h4>Encounter rules</h4>\r\n                </Grid>\r\n                <Grid container item xs={3}>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            setMinLevel(minLevel.plus(1));\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], minLevel.plus(1));\r\n                            if (minLevel.plus(1).gt(maxLevel)) {\r\n                                setMaxLevel(minLevel.plus(1));\r\n                                _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], minLevel.plus(1));\r\n                            }\r\n                        }}>\r\n                            <AddCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        Minimum level {minLevel.toFixed()}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], minLevel.minus(1));\r\n                            setMinLevel(minLevel.minus(1));\r\n                        }}>\r\n                            <RemoveCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container item xs={3}>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            setMaxLevel(maxLevel.plus(1));\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], maxLevel.plus(1));\r\n                        }}>\r\n                            <AddCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        Maximum level {maxLevel.toFixed()}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], maxLevel.minus(1));\r\n                            setMaxLevel(maxLevel.minus(1));\r\n                            if (maxLevel.minus(1).lt(minLevel)) {\r\n                                setMinLevel(maxLevel.minus(1));\r\n                                _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], maxLevel.minus(1));\r\n                            }\r\n                        }}>\r\n                            <RemoveCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useEffect} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {getGlobalState} from \"../../engine\";\r\n\r\nconst pkg = require(\"../../../package.json\");\r\nconst changelog = require(\"../../changelog.json\");\r\n\r\nexport default function SplashPage(props) {\r\n    useEffect(() => {\r\n        getGlobalState().paused = true;\r\n    })\r\n    const history = useHistory();\r\n    return <Paper>\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                Conquest of Hell Ver. {pkg.version} Save Compatibility NOT Guaranteed\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <Button onClick={() => {\r\n                    if (getGlobalState().currentAction === null) {\r\n                        history.push(\"/reincarnating\")\r\n                    } else {\r\n                        getGlobalState().paused = false;\r\n                        history.push(\"/adventuring\")\r\n                    }\r\n                }} variant=\"contained\" color=\"primary\">\r\n                    Start\r\n                </Button>\r\n            </Grid>\r\n            <Grid item container>\r\n                <Grid item container xs={12}>\r\n                    <Grid item xs={12}>\r\n                        {pkg.version}\r\n                    </Grid>\r\n                    <ul>\r\n                        {changelog[pkg.version].changes.map(entry => {\r\n                            return <li key={entry}>\r\n                                {entry}\r\n                            </li>\r\n                        })}\r\n                    </ul>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>\r\n}","import './App.css';\nimport {v4} from \"node-uuid\";\nimport * as _ from \"lodash\";\nimport React, {useEffect, useRef, useState} from \"react\";\nimport 'react-circular-progressbar/dist/styles.css';\nimport {Regions} from \"./data/Regions\";\nimport {Actions} from \"./data/Actions\";\nimport {Decimal} from \"decimal.js\";\nimport {\n    evaluateExpression,\n    getCharacter,\n    getGlobalState, getManualSpeedMultiplier,\n    loadGlobalState, reincarnateAs,\n    saveGlobalState, unpause\n} from \"./engine\";\nimport * as seedrandom from \"seedrandom\";\nimport {config} from \"./config\";\nimport {MemoryRouter, Route, Switch} from \"react-router-dom\";\nimport ReincarnationSelectionPage from \"./components/scene/ReincarnationSelectionPage\";\nimport AdventuringPage from \"./components/scene/AdventuringPage\";\nimport DebugUi from \"./components/DebugUi\";\nimport {useHotkeys} from \"react-hotkeys-hook\";\nimport {debugMessage} from \"./debugging\";\nimport SplashPage from \"./components/scene/SplashPage\";\nimport {resolveCombat} from \"./engine/combat\";\n\nloadGlobalState();\n\nconst rng = seedrandom();\n\nfunction App() {\n    const [debugUiEnabled, setDebugUiEnabled] = useState(false);\n\n    useHotkeys(\"`\", () => {\n        setDebugUiEnabled(enabled => {\n            if (config.debug) {\n                if (!enabled) {\n                    getGlobalState().paused = true;\n                }\n                saveGlobalState();\n                return !enabled\n            } else {\n                return false;\n            }\n        });\n    });\n\n    return (\n        <MemoryRouter initialEntries={[\n            getGlobalState().currentAction === \"reincarnating\" ? \"/reincarnating\" : (\n                getGlobalState().currentAction === \"adventuring\" ? \"/adventuring\" : \"/\")\n        ]} basename=\"%PUBLIC_URL%\">\n            <Switch>\n                <Route path=\"/\" exact>\n                    <SplashPage/>\n                </Route>\n                <Route path=\"/reincarnating\" exact>\n                    <ReincarnationSelectionPage reincarnate={(monster, attributes) => {\n                        reincarnateAs(monster, attributes);\n                        unpause();\n                    }}/>\n                </Route>\n                <Route path=\"/adventuring\" exact>\n                    <AdventuringPage\n                                     rng={rng}\n                    />\n                </Route>\n            </Switch>\n            {debugUiEnabled && <DebugUi/>}\n        </MemoryRouter>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}