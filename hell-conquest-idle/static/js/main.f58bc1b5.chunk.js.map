{"version":3,"sources":["data/creatures.js","config.js","debugging.js","data/Tactics.js","data/Statuses.js","data/Traits.js","character.js","engine/index.js","data/Regions.js","data/Actions.js","data/Attributes.js","components/charactersheet/TacticsDescription.js","components/scene/ReincarnationSelectionPage.js","components/charactersheet/CharacterAttributes.js","components/charactersheet/CharacterTraits.js","components/charactersheet/TacticsSection.js","engine/combat/getHitChanceBy.js","engine/combat/calculateDamageBy.js","components/CharacterSheet.js","components/PlayerStats.js","components/TopSection.js","components/CharacterCombatSummary.js","components/BottomSection.js","components/EnemySidebar.js","engine/CharacterCombatState.js","engine/combat/index.js","combatResult.js","generateLogItem.js","components/scene/AdventuringPage.js","components/DebugUi.js","components/scene/SplashPage.js","App.js","reportWebVitals.js","index.js"],"names":["Creatures","bloodthirstyKnight","name","traits","enabled","appearance","texture","description","rapaciousHighwayman","condemnedSlasher","crushingSnake","skitteringHorror","deadlyHornet","tormentedDead","wheezingApparition","assertCreatureExists","id","Error","console","log","process","REACT_APP_DEBUG_MODE","config","manualSpeedup","multiplier","actionLog","maxSize","REACT_APP_MAX_ACTIONLOG_SIZE","encounters","lesserEncounterChanceWeight","greaterEncounterChanceWeight","evenEncounterChanceWeight","lesserLevelScale","greaterLevelScale","chanceToIntimidateLesser","chanceToEscapeGreater","mechanics","artifacts","REACT_APP_FEATURE_ARTIFACTS_ENABLED","reincarnation","bonusPointsForHighestLevel","latentPowerGainOnReincarnate","latentPowerEffectScale","traitPointCost","xp","gainedFromGreaterDemon","gainedFromLesserDemon","gainedFromOtherDemon","levelToPowerEquation","powerToLevelEquation","maxLevel","combat","randomEncounterChance","determineHit","precision","baseAttribute","effectPerPoint","resilience","evasion","power","traitRank","fatigue","evasionPenaltyPerPoint","hp","base","pointsPerLevel","healingPerLevel","baseHitChance","baseDamage","attributeDamageModifier","defaultMinimumDamageMultiplier","defaultMedianDamageMultiplier","defaultMaximumDamageMultiplier","baseMinimumDamageWeight","baseMedianDamageWeight","baseMaximumDamageWeight","debug","debugMessage","apply","arguments","Tactics","aggressive","title","modifiers","power_modifier","precision_modifier","defensive","resilience_modifier","healing_modifier","deceptive","evasion_modifier","critical_hit_damage_modifier","Statuses","berserk","icon","effects","power_multiplier","evasion_multiplier","terrified","skip_turn","decays","restrained","accuracy_modifier","Traits","bloodrage","_","on_round_end","conditions","health_percentage","target","below","add_statuses","rank","cupidity","on_intimidate","chance","steal_item_chance","exhaustingTouch","inescapableGrasp","on_hitting","critical_hit","duration","rounds","sadisticJoy","on_kill","power_gain_modifier","piercingStrike","continuous","modifier","sharedPain","on_taking_damage","damage","terrifyingSkitter","on_combat_start","Character","props","this","_isPc","isPc","_name","_absorbedPower","Decimal","absorbedPower","_latentPower","latentPower","_attributes","Attributes","attributes","_currentHp","maximumHp","_combat","CombatStats","_traits","Object","keys","reduce","transformed","next","_appearance","_modifiers","_tactics","tactics","_statuses","statuses","forEach","status","newAppearance","newTraits","other","greaterDemonScale","evaluateExpression","player","enemy","powerLevel","gte","plus","lesserDemonScale","lte","minus","powerGained","latentPowerMultiplier","times","floor","push","newTactics","getLevelForPower","newHealth","lt","currentHp","gt","newLatentPower","attributeMultiplier","madness","mul","baseHealing","tacticsMultiplier","value","getPowerNeededForLevel","trait","div","ceil","getGlobalState","unlockedTraits","character","_brutality","brutality","_cunning","cunning","_deceit","deceit","_madness","defineProperty","calculateDamage","attributeBase","tacticsModifier","statusesModifier","currentValue","nextStatus","statusDefinition","traitModifier","previousValue","traitDefinition","precison_modifier","precision_multiplier","resilience_multiplier","hitTypeDamageMultiplier","saveKey","require","Package","expressionCache","globalState","loadGlobalState","saveGlobalState","window","localStorage","setItem","JSON","stringify","state","loaded","getItem","parse","stateReviver","creatures","regions","reincarnationCount","passivePowerIncome","unlockedMonsters","paused","currentAction","nextAction","highestLevelReached","startingTraits","currentEncounter","manualSpeedMultiplier","currentRegion","exploration","explorationTime","approachTime","combatTime","lootingTime","recoveryTime","fleeingTime","intimidateTime","reincarnationTime","characters","0","items","minimumDamageMultiplier","medianDamageMultiplier","maximumDamageMultiplier","tutorials","getCharacter","assertCharacterExists","nextMonsterId","getSpriteForCreature","expression","context","undefined","Function","call","level","$level","powerPoints","$powerPoints","key","map","parsed","Number","parseFloat","isNaN","Region","available","background","rng","encounterType","combinedEncounterChances","encounterTypeRoll","Math","double","lesserChance","evenChance","encounterLevel","encounterOffset","max","difference","min","encounterDef","region","possibleEncounters","filter","encounterId","encounterEnabled","debugNotDisabled","randomKey","random","length","chooseRandomEncounter","pendingActions","enemies","flatMap","enemyDef","count","i","nextId","generateCreature","Regions","forest","type","far","mid","close","caves","mountains","desert","Actions","exploring","approaching","dead","looting","fleeing","fighting","reincarnating","recovering","intimidating","label","Grid","container","tactic","Tooltip","style","color","textAlign","ReincarnationSelectionPage","history","useHistory","useState","substring","setAttributes","setPlayerTactics","setStartingTraits","availableBonusPoints","values","sum","x","traitsOwned","nextBonusTraitCost","useEffect","item","xs","toFixed","attribute","src","Button","disabled","onClick","traitId","justify","height","variant","dangerouslySetInnerHTML","__html","visibility","direction","TacticsDescription","alignItems","creatureEnabled","debugEnabled","width","reincarnate","CharacterAttributes","Fragment","fontSize","CharacterTraits","TacticsSection","getHitChanceBy","attackingCharacter","against","targetCharacter","attackerPrecision","targetEvasion","med","calculateDamageBy","attacker","powerMultiplier","resilienceMultiplier","damageModifier","minimumDamage","medianDamage","maximumDamage","CharacterSheet","spriteSrc","useMemo","hitChances","calculatedDamage","combinedHitWeights","total","powerRequiredForCurrentLevel","powerNeededForNextLevel","progressToNextLevel","toNumber","Help","styles","root","backgroundColor","PlayerStats","Paper","elevation","display","flex","buttons","TopSection","reincarnateEnabled","isAlive","CharacterCombatSummary","low","high","optimum","justifyContent","flexDirection","actions","alignSelf","action","maxHeight","actionProgress","overflowY","BottomSection","escapeChance","intimidateChance","onMouseEnter","startManualSpeedup","onMouseLeave","stopManualSpeedup","togglePause","actionButton","details","actionTime","message","tick","uuid","printActionItem","text","setNextAction","nextActionName","EnemySidebar","CharacterCombatState","originalCharacter","party","_speed","speed","lastActed","newSpeed","baseSpeed","speedMultiplier","percent","baseAccuracy","statusesMultiplier","canAct","resolveCombat","definition","combatResult","winner","combatantCombatStats","parties","partyIndex","combatant","triggerEvent","round","initiatives","initiativeCount","actingCharacter","beginningOfRoundEffects","effect","enemyParty","livingEnemies","attackRollResult","combatState","roll","accuracy","rawRoll","makeAttackRoll","hitType","hitTypeChances","damageCategories","damageRoll","attackResult","attackMultiplier","defenseDivisor","attack","damageMultiplier","finalDamage","event","source","join","attackingCharacterId","targetCharacterId","damageDone","otherEffects","v4","result","actor","generateHitCombatResult","resolveHit","generateMissCombatResult","resolveMiss","actingCharacterId","generateSkipActionResult","resolveSkippedAction","combatantId","parseInt","roundDuration","endOfRoundEffects","playerPartyDead","every","enemyPartyDead","selectTargets","sourceCharacter","combatants","targetType","eventType","recordedEffects","roundEvents","includes","rankModifier","condition","targetPercent","targetCurrentHealth","targetMaxHealth","currentHealthPercent","thisConditionMet","chanceToTrigger","$rank","traitEffect","percentDamageModifier","newMultiplier","damageToInflict","attackDamage","defenseModifier","statusesDefinition","statusType","effectTarget","targets","statusLevel","applyTrait","generateLogItem","original","describeEffect","lastTime","overflow","image","position","left","changeCurrentAction","newAction","pushLogItem","pop","unshift","AdventuringPage","accruedTime","useRef","setEnemy","setActionLog","setCurrentEncounter","setCurrentAction","setPaused","displayedTime","setDisplayedTime","manualSpeedUpActive","useHotkeys","lastFrame","applyAction","lastTick","powerToGain","traitMultiplier","gainPower","addModifier","magnitude","shift","requestAnimationFrame","timestamp","current","clearStatuses","proceedingToEncounter","encounterChance","amountToHeal","healing","encounterRoll","eq","startEncounter","actionSoFar","nextEnemy","otherDemonIsLesserDemon","otherDemonIsGreaterDemon","gainedPower","find","c","chanceToIntimidate","periodicPowerIncreases","chanceToFlee","$enemy","adjustedTime","debugMultiplier","baseMultiplier","getManualSpeedMultiplier","cancelAnimationFrame","className","onMouseOver","zIndex","p","minHeight","bottom","padding","DebugUi","setCreatures","setRegions","minLevel","setMinLevel","setMaxLevel","setManualSpeedMultiplier","playerAbsorbedPower","setPlayerAbsorbedPower","removeItem","alert","TextField","onChange","e","newValue","regionId","pkg","changelog","SplashPage","version","changes","entry","seedrandom","App","debugUiEnabled","setDebugUiEnabled","initialEntries","basename","path","exact","monster","monsterId","newAttributes","currentDemon","options","m","latentPowerGain","reincarnateAs","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f58bc1b5.chunk.js","sourcesContent":["export const Creatures  = {\r\n    bloodthirstyKnight: {\r\n        name: \"Bloodthirsty Knight\",\r\n        traits: [\"bloodrage\"],\r\n        enabled: true,\r\n        appearance: \"bloodthirstyKnight\",\r\n        texture: \"01_warrior.png\",\r\n        description: \"A ruthless warrior who delighted in slaughtering whoever they encounter on the battlefield.\",\r\n    },\r\n    rapaciousHighwayman: {\r\n        name: \"Rapacious Highwayman\",\r\n        traits: [\"cupidity\"],\r\n        enabled: false,\r\n        appearance: \"rapaciousHighwayman\",\r\n        texture: \"02_hunter.png\",\r\n        description: \"A thief who stole from whomever he could get away with, from wealthy merchants to starving vagrants.\",\r\n    },\r\n    condemnedSlasher: {\r\n        name: \"Condemned Slasher\",\r\n        traits: [\"sadisticJoy\"],\r\n        enabled: true,\r\n        appearance: \"condemnedSlasher\",\r\n        texture: \"03_rogue.png\",\r\n        description: \"A madman who gained exquisite pleasure from seeing how many cuts could be made in a victim's body before they died.\",\r\n    },\r\n    crushingSnake: {\r\n        name: \"Crushing Snake\",\r\n        traits: [\"inescapableGrasp\"],\r\n        enabled: true,\r\n        appearance: \"crushingSnake\",\r\n        texture: \"06_snake_01.png\",\r\n        description: \"A monstrous reptile which\",\r\n    },\r\n    skitteringHorror: {\r\n        name: \"Skittering Horror\",\r\n        traits: [\"terrifyingSkitter\"],\r\n        enabled: true,\r\n        appearance: \"skitteringHorror\",\r\n        texture: \"10_spider.png\",\r\n        description: \"A massive spider that enjoys stalking its prey, frightening it by the sickening skittering of it's arachnid legs.\"\r\n    },\r\n    deadlyHornet: {\r\n        name: \"Deadly Hornet\",\r\n        traits: [\"piercingStrike\"],\r\n        enabled: true,\r\n        appearance: \"deadlyHornet\",\r\n        texture: \"12_wasp.png\",\r\n        description: \"An insect whose stinger is able to pierce even metal protection.\"\r\n    },\r\n    tormentedDead: {\r\n        name: \"Tormented Dead\",\r\n        traits: [\"sharedPain\"],\r\n        enabled: true,\r\n        appearance: \"tormentedDead\",\r\n        texture: \"29_zombie.png\",\r\n        description: \"A human denied eternal rest and in agony from its ruined flesh.\"\r\n    },\r\n    wheezingApparition: {\r\n        name: \"Wheezing Apparition\",\r\n        traits: [\"exhaustingTouch\"],\r\n        enabled: false,\r\n        appearance: \"wheezingApparition\",\r\n        texture: \"128_sorrowsworn.png\",\r\n        description: \"A soul of someone killed by strangulation, searching endlessly for victims upon which it can inflict the same fate.\"\r\n    }\r\n}\r\n\r\nexport function assertCreatureExists(id) {\r\n    if(!Creatures[id]) {\r\n        throw new Error(`No creature with id ${id} is defined`);\r\n    }\r\n}","import * as _ from \"lodash\";\r\nconsole.log(process.env.REACT_APP_DEBUG_MODE, typeof process.env.REACT_APP_DEBUG_MODE);\r\n\r\nexport const config = {\r\n    manualSpeedup: {\r\n        enabled: false,\r\n        multiplier: 2\r\n    },\r\n\r\n    actionLog: {\r\n        maxSize:  process.env.REACT_APP_MAX_ACTIONLOG_SIZE || 20,\r\n    },\r\n    encounters: {\r\n        lesserEncounterChanceWeight: 10,\r\n        greaterEncounterChanceWeight: 10,\r\n        evenEncounterChanceWeight: 80,\r\n        lesserLevelScale: 1, // A demon is \"lesser\" than another when its level is this much lower.\r\n        greaterLevelScale: 1, // A demon is \"greater\" than another when its level is this much higher.\r\n        chanceToIntimidateLesser: \"player.powerLevel.minus(enemy.powerLevel).pow(2).times(10)\",\r\n        chanceToEscapeGreater: \"player.powerLevel.gt(enemy.powerLevel) ? 100 : Decimal.max(enemy.powerLevel.minus(player.powerLevel), 1).pow(2).times(10)\"\r\n    },\r\n\r\n    mechanics: {\r\n        artifacts: {\r\n            enabled: process.env.REACT_APP_FEATURE_ARTIFACTS_ENABLED || false\r\n        },\r\n        reincarnation: {\r\n            bonusPointsForHighestLevel: 2,\r\n            latentPowerGainOnReincarnate: \"player.powerLevel.pow(2).times(2)\",\r\n            latentPowerEffectScale: .01,\r\n            traitPointCost: \"Decimal.max(1, traitsOwned.times(2))\"\r\n        },\r\n        xp: {\r\n            gainedFromGreaterDemon: \"enemy.powerLevel\",\r\n            gainedFromLesserDemon: \"enemy.powerLevel\",\r\n            gainedFromOtherDemon: \"enemy.powerLevel.times(5)\"\r\n        },\r\n        levelToPowerEquation: \"$level.eq(1) ? Decimal(0) : Decimal($level.minus(1).toNumber()).pow(2).times(5)\",\r\n        powerToLevelEquation: \"Decimal(0).eq($powerPoints) ? Decimal(1) : Decimal.sqrt($powerPoints.div(5)).plus(1).floor()\",\r\n        maxLevel: 100,\r\n        combat: {\r\n            randomEncounterChance: \"player.powerLevel.div(10).floor().times(10)\",\r\n            determineHit: \"roll >= target ? 'hit' : 'miss'\",\r\n            precision: { // Determines how precision rolls work\r\n                baseAttribute: \"deceit\",\r\n                effectPerPoint: .1\r\n            },\r\n            resilience: {\r\n                baseAttribute: \"brutality\",\r\n                effectPerPoint: .1\r\n            },\r\n            evasion: {\r\n                baseAttribute: \"cunning\",\r\n                effectPerPoint: .1\r\n            },\r\n            power: {\r\n                baseAttribute: \"brutality\",\r\n                effectPerPoint: .1\r\n            },\r\n            traitRank: {\r\n                baseAttribute: \"madness\",\r\n                effectPerPoint: .05\r\n            },\r\n            fatigue: {\r\n                evasionPenaltyPerPoint: 2\r\n            },\r\n            hp: {\r\n                base: 25,\r\n                pointsPerLevel: 25,\r\n                healingPerLevel: 5,\r\n                baseAttribute: \"madness\",\r\n                effectPerPoint: .05\r\n            },\r\n            baseHitChance: 90,\r\n            baseDamage: \"player.powerLevel.times(10)\",\r\n            attributeDamageModifier: .02,\r\n            defaultMinimumDamageMultiplier: .5,\r\n            defaultMedianDamageMultiplier: 1,\r\n            defaultMaximumDamageMultiplier: 1.5,\r\n            baseMinimumDamageWeight: 5,\r\n            baseMedianDamageWeight: 90,\r\n            baseMaximumDamageWeight: 5\r\n        }\r\n    },\r\n    debug: process.env.REACT_APP_DEBUG_MODE === \"true\"\r\n}","import {config} from \"./config\";\r\n\r\nexport function debugMessage() {\r\n    if(config.debug) {\r\n        console.debug.apply(null, arguments);\r\n    }\r\n}","export const Tactics = {\r\n    aggressive: {\r\n        title: \"Aggressive\",\r\n        description: \"Your tactics emphasize overwhelming power and violence.\",\r\n        modifiers: {\r\n            power_modifier: .5,\r\n            precision_modifier: .25\r\n        }\r\n    },\r\n    defensive: {\r\n        title: \"Defensive\",\r\n        description: \"Your tactics emphasize caution and husbanding your strength.\",\r\n        modifiers: {\r\n            resilience_modifier: .50,\r\n            healing_modifier: 1\r\n        }\r\n    },\r\n    deceptive: {\r\n        title: \"Deceptive\",\r\n        description: \"Your tactics emphasize disorientation and trickery.\",\r\n        modifiers: {\r\n            evasion_modifier: .5,\r\n            critical_hit_damage_modifier: .5\r\n        }\r\n    }\r\n}","export const Statuses = {\r\n    berserk: {\r\n        name: \"Berserk\",\r\n        icon: \"./icons/icons-516.png\",\r\n        description: \"\",\r\n        effects: {\r\n            power_multiplier: 1.2,\r\n            evasion_multiplier: .9\r\n        }\r\n    },\r\n    terrified: {\r\n        name: \"Terrified\",\r\n        icon: \"\",\r\n        effects: {\r\n            skip_turn: true\r\n        },\r\n        decays: true\r\n    },\r\n    restrained: {\r\n        name: \"Restrained\",\r\n        icon: \"\",\r\n        effects: {\r\n            accuracy_modifier: .9\r\n        },\r\n        decays: true\r\n    }\r\n}","import * as _ from \"lodash\";\r\n// FIXME: Implement validation\r\nexport const Traits = {\r\n    bloodrage: {\r\n        name: \"Blood Rage\",\r\n        icon: \"icons/icons-139.png\",\r\n        description: _.template(\"This demon's unquenchable thirst for blood causes it to gain ${rank} stacks of Berserk when an enemy has 50% or less health.\"),\r\n        on_round_end: {\r\n            conditions : {\r\n                health_percentage: {\r\n                    target: \"any_enemy\",\r\n                    below: 50\r\n                }\r\n            },\r\n            effects: {\r\n                add_statuses: {\r\n                    berserk: {\r\n                        target: \"attacker\",\r\n                        rank: \"rank\"\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    cupidity: {\r\n        name: \"Cupidity\",\r\n        icon: \"icons/icons-2503.png\",\r\n        description: _.template(\"When this demon successfully Intimidates another demon, it gains a <span style='color: red'>${rank}%</span> chance to seize the intimidated demon's Artifacts as though it were killed.\"),\r\n        on_intimidate: {\r\n            conditions: {\r\n                chance: \"$rank\"\r\n            },\r\n            effects: {\r\n                steal_item_chance: {\r\n                    target: \"enemies\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    exhaustingTouch: {\r\n        name: \"Strangulation\",\r\n        icon: \"icons/icons-115.png\",\r\n        description: _.template(\"The demon's touch saps the strength from the victims limbs, reducing both Damage and Defense by <span>${rank.times(5)}%</span> for 1 round.\")\r\n    },\r\n    inescapableGrasp: {\r\n        name: \"Inescapable Grasp\",\r\n        icon: \"icons/icons-2221.png\",\r\n        description: _.template(\"You bind your victims when you strike, causing ${rank} levels of Restrained when you hit with an attack.\"),\r\n        on_hitting: {\r\n            conditions: {\r\n                critical_hit: {\r\n                    chance: 100\r\n                }\r\n            },\r\n            effects: {\r\n                add_statuses: {\r\n                    restrained: {\r\n                        target: \"attacked\",\r\n                        rank: \"rank\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: 2\r\n            }\r\n        }\r\n    },\r\n    sadisticJoy: {\r\n        name: \"Sadistic Joy\",\r\n        icon: \"icons/icons-852.png\",\r\n        description: _.template(\"The demon gains vile pleasure from the pain it inflicts, absorbing an additional ${rank.times(25)}% power from killing other demons.\"),\r\n        on_kill: {\r\n            effects: {\r\n                power_gain_modifier: \"rank.times(.25)\"\r\n            }\r\n        }\r\n    },\r\n    piercingStrike: {\r\n        name: \"Piercing Strike\",\r\n        icon: \"icons/icons-113.png\",\r\n        description: _.template(\"Your fierce attacks can punch right through even armor. Your <span style='color: lightgreen'>Precision</span> is increased by <span style='color: orangered'>${rank.times(25)}%</span>\"),\r\n        continuous: {\r\n            effects: {\r\n                precision_modifier: {\r\n                    target: \"self\",\r\n                    modifier: \"rank.times(.1)\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    sharedPain: {\r\n        name: \"Shared Pain\",\r\n        icon: \"icons/icons-146.png\",\r\n        description: _.template(\"You return the pain of injuries inflicted on you, reflecting <span style='color: orangered'>${rank.times(5).toFixed()}%</span> of the damage back.\"),\r\n        on_taking_damage: {\r\n            effects: {\r\n                target: \"attacker\",\r\n                damage: \"$rank.times(5).div(100).times(attackDamage)\"\r\n            }\r\n        }\r\n    },\r\n    terrifyingSkitter: {\r\n        name: \"Terrifying Skitter\",\r\n        icon: \"icons/icons-2260.png\",\r\n        description: _.template(\"The sickening sound of your feet on the ground unnerves even other demons, making the enemy <span style='color: violet'>Terrified</span> for <span style='color: lightblue'>${rank.div(10).round(0, 0).plus(1).toFixed()}</span> round(s), stunning them.\"),\r\n        on_combat_start: {\r\n            effects: {\r\n                add_statuses: {\r\n                    terrified: {\r\n                        target: \"all_enemies\",\r\n                        rank: \"rank\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: \"$rank.div(10).round(0, 0).plus(1)\"\r\n            }\r\n        }\r\n    },\r\n}\r\n\r\nexport function getTrait(traitId) {\r\n    return Traits[traitId];\r\n}","import {config} from \"./config\";\r\nimport {evaluateExpression, getGlobalState, getLevelForPower, getPowerNeededForLevel} from \"./engine\";\r\nimport {Creatures} from \"./data/creatures\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {Tactics} from \"./data/Tactics\";\r\nimport {Statuses} from \"./data/Statuses\";\r\nimport * as _ from \"lodash\";\r\nimport {Traits} from \"./data/Traits\";\r\n\r\nexport class Character {\r\n    constructor(props) {\r\n\r\n        this._isPc = props.isPc || props._isPc;\r\n        this.id = props.id;\r\n        this._name = props.name || props._name;\r\n        this._absorbedPower = Decimal(props.absorbedPower || props._absorbedPower || 0);\r\n        this._latentPower = Decimal(props.latentPower || props._latentPower || 0);\r\n        this._attributes = new Attributes(props.attributes || props._attributes, this);\r\n        this._currentHp = Decimal(props._currentHp || this.maximumHp);\r\n        this._combat = new CombatStats(props.combat || props._combat, this);\r\n        this._traits = Object.keys(props.traits || props._traits).reduce((transformed, next) => {\r\n            transformed[next] = Decimal((props.traits || props._traits)[next]);\r\n            return transformed;\r\n        }, {});\r\n        this._appearance = props.appearance || props._appearance;\r\n        this._modifiers = props.modifiers || props._modifiers || [];\r\n        this._tactics = props.tactics || props._tactics || \"defensive\";\r\n        this._statuses = props.statuses || props._statuses || {};\r\n    }\r\n\r\n    get tactics() {\r\n        return this._tactics;\r\n    }\r\n\r\n    get statuses() {\r\n        return this._statuses;\r\n    }\r\n\r\n    clearStatuses() {\r\n        Object.keys(this._statuses).forEach(status => delete this._statuses[status]);\r\n    }\r\n\r\n    set tactics(newTactics) {\r\n        this._tactics = newTactics;\r\n    }\r\n\r\n    get isPc() {\r\n        return this._isPc;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get powerLevel() {\r\n        return getLevelForPower(this._absorbedPower);\r\n    }\r\n\r\n    get currentHp() {\r\n        return Decimal(this._currentHp);\r\n    }\r\n\r\n    set currentHp(newHealth) {\r\n        if (this.maximumHp.lt(newHealth)) {\r\n            this._currentHp = this.maximumHp;\r\n        } else {\r\n            this._currentHp = newHealth;\r\n        }\r\n    }\r\n\r\n    get isAlive() {\r\n        return Decimal(this.currentHp).gt(0);\r\n    }\r\n\r\n    get latentPower() {\r\n        return this._latentPower;\r\n    }\r\n\r\n    set latentPower(newLatentPower) {\r\n        this._latentPower = newLatentPower;\r\n    }\r\n\r\n    get maximumHp() {\r\n        const attributeMultiplier = this.attributes.madness.times(config.mechanics.combat.hp.effectPerPoint);\r\n        return this.powerLevel\r\n            .times(attributeMultiplier.plus(1))\r\n            .mul(config.mechanics.combat.hp.pointsPerLevel)\r\n            .floor();\r\n    }\r\n\r\n    get attributes() {\r\n        return this._attributes;\r\n    }\r\n\r\n    get combat() {\r\n        return this._combat;\r\n    }\r\n\r\n    get traits() {\r\n        return this._traits;\r\n    }\r\n\r\n    set traits(newTraits) {\r\n        this._traits = newTraits;\r\n    }\r\n\r\n    get appearance() {\r\n        return this._appearance;\r\n    }\r\n\r\n    reincarnate(newAppearance, newTraits) {\r\n        this._appearance = newAppearance;\r\n        this._traits = newTraits;\r\n    }\r\n\r\n    otherDemonIsGreaterDemon(other) {\r\n        const greaterDemonScale = evaluateExpression(config.encounters.greaterLevelScale, {\r\n            player: this,\r\n            enemy: other\r\n        });\r\n        return other.powerLevel.gte(this.powerLevel.plus(greaterDemonScale));\r\n    }\r\n\r\n    otherDemonIsLesserDemon(other) {\r\n        const lesserDemonScale = evaluateExpression(config.encounters.lesserLevelScale, {\r\n            player: this,\r\n            enemy: other\r\n        });\r\n        return other.powerLevel.lte(this.powerLevel.minus(lesserDemonScale));\r\n    }\r\n\r\n    gainPower(powerGained) {\r\n        const latentPowerMultiplier = this.latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale)\r\n            .plus(1);\r\n        powerGained = powerGained.times(latentPowerMultiplier).floor();\r\n        this.absorbedPower = this.absorbedPower.plus(powerGained);\r\n        return powerGained;\r\n    }\r\n\r\n    get healing() {\r\n        const baseHealing = Decimal(this.powerLevel.times(config.mechanics.combat.hp.healingPerLevel));\r\n        const tacticsMultiplier = Decimal(1).plus(Tactics[this.tactics].modifiers.healing_modifier || 0);\r\n        return baseHealing.times(tacticsMultiplier);\r\n    }\r\n\r\n    get absorbedPower() {\r\n        return this._absorbedPower;\r\n    }\r\n\r\n    set absorbedPower(value) {\r\n        this._absorbedPower = value;\r\n        if (getLevelForPower(this._absorbedPower).gt(config.mechanics.maxLevel)) {\r\n            this._absorbedPower = getPowerNeededForLevel(config.mechanics.maxLevel);\r\n        }\r\n        if (this.appearance) {\r\n            Creatures[this.appearance].traits.forEach(trait => {\r\n                this._traits[trait] = getLevelForPower(this._absorbedPower).div(10).ceil();\r\n                getGlobalState().unlockedTraits[trait] = getLevelForPower(this._absorbedPower).div(10).ceil();\r\n            });\r\n        }\r\n    }\r\n\r\n    get speed() {\r\n        return Decimal(100);\r\n    }\r\n\r\n    addModifier(modifier) {\r\n        this._modifiers.push(modifier);\r\n    }\r\n\r\n    get modifiers() {\r\n        return this._modifiers;\r\n    }\r\n}\r\n\r\nexport class Attributes {\r\n    constructor(attributes, character) {\r\n        this._brutality = attributes.brutality || attributes._brutality || 0;\r\n        this._cunning = attributes.cunning || attributes._cunning || 0;\r\n        this._deceit = attributes.deceit || attributes._deceit || 0;\r\n        this._madness = attributes.madness || attributes._madness || 0;\r\n        Object.defineProperty(this, \"character\", {\r\n            value: () => character\r\n        })\r\n    }\r\n\r\n    get brutality() {\r\n        const latentPowerMultiplier = this.character().latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale)\r\n            .plus(1);\r\n        return Decimal(this._brutality).times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get cunning() {\r\n        const latentPowerMultiplier = this.character().latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale)\r\n            .plus(1);\r\n        return Decimal(this._cunning).times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get deceit() {\r\n        const latentPowerMultiplier = this.character().latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale)\r\n            .plus(1);\r\n        return Decimal(this._deceit).times(latentPowerMultiplier).floor();\r\n    }\r\n\r\n    get madness() {\r\n        const latentPowerMultiplier = this.character().latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale)\r\n            .plus(1);\r\n        return Decimal(this._madness).times(latentPowerMultiplier).floor();\r\n    }\r\n}\r\n\r\nclass CombatStats {\r\n    constructor(props, character) {\r\n        this.character = function () {\r\n            return character;\r\n        }\r\n    }\r\n\r\n    get minimumDamage() {\r\n        return calculateDamage(config.mechanics.combat.defaultMinimumDamageMultiplier, this.character()).floor();\r\n    }\r\n\r\n    get medianDamage() {\r\n        return calculateDamage(config.mechanics.combat.defaultMedianDamageMultiplier, this.character()).floor();\r\n    }\r\n\r\n    get maximumDamage() {\r\n        const tacticsMultiplier = Decimal(1).plus(\r\n            Tactics[this.character().tactics].modifiers.critical_hit_damage_modifier || 0\r\n        )\r\n        return calculateDamage(Decimal(config.mechanics.combat.defaultMaximumDamageMultiplier), this.character())\r\n            .times(tacticsMultiplier).floor();\r\n    }\r\n\r\n    get evasion() {\r\n        const attributeBase = this.character().attributes[config.mechanics.combat.evasion.baseAttribute];\r\n        const tacticsModifier = Decimal(0).plus(Tactics[this.character().tactics].evasion_modifier || 0);\r\n        const statusesModifier = Object.keys(this.character().statuses).reduce((currentValue, nextStatus) => {\r\n            const statusDefinition = Statuses[nextStatus];\r\n            return currentValue.plus(statusDefinition.effects.evasion_multiplier || 0).minus(1);\r\n        }, Decimal(0));\r\n        const traitModifier = Object.keys(this.character().traits).reduce((previousValue, trait) => {\r\n            const traitDefinition = Traits[trait];\r\n            if(_.get(traitDefinition, [\"continuous\", \"effects\", \"evasion_modifier\", \"target\"]) === \"self\") {\r\n                return previousValue.plus(evaluateExpression(_.get(traitDefinition, [\"continuous\", \"effects\", \"evasion_modifier\", \"modifier\"]), {\r\n                    rank: Decimal(this.character().traits[trait])\r\n                }));\r\n            }\r\n            return previousValue;\r\n        }, Decimal(0));\r\n        return attributeBase.times(tacticsModifier.plus(statusesModifier).plus(traitModifier).plus(1));\r\n    }\r\n\r\n    get precision() {\r\n        const attributeBase = this.character().attributes[config.mechanics.combat.precision.baseAttribute];\r\n        const tacticsModifier = Decimal(0).plus(Tactics[this.character().tactics].precison_modifier || 0);\r\n        const statusesModifier = Object.keys(this.character().statuses).reduce((currentValue, nextStatus) => {\r\n            const statusDefinition = Statuses[nextStatus];\r\n            return currentValue.plus(statusDefinition.effects.precision_multiplier || 0).minus(1);\r\n        }, Decimal(0));\r\n        const traitModifier = Object.keys(this.character().traits).reduce((previousValue, trait) => {\r\n            const traitDefinition = Traits[trait];\r\n            if(_.get(traitDefinition, [\"continuous\", \"effects\", \"precision_modifier\", \"target\"]) === \"self\") {\r\n                return previousValue.plus(evaluateExpression(_.get(traitDefinition, [\"continuous\", \"effects\", \"precision_modifier\", \"modifier\"]), {\r\n                    rank: Decimal(this.character().traits[trait])\r\n                }));\r\n            }\r\n            return previousValue;\r\n        }, Decimal(0));\r\n        return attributeBase.times(tacticsModifier.plus(statusesModifier).plus(traitModifier).plus(1));\r\n    }\r\n\r\n    get resilience() { // TODO: Refactor all these into a shared method.\r\n        const attributeBase = this.character().attributes[config.mechanics.combat.resilience.baseAttribute];\r\n        const tacticsModifier = Decimal(0).plus(Tactics[this.character().tactics].resilience_modifier || 0);\r\n        const statusesModifier = Object.keys(this.character().statuses).reduce((currentValue, nextStatus) => {\r\n            const statusDefinition = Statuses[nextStatus];\r\n            return currentValue.plus(statusDefinition.effects.resilience_multiplier || 0).minus(1);\r\n        }, Decimal(0));\r\n        const traitModifier = Object.keys(this.character().traits).reduce((previousValue, trait) => {\r\n            const traitDefinition = Traits[trait];\r\n            if(_.get(traitDefinition, [\"continuous\", \"effects\", \"resilience_modifier\", \"target\"]) === \"self\") {\r\n                return previousValue.plus(evaluateExpression(_.get(traitDefinition, [\"continuous\", \"effects\", \"resilience_modifier\", \"modifier\"]), {\r\n                    rank: Decimal(this.character().traits[trait])\r\n                }));\r\n            }\r\n            return previousValue;\r\n        }, Decimal(0));\r\n        return attributeBase.times(tacticsModifier.plus(statusesModifier).plus(traitModifier).plus(1));\r\n    }\r\n\r\n    get power() {\r\n        const attributeBase = this.character().attributes[config.mechanics.combat.power.baseAttribute];\r\n        const tacticsModifier = Decimal(0).plus(Tactics[this.character().tactics].power_modifier || 0);\r\n        const statusesModifier = Object.keys(this.character().statuses).reduce((currentValue, nextStatus) => {\r\n            const statusDefinition = Statuses[nextStatus];\r\n            return currentValue.plus(statusDefinition.effects.power_multiplier || 0).minus(1);\r\n        }, Decimal(0));\r\n        const traitModifier = Object.keys(this.character().traits).reduce((previousValue, trait) => {\r\n            const traitDefinition = Traits[trait];\r\n            if(_.get(traitDefinition, [\"continuous\", \"effects\", \"power_modifier\", \"target\"]) === \"self\") {\r\n                return previousValue.plus(evaluateExpression(_.get(traitDefinition, [\"continuous\", \"effects\", \"power_modifier\", \"modifier\"]), {\r\n                    rank: Decimal(this.character().traits[trait])\r\n                }));\r\n            }\r\n            return previousValue;\r\n        }, Decimal(0));\r\n        return attributeBase.times(tacticsModifier.plus(statusesModifier).plus(traitModifier).plus(1));\r\n    }\r\n\r\n}\r\n\r\nfunction calculateDamage(hitTypeDamageMultiplier, character) {\r\n    const baseDamage = evaluateExpression(config.mechanics.combat.baseDamage, {\r\n        player: character\r\n    });\r\n    return baseDamage\r\n        .times(hitTypeDamageMultiplier).ceil();\r\n}","import * as _ from \"lodash\";\r\nimport {assertCreatureExists, Creatures} from \"../data/creatures\";\r\nimport {debugMessage} from \"../debugging\";\r\nimport { Decimal } from \"decimal.js\";\r\nimport {Character} from \"../character\";\r\nimport {config} from \"../config\";\r\nimport * as Package from \"../../package.json\";\r\nimport {Tactics} from \"../data/Tactics\";\r\n\r\nexport const saveKey = require(\"md5\")(`hell-conquest-${Package.version}`);\r\n\r\nconst expressionCache = {};\r\n\r\nlet globalState = loadGlobalState()\r\n\r\nexport function getGlobalState() {\r\n    return globalState;\r\n}\r\n\r\nexport function saveGlobalState() {\r\n    window.localStorage.setItem(saveKey, JSON.stringify(globalState));\r\n}\r\n\r\nexport function loadGlobalState(state) {\r\n    const loaded = window.localStorage.getItem(saveKey);\r\n    return loaded ? JSON.parse(loaded, stateReviver) : {\r\n        debug: {\r\n            creatures: {},\r\n            regions: {}\r\n        },\r\n        reincarnationCount: 0,\r\n        passivePowerIncome: Decimal(0),\r\n        unlockedMonsters: {},\r\n        unlockedTraits: {},\r\n        paused: true,\r\n        currentAction: null,\r\n        nextAction: null,\r\n        id: 0,\r\n        highestLevelReached: Decimal(1),\r\n        startingTraits: {},\r\n        currentEncounter: null,\r\n        manualSpeedMultiplier: config.manualSpeedup.enabled ? config.manualSpeedup.multiplier : 1,\r\n        currentRegion: \"forest\",\r\n        actionLog: [],\r\n        exploration: {\r\n            explorationTime: 5 * 1000,\r\n            approachTime: 5 * 1000,\r\n            combatTime: 5 * 1000,\r\n            lootingTime: 5 * 1000,\r\n            recoveryTime: 2 * 1000,\r\n            fleeingTime: 5 * 1000,\r\n            intimidateTime: 5 * 1000,\r\n            reincarnationTime: 1\r\n        },\r\n        characters: {\r\n            0: new Character({\r\n                id: 0,\r\n                isPc: true,\r\n                name: \"You\",\r\n                powerLevel: Decimal(1),\r\n                absorbedPower: Decimal(0),\r\n                appearance: \"\",\r\n                statuses: {},\r\n                traits: {},\r\n                tactics: \"defensive\",\r\n                items: [],\r\n                attributes: {\r\n                    brutality: Decimal(0),\r\n                    cunning: Decimal(0),\r\n                    deceit: Decimal(0),\r\n                    madness: Decimal(0)\r\n                },\r\n                combat: {\r\n                    fatigue: 0,\r\n                    minimumDamageMultiplier: .5,\r\n                    medianDamageMultiplier: 1,\r\n                    maximumDamageMultiplier: 1.5\r\n                }\r\n            })\r\n        },\r\n        tutorials: {}\r\n    }\r\n}\r\n\r\nexport function getCharacter(id) {\r\n    assertCharacterExists(id);\r\n    return globalState.characters[id];\r\n}\r\n\r\nlet nextMonsterId = 1;\r\n\r\nexport function generateCreature(id, powerLevel, rng) {\r\n    assertCreatureExists(id);\r\n    if (config.debug) {\r\n        debugMessage(`Generating creature with id ${id} and level ${powerLevel}`);\r\n    }\r\n    if (powerLevel === undefined) {\r\n        throw new Error(\"No powerLevel\");\r\n    }\r\n    if (Number.isNaN(powerLevel)) {\r\n        throw new Error(\"Level cannot be NaN\");\r\n    }\r\n    const tactics = Object.keys(Tactics)[Math.floor(rng.double() * 3)];\r\n    const nextId = nextMonsterId++;\r\n    globalState.characters[nextId] = new Character({\r\n        id: nextId,\r\n        ...Creatures[id],\r\n        latentPower: Decimal(evaluateExpression(config.mechanics.reincarnation.latentPowerGainOnReincarnate, {\r\n            player: {\r\n                powerLevel: powerLevel.minus(1)\r\n            }\r\n        })).times(5),\r\n        tactics,\r\n        traits: Creatures[id].traits.reduce((traits, next) => {\r\n            traits[next] = powerLevel.div(10).ceil();\r\n            return traits;\r\n        }, {}),\r\n        absorbedPower: getPowerNeededForLevel(powerLevel),\r\n        artifacts: [],\r\n        statuses: [],\r\n        attributes: {\r\n            brutality: powerLevel.div(2).floor(),\r\n            cunning: powerLevel.div(2).floor(),\r\n            deceit: powerLevel.div(2).floor(),\r\n            madness: powerLevel.div(2).floor(),\r\n        },\r\n        combat: {\r\n            fatigue: 0,\r\n            minimumDamageMultiplier: .5,\r\n            medianDamageMultiplier: 1,\r\n            maximumDamageMultiplier: 1.5\r\n        }\r\n    });\r\n    saveGlobalState();\r\n    return globalState.characters[nextId];\r\n}\r\n\r\n\r\nexport function getSpriteForCreature(name) {\r\n    assertCreatureExists(name);\r\n    return `monsters/${Creatures[name].texture}`;\r\n}\r\n\r\nfunction assertCharacterExists(id) {\r\n    if (!globalState.characters[id]) {\r\n        throw new Error(`No creature exists for '${id}'`);\r\n    }\r\n}\r\n\r\nexport function evaluateExpression(expression, context) {\r\n    if(expression === null || expression === undefined) {\r\n        return expression;\r\n    }\r\n    if (!expressionCache[expression]) {\r\n        expressionCache[expression] = new Function(\"context\", `with(context) {return ${expression}}`);\r\n    }\r\n    context.Decimal = Decimal;\r\n    context.config = config;\r\n    return expressionCache[expression].call(null, context);\r\n}\r\n\r\nexport function getPowerNeededForLevel(level) {\r\n    return evaluateExpression(config.mechanics.levelToPowerEquation, {\r\n        $level: Decimal(level)\r\n    });\r\n}\r\n\r\nexport function getLevelForPower(powerPoints) {\r\n    return evaluateExpression(config.mechanics.powerToLevelEquation, {\r\n        $powerPoints: Decimal(powerPoints)\r\n    });\r\n}\r\n\r\nexport function reincarnateAs(monsterId, newAttributes) {\r\n    const player = getCharacter(0);\r\n    // Improve your starting traits\r\n    const currentDemon = Creatures[player.appearance];\r\n    if (currentDemon) {\r\n        currentDemon.traits.forEach(trait => {\r\n            if (!globalState.unlockedTraits[trait] || player.powerLevel.gt(globalState.unlockedTraits[trait])) {\r\n                globalState.unlockedTraits[trait] = player.powerLevel;\r\n            }\r\n        });\r\n    }\r\n\r\n    if(Decimal(globalState.highestLevelReached).lt(player.powerLevel)) {\r\n        globalState.highestLevelReached = player.powerLevel;\r\n    }\r\n\r\n    if (monsterId === \"random\") {\r\n        const options = _.difference(Object.keys(Creatures).filter(m => {\r\n            return _.get(globalState, [\"debug\", \"creatures\", m, \"enabled\"], true) &&\r\n                Creatures[m].enabled !== false\r\n        }), Object.keys(globalState.unlockedMonsters)\r\n            .filter(m => globalState.unlockedMonsters[m]));\r\n        monsterId = options[Math.floor(Math.random() * options.length)];\r\n    }\r\n\r\n    // Update player attributes\r\n    Object.keys(player.attributes).forEach(attribute => {\r\n        player.attributes[attribute] = Decimal(newAttributes[attribute.substring(1)]);\r\n    })\r\n    if(globalState.reincarnationCount !== 0) {\r\n        // Add your level to your starting energy.\r\n        const latentPowerGain = evaluateExpression(config.mechanics.reincarnation.latentPowerGainOnReincarnate, {\r\n            player\r\n        });\r\n        globalState.characters[0].latentPower = globalState.characters[0].latentPower.plus(latentPowerGain);\r\n    }\r\n\r\n\r\n    globalState.characters[0].absorbedPower = Decimal(0);\r\n    globalState.characters[0].reincarnate(monsterId, globalState.startingTraits);\r\n    globalState.unlockedMonsters[monsterId] = true;\r\n\r\n    getCharacter(0).traits = Object.keys(globalState.startingTraits).reduce((startingTraits, trait) => {\r\n        startingTraits[trait] = globalState.unlockedTraits[trait];\r\n        return startingTraits;\r\n    }, {});\r\n    Creatures[monsterId].traits.forEach(trait => {\r\n        getCharacter(0).traits[trait] = 1;\r\n    })\r\n\r\n    globalState.currentEncounter = null;\r\n    globalState.currentAction = \"reincarnating\";\r\n    getCharacter(0).currentHp = getCharacter(0).maximumHp;\r\n    getGlobalState().passivePowerIncome = Decimal(0);\r\n    globalState.reincarnationCount++;\r\n\r\n    saveGlobalState();\r\n}\r\n\r\nexport function unpause() {\r\n    globalState.paused = false;\r\n}\r\n\r\nfunction stateReviver(key, value) {\r\n    switch (key) {\r\n        case \"characters\":\r\n            return Object.keys(value).reduce((characters, id) => {\r\n                characters[id] = new Character(value[id]);\r\n                return characters;\r\n            }, {});\r\n        case \"enemies\":\r\n            return Object.keys(value).map(character => {\r\n                return new Character(value[character]);\r\n            });\r\n        case \"paused\":\r\n            return false;\r\n        case \"passivePowerIncome\":\r\n            return Decimal(value);\r\n        case \"value\":\r\n            const parsed = Number.parseFloat(value);\r\n            if (Number.isNaN(parsed)) {\r\n                return value;\r\n            }\r\n            return Decimal(value);\r\n        default:\r\n            return value;\r\n    }\r\n}\r\n\r\nexport function resetDebug() {\r\n    globalState.debug.creatures = {};\r\n    globalState.debug.regions = {};\r\n}\r\n\r\nexport function getManualSpeedMultiplier() {\r\n    const debugMultiplier = _.get(globalState, [\"debug\", \"manualSpeedMultiplier\"]);\r\n    const baseMultiplier = globalState.manualSpeedMultiplier;\r\n    return debugMultiplier || baseMultiplier;\r\n}","import * as _ from \"lodash\";\r\nimport {evaluateExpression, generateCreature, getGlobalState} from \"../engine\";\r\nimport {config} from \"../config\";\r\nimport {debugMessage} from \"../debugging\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nclass Region {\r\n    constructor(name, available, encounters, background) {\r\n        this.name = name;\r\n        this.encounters = encounters;\r\n        this.background = background;\r\n    }\r\n\r\n    startEncounter(player, rng) {\r\n        let encounterType;\r\n        const combinedEncounterChances = config.encounters.lesserEncounterChanceWeight +\r\n            config.encounters.greaterLevelScale +\r\n            config.encounters.evenEncounterChanceWeight;\r\n        const encounterTypeRoll = Math.floor(rng.double() * combinedEncounterChances) + 1;\r\n        const lesserChance = config.encounters.lesserEncounterChanceWeight;\r\n        const evenChance = config.encounters.lesserEncounterChanceWeight + config.encounters.evenEncounterChanceWeight;\r\n        debugMessage(`Determine encounter. Roll ${encounterTypeRoll} vs lesser (<=${lesserChance}), even (<=${evenChance})`);\r\n        if (encounterTypeRoll <= config.encounters.lesserEncounterChanceWeight) {\r\n            encounterType = \"lesser\";\r\n            debugMessage(`Lesser triggered`)\r\n        } else if (encounterTypeRoll <= config.encounters.lesserEncounterChanceWeight + config.encounters.evenEncounterChanceWeight) {\r\n            encounterType = \"even\";\r\n            debugMessage(`Even level encounter triggered`);\r\n        } else {\r\n            encounterType = \"greater\";\r\n            debugMessage(`Greater encounter triggered`);\r\n        }\r\n        let encounterLevel = player.powerLevel;\r\n        switch (encounterType) {\r\n            case \"greater\": {\r\n                const encounterOffset = Math.floor(rng.double() * config.encounters.greaterLevelScale);\r\n                encounterLevel = encounterLevel.plus(encounterOffset);\r\n                break;\r\n            }\r\n            case \"lesser\": {\r\n                const encounterOffset = Math.floor(rng.double() * config.encounters.lesserLevelScale);\r\n                encounterLevel = Decimal.max(1, encounterLevel.minus(encounterOffset));\r\n                break;\r\n            }\r\n            case \"even\": {\r\n                const difference = Math.max(config.encounters.greaterLevelScale, config.encounters.lesserLevelScale) - Math.min(config.encounters.greaterLevelScale, config.encounters.lesserLevelScale);\r\n                const encounterOffset = Math.floor(rng.double() * difference) - difference;\r\n                encounterLevel = Decimal.max(1, encounterLevel.plus(encounterOffset));\r\n            }\r\n        }\r\n        if (config.debug) {\r\n            debugMessage(`Generated encounter level is ${encounterLevel}`);\r\n        }\r\n        const encounterDef = chooseRandomEncounter(this);\r\n        if (encounterDef === undefined) {\r\n            throw new Error(\"No encounter selected\");\r\n        }\r\n        const encounter = {\r\n            encounterLevel,\r\n            ...encounterDef,\r\n            pendingActions: [],\r\n            enemies: encounterDef.enemies.flatMap(enemyDef => _.range(0, enemyDef.count).map(i => {\r\n                return generateCreature(enemyDef.name, encounterLevel, rng)\r\n            }))\r\n        };\r\n        return encounter;\r\n    }\r\n}\r\n\r\nexport const Regions = {\r\n    forest: new Region(\"The Prey's Lament\", true, {\r\n            bloodthirstyKnight: {\r\n                description: \"1 Bloodthirsty Knight\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"bloodthirstyKnight\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            rapaciousHighwayman: {\r\n                description: \"1 Rapacious Highwayman\",\r\n                type: \"combat\",\r\n                enabled: false,\r\n                enemies: [\r\n                    {\r\n                        name: \"rapaciousHighwayman\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            condemnedSlasher: {\r\n                description: \"1 Condemned Slasher\",\r\n                type: \"combat\",\r\n                enabled: true,\r\n                enemies: [\r\n                    {\r\n                        name: \"condemnedSlasher\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            crushingSnake: {\r\n                description: \"1 Crushing Snake\",\r\n                type: \"combat\",\r\n                enabled: true,\r\n                enemies: [\r\n                    {\r\n                        name: \"crushingSnake\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            skitteringHorror: {\r\n                description: \"1 Skittering Horror\",\r\n                type: \"combat\",\r\n                enabled: true,\r\n                enemies: [\r\n                    {\r\n                        name: \"skitteringHorror\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            deadlyHornet: {\r\n                description: \"1 Deadly Hornet\",\r\n                type: \"combat\",\r\n                enabled: true,\r\n                enemies: [\r\n                    {\r\n                        name: \"deadlyHornet\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            tormentedDead: {\r\n                description: \"1 Tormented Dead\",\r\n                type: \"combat\",\r\n                enabled: true,\r\n                enemies: [\r\n                    {\r\n                        name: \"tormentedDead\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            background: \"backgrounds/parallax-demon-woods-bg.png\",\r\n            far: \"backgrounds/parallax-demon-woods-far-trees.png\",\r\n            mid: \"backgrounds/parallax-demon-woods-mid-trees.png\",\r\n            close: \"backgrounds/parallax-demon-woods-close-trees.png\"\r\n        }\r\n    ),\r\n    caves: new Region(\"The Bottomless Caverns\", false, {}, {}),\r\n    mountains: new Region(\"The Crags of Futility\", false, {}, {}),\r\n    desert: new Region(\"The Desert of Isolation\", false, {}, {})\r\n}\r\n\r\nfunction chooseRandomEncounter(region) {\r\n    const possibleEncounters = Object.keys(region.encounters).filter(encounterId => {\r\n        debugMessage(`Determining if '${encounterId}' is enabled.`);\r\n        const encounterEnabled = region.encounters[encounterId].enabled !== false;\r\n        if (!encounterEnabled) {\r\n            debugMessage(`Encounter '${encounterId}' disabled`);\r\n        }\r\n        const debugNotDisabled = _.get(getGlobalState(), [\"debug\", \"regions\", region.id, \"encounters\", encounterId]) !== false;\r\n        if (!debugNotDisabled) {\r\n            debugMessage(`Encounter '${encounterId}' disabled by debug.`);\r\n        }\r\n        return encounterEnabled && debugNotDisabled;\r\n    });\r\n    const randomKey = possibleEncounters[Math.floor(Math.random() * Object.keys(possibleEncounters).length)];\r\n    debugMessage(`Selected encounter '${randomKey}'`);\r\n    return region.encounters[randomKey];\r\n}","import React from \"react\";\r\n\r\nexport const Actions = {\r\n    exploring: {\r\n        id: \"exploring\",\r\n        duration: \"exploration.explorationTime\",\r\n        description: \"Exploring...\"\r\n    },\r\n    approaching: {\r\n        id: \"approaching\",\r\n        duration: \"exploration.approachTime\",\r\n        description: \"Approaching Enemy...\"\r\n    },\r\n    dead: {\r\n        id: \"dead\",\r\n        duration: 100000000,\r\n        description: \"Rotting, time to reincarnate...\"\r\n    },\r\n    looting: {\r\n        id: \"looting\",\r\n        duration: \"exploration.lootingTime\",\r\n        description: \"Looting the body...\"\r\n    },\r\n    fleeing: {\r\n        id: \"fleeing\",\r\n        duration: \"exploration.fleeingTime\",\r\n        description: \"Fleeing in terror!\"\r\n    },\r\n    fighting: {\r\n        id: \"fighting\",\r\n        duration: \"exploration.combatTime\",\r\n        description: \"In Combat!\",\r\n    },\r\n    reincarnating: {\r\n        id: \"resurrecting\",\r\n        duration: \"exploration.reincarnationTime\",\r\n        description: \"Reincarnating...\"\r\n    },\r\n    recovering: {\r\n        id:\"recovering\",\r\n        duration: \"exploration.recoveryTime\",\r\n        description: \"Healing...\"\r\n    },\r\n    intimidating: {\r\n        id:\"intimidating\",\r\n        duration: \"exploration.intimidateTime\",\r\n        description: \"Intimidating...\"\r\n    }\r\n}","import { config } from \"../config\";\r\nimport * as _ from \"lodash\";\r\n\r\nexport const Attributes = {\r\n    brutality: {\r\n        label: \"Brutality\",\r\n            description: _.template(`Brutality is how savage and ruthless a Demon is. It adds to Power and Resilience.`),\r\n            icon: \"icons/icons-92.png\"\r\n    },\r\n    cunning: {\r\n        label: \"Cunning\",\r\n            description: _.template(\"Cunning is how quick thinking a Demon is. It adds to Evasion.\"),\r\n            icon: \"icons/icons-24.png\"\r\n    },\r\n    deceit: {\r\n        label: \"Deceit\",\r\n            description: _.template(\"Deceit is how underhanded and manipulative a Demon is. It adds to Precision.\"),\r\n            icon: \"icons/icons-17.png\"\r\n    },\r\n    madness: {\r\n        label: \"Madness\",\r\n            description: _.template(`Madness is how disconnected from the limits of reality the Demon is. It gives a \\${rank * ${ config.mechanics.combat.traitRank.effectPerPoint * 100}}% bonus to the effects of Traits and health.`),\r\n            icon: \"icons/icons-124.png\"\r\n    }\r\n}","import {Tactics} from \"../../data/Tactics\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport React from \"react\";\r\n\r\nexport default function (props) {\r\n    return <Grid container>\r\n        <ul>\r\n            {Tactics[props.tactic].modifiers.power_modifier &&\r\n            <Tooltip title=\"Power makes your hits deal additional damage.\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    +{Tactics[props.tactic].modifiers.power_modifier * 100}% to Power\r\n                </li>\r\n            </Tooltip>}\r\n            {Tactics[props.tactic].modifiers.precision_modifier &&\r\n            <Tooltip title=\"Precision makes your hits more severe.\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    +{Tactics[props.tactic].modifiers.precision_modifier * 100}% to Precision\r\n                </li>\r\n            </Tooltip>}\r\n            {Tactics[props.tactic].modifiers.resilience_modifier &&\r\n            <Tooltip title=\"Resilience makes you more resistant to damage.\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    +{Tactics[props.tactic].modifiers.resilience_modifier * 100}% to Resilience\r\n                </li>\r\n            </Tooltip>}\r\n            {Tactics[props.tactic].modifiers.healing_modifier &&\r\n            <Tooltip title=\"Healing increases how quickly you recover from injury.\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    +{Tactics[props.tactic].modifiers.healing_modifier * 100}% to Healing\r\n                </li>\r\n            </Tooltip>}\r\n            {Tactics[props.tactic].modifiers.evasion_modifier &&\r\n            <Tooltip title=\"Evasion makes incoming attacks less severe.\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    +{Tactics[props.tactic].modifiers.evasion_modifier * 100}% to Evasion\r\n                </li>\r\n            </Tooltip>}\r\n            {Tactics[props.tactic].modifiers.critical_hit_damage_modifier &&\r\n            <Tooltip title=\"Critical hits deal extra damage\">\r\n                <li style={{color: \"green\", textAlign: \"left\"}}>\r\n                    {Tactics[props.tactic].modifiers.critical_hit_damage_modifier * 100}% to Critical hit\r\n                    damage\r\n                </li>\r\n            </Tooltip>}\r\n        </ul>\r\n    </Grid>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {Creatures} from \"../../data/creatures\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport {evaluateExpression, getCharacter, getGlobalState, getLevelForPower, getSpriteForCreature} from \"../../engine\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport * as _ from \"lodash\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {config} from \"../../config\";\r\nimport \"../../App.css\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {Tactics} from \"../../data/Tactics\";\r\nimport { Attributes } from \"../../data/Attributes\";\r\nimport TacticsDescription from \"../charactersheet/TacticsDescription\";\r\n\r\nexport default function ReincarnationSelectionPage(props) {\r\n    const history = useHistory();\r\n    const player = getCharacter(0);\r\n    const [attributes, setAttributes] = useState(Object.keys(player.attributes)\r\n        .reduce((attributes, next) => {\r\n            attributes[next.substring(1)] = player.attributes[next];\r\n            return attributes;\r\n        }, {}));\r\n    const [playerTactics, setPlayerTactics] = useState(getCharacter(0).tactics);\r\n    const [startingTraits, setStartingTraits] = useState(getGlobalState().startingTraits);\r\n    const newLatentPower = getCharacter(0).latentPower.plus(\r\n        evaluateExpression(config.mechanics.reincarnation.latentPowerGainOnReincarnate, {\r\n            player\r\n        }));\r\n    const spendableBonusPoints = Decimal(getGlobalState().highestLevelReached).times(config.mechanics.reincarnation.bonusPointsForHighestLevel);\r\n    const availableBonusPoints = spendableBonusPoints\r\n        .minus(Object.values(attributes).reduce((sum, next) => Decimal(sum).plus(next)))\r\n        .minus(\r\n            Object.values(startingTraits).filter(x => x).reduce((previousValue, x, i) => {\r\n                return previousValue.plus(evaluateExpression(config.mechanics.reincarnation.traitPointCost, {\r\n                    traitsOwned: Decimal(i)\r\n                }))\r\n            }, Decimal(0))\r\n        );\r\n    const nextBonusTraitCost = evaluateExpression(config.mechanics.reincarnation.traitPointCost, {\r\n        traitsOwned: Decimal(Object.values(startingTraits).filter(x => x).length)\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGlobalState().paused = true;\r\n    }, []);\r\n\r\n    return <Grid container>\r\n        <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n            <strong>Reincarnate</strong>\r\n        </Grid>\r\n        <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n            Select a soul to reincarnate as.\r\n            <br/>\r\n            You will reincarnate with a <strong>{newLatentPower.toFixed()}%</strong> bonus to Attributes and absorbed power due to your Latent Power acquired from previous reincarnations.\r\n            <br/>\r\n        </Grid>\r\n\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Spend {availableBonusPoints.toFixed()} {player.powerLevel.gt(1) ? \"points\" : \"point\"} on\r\n                    bonuses </strong> (Reach higher levels to gain more points)\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Attributes</strong>\r\n            </Grid>\r\n            {Object.keys(Attributes).map(attribute => {\r\n                return <Grid item xs={3}>\r\n                    <Tooltip title={Attributes[attribute].description({\r\n                        rank: Decimal(attributes[attribute]).toFixed()\r\n                    })}>\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <img src={Attributes[attribute].icon}/>\r\n                            <div>\r\n                                <Button disabled={availableBonusPoints.lte(0)}\r\n                                        onClick={() => {\r\n                                            setAttributes({\r\n                                                ...attributes,\r\n                                                [attribute]: Decimal(attributes[attribute]).plus(1)\r\n                                            })\r\n                                        }}>\r\n                                    <AddIcon/>\r\n                                </Button>\r\n                                {Decimal(attributes[attribute]).toFixed()}\r\n                                <Button disabled={Decimal(attributes[attribute]).lte(0)} onClick={() => {\r\n                                    setAttributes({...attributes, [attribute]: Decimal(attributes[attribute]).minus(1)})\r\n                                }}>\r\n                                    <RemoveIcon/>\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </Tooltip>\r\n                </Grid>\r\n            })}\r\n            {Object.keys(getGlobalState().unlockedTraits).length > 0 &&\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Bonus Starting Traits</strong> (Start with traits in addition to that innate to your new demon\r\n                form)\r\n            </Grid>}\r\n            {Object.keys(getGlobalState().unlockedTraits).map(traitId => {\r\n                return <Grid item container xs={3} justify=\"space-around\" style={{height: \"138px\"}}>\r\n                    <Grid item xs={12} style={{textAlign: \"center\", height: \"64%\"}}>\r\n                        <Button variant=\"contained\"\r\n                                color={getGlobalState().startingTraits[traitId] ? \"secondary\" : \"default\"}\r\n                                disabled={availableBonusPoints.lt(nextBonusTraitCost) && !startingTraits[traitId]}\r\n                                onClick={() => {\r\n                                    getGlobalState().startingTraits[traitId] = !getGlobalState().startingTraits[traitId];\r\n                                    setStartingTraits({...getGlobalState().startingTraits});\r\n                                }}\r\n                        >\r\n                            <Tooltip title={<div dangerouslySetInnerHTML={{\r\n                                __html: `Rank ${Decimal(getGlobalState().unlockedTraits[traitId]).toFixed()}: ${Traits[traitId].description({\r\n                                    rank: Decimal(getGlobalState().unlockedTraits[traitId])\r\n                                })}`\r\n                            }}>\r\n                            </div>}>\r\n                                <Grid container>\r\n                                    <Grid item xs={12}>\r\n                                        <img src={Traits[traitId].icon}/>\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        {Traits[traitId].name} {Decimal(getGlobalState().unlockedTraits[traitId]).toFixed()}\r\n                                    </Grid>\r\n                                    <Grid item xs={12}>\r\n                                        <em style={{visibility: startingTraits[traitId] ? \"hidden\" : \"visible\" }}>{nextBonusTraitCost.toFixed()} pts</em>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Tooltip>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n        <Grid container item>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <Tooltip title=\"Tactics provide modifiers based on your fighting style\">\r\n                    <strong>Choose Tactics</strong>\r\n                </Tooltip>\r\n            </Grid>\r\n            <Grid container item xs={12} justify=\"space-around\" direction=\"row\">\r\n                {Object.keys(Tactics).map(tactic =>\r\n                    <Grid item>\r\n                        <Button variant=\"contained\" onClick={() => {\r\n                            setPlayerTactics(getCharacter(0).tactics = tactic)\r\n                        }}\r\n                                color={player.tactics === tactic ? \"primary\" : \"default\"}\r\n                        >{Tactics[tactic].title}</Button>\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n            <Grid item style={{textAlign: \"center\"}}>\r\n                <em>{Tactics[player.tactics].description}</em>\r\n            </Grid>\r\n\r\n            <TacticsDescription tactic={player.tactics}/>\r\n\r\n        </Grid>\r\n\r\n        <Grid container item xs={12} alignItems=\"stretch\" justify=\"flex-start\">\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Choose a demon to reincarnate as.</strong>\r\n            </Grid>\r\n            {\r\n                Object.keys(Creatures)\r\n                    .filter(id => {\r\n                            const creatureEnabled = Creatures[id].enabled !== false;\r\n                            const debugEnabled = _.get(getGlobalState(), [\"debug\", \"creatures\", id, \"enabled\"], true);\r\n                            return creatureEnabled && debugEnabled;\r\n                        }\r\n                    )\r\n                    .map(name => {\r\n                        if (!getGlobalState().unlockedMonsters[name]) {\r\n                            return <Grid container xs={3} justify=\"space-around\" style={{height: \"150px\"}}>\r\n                                <Grid item xs={12} style={{textAlign: \"center\", height: \"64%\"}}>\r\n                                    <Tooltip\r\n                                        title={<div>An unknown type of Demon. Selects a random Demon you have not\r\n                                            already\r\n                                            played as.</div>}>\r\n                                        <Button variant=\"contained\" style={{height: \"100%\", width: \"50%\"}}\r\n                                                onClick={() => {\r\n                                                    props.reincarnate(\"random\", attributes);\r\n                                                    history.push(\"/adventuring\");\r\n                                                }}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={12}>\r\n                                                    ???\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                            </Grid>\r\n                        } else {\r\n                            return <Grid container xs={3} justify=\"space-around\">\r\n                                <Grid item xs={12} style={{textAlign: \"center\", height: \"150px\"}}>\r\n                                    <Tooltip title={<div>{Creatures[name].description}</div>}>\r\n                                        <Button variant=\"contained\" style={{height: \"75%\", width: \"50%\"}}\r\n                                                onClick={() => {\r\n                                                    props.reincarnate(name, attributes);\r\n                                                    history.push(\"/adventuring\");\r\n                                                }}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={12}>\r\n                                                    <img src={getSpriteForCreature(name)}/>\r\n                                                </Grid>\r\n                                                <Grid item xs={12}>\r\n                                                    {Creatures[name].name}\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Button>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    })\r\n            }\r\n        </Grid>\r\n    </Grid>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Help} from \"@material-ui/icons\";\r\nimport {config} from \"../../config\";\r\nimport React from \"react\";\r\nimport { Attributes } from \"../../data/Attributes\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nexport default function CharacterAttributes(props) {\r\n    return <React.Fragment>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                Health\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.currentHp.toFixed()} / {props.character.maximumHp.toFixed()}\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container direction=\"row\">\r\n            {Object.keys(Attributes).map(attribute => {\r\n                return <Grid item xs>\r\n                    <Tooltip title={Attributes[attribute].description({\r\n                        rank: Decimal(props.character.attributes[attribute]).toFixed()\r\n                    })}>\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <img src={Attributes[attribute].icon}/>\r\n                            <div>\r\n                                <span style={{fontSize: \"12\"}}>{Attributes[attribute].label}</span>\r\n                            </div>\r\n                            <div>\r\n                                {Decimal(props.character.attributes[attribute]).toFixed()}\r\n                            </div>\r\n                        </div>\r\n                    </Tooltip>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n\r\n    </React.Fragment>\r\n}","import Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport React from \"react\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nexport default function CharacterTraits(props) {\r\n    return <React.Fragment>\r\n        {Object.keys(props.character.traits).map(trait => <Tooltip key={trait} title={\r\n            <React.Fragment>\r\n                <span>Tier {Decimal(props.character.traits[trait]).toFixed()}: </span>\r\n            <span dangerouslySetInnerHTML={{\r\n                __html: Traits[trait].description({\r\n                    rank: Decimal(props.character.traits[trait])\r\n                })\r\n            }}></span>\r\n            </React.Fragment>}>\r\n            <img src={Traits[trait].icon}></img>\r\n        </Tooltip>)\r\n        }\r\n    </React.Fragment>\r\n\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport React from \"react\";\r\nimport TacticsDescription from \"./TacticsDescription\";\r\nimport {Tactics} from \"../../data/Tactics\";\r\n\r\nexport default function TacticsSection(props) {\r\n    return <Grid container>\r\n        <Grid item xs={12}>\r\n            <Tooltip title=\"Your approach to combat\">\r\n                <span>Utilizing {Tactics[props.character.tactics].title} Tactics</span>\r\n            </Tooltip>\r\n        </Grid>\r\n        <Grid container direction=\"row\">\r\n            <TacticsDescription tactic={props.character.tactics}/>\r\n        </Grid>\r\n\r\n    </Grid>\r\n}","import {config} from \"../../config\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport * as _ from \"lodash\";\r\n\r\nexport default function getHitChanceBy(attackingCharacter) {\r\n    return {\r\n        against: function(targetCharacter) {\r\n            const attackerPrecision = attackingCharacter.combat.precision;\r\n            const targetEvasion = Decimal(_.get(targetCharacter, [\"combat\", \"evasion\"], 0));\r\n            return {\r\n                min: Decimal(config.mechanics.combat.baseMinimumDamageWeight)\r\n                    .plus(targetEvasion.times(3)),\r\n                med: Decimal(config.mechanics.combat.baseMedianDamageWeight)\r\n                    .plus(targetEvasion).plus(attackerPrecision),\r\n                max: Decimal(config.mechanics.combat.baseMaximumDamageWeight)\r\n                    .plus(attackerPrecision.times(2)),\r\n            }\r\n        }\r\n    }\r\n}","import {Decimal} from \"decimal.js\";\r\nimport * as _ from \"lodash\";\r\nimport { config } from \"../../config\";\r\n\r\nexport default function calculateDamageBy(attacker) {\r\n    return {\r\n        against: function (target) {\r\n            const powerMultiplier = Decimal(attacker.combat.power\r\n                .times(config.mechanics.combat.power.effectPerPoint));\r\n            const resilienceMultiplier = Decimal(_.get(target, [\"combat\", \"resilience\"], 0)).times(config.mechanics.combat.power.effectPerPoint);\r\n            const damageModifier = powerMultiplier.minus(resilienceMultiplier).plus(1);\r\n            return {\r\n                min: attacker.combat.minimumDamage.times(damageModifier).ceil(),\r\n                med: attacker.combat.medianDamage.times(damageModifier).ceil(),\r\n                max: attacker.combat.maximumDamage.times(damageModifier).ceil()\r\n            }\r\n        }\r\n    }\r\n\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useMemo} from \"react\";\r\nimport {getCharacter, getGlobalState, getPowerNeededForLevel, getSpriteForCreature} from \"../engine\";\r\nimport {config} from \"../config\";\r\nimport PowerLevelDisplay from \"./charactersheet/PowerLevelDisplay\";\r\nimport CharacterAttributes from \"./charactersheet/CharacterAttributes\";\r\nimport CharacterTraits from \"./charactersheet/CharacterTraits\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport TacticsSection from \"./charactersheet/TacticsSection\";\r\nimport getHitChanceBy from \"../engine/combat/getHitChanceBy\";\r\nimport calculateDamageBy from \"../engine/combat/calculateDamageBy\";\r\nimport * as _ from \"lodash\";\r\nimport {Help} from \"@material-ui/icons\";\r\nimport {Decimal} from \"decimal.js\";\r\n\r\nconst styles = {\r\n    tooltip: {\r\n        fontSize: \"12pt\"\r\n    }\r\n}\r\n\r\nexport default function CharacterSheet(props) {\r\n    const spriteSrc = useMemo(() => getSpriteForCreature(props.character.appearance), [props.character.appearance]);\r\n    const hitChances = useMemo(() => getHitChanceBy(props.character).against(props.enemy),\r\n        [\r\n            props.character,\r\n            props.enemy\r\n        ]);\r\n    const calculatedDamage = useMemo(() => calculateDamageBy(props.character).against(props.enemy),\r\n        [\r\n            props.character,\r\n            props.enemy\r\n        ]);\r\n    const combinedHitWeights = Object.values(hitChances).reduce((total, next) => total.plus(next));\r\n    const powerRequiredForCurrentLevel = getPowerNeededForLevel(props.character.powerLevel);\r\n    const powerNeededForNextLevel = getPowerNeededForLevel(props.character.powerLevel.plus(1));\r\n    const progressToNextLevel = props.character.absorbedPower.minus(powerRequiredForCurrentLevel);\r\n\r\n\r\n    return <Grid container>\r\n        <Grid item xs={12}>\r\n            <img src={spriteSrc} style={{height: \"75px\"}}/>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs>\r\n                Level\r\n            </Grid>\r\n            <Grid item xs>\r\n                {props.character.powerLevel.toFixed()}\r\n            </Grid>\r\n            <Grid item xs>\r\n                Latent Power Bonus\r\n            </Grid>\r\n            <Grid item xs>\r\n                {props.character.latentPower.times(config.mechanics.reincarnation.latentPowerEffectScale).times(100).toFixed()}%\r\n            </Grid>\r\n        </Grid>\r\n        {props.character.absorbedPower !== undefined && <Grid item xs={12}>\r\n            <progress\r\n                value={progressToNextLevel.div(powerNeededForNextLevel).times(100).toNumber()}\r\n                max={100}\r\n                title={`${progressToNextLevel.toFixed()}/${powerNeededForNextLevel.toFixed()}`}\r\n            ></progress>\r\n        </Grid>}\r\n        <Grid container>\r\n            <Grid item container>\r\n                <Grid item xs>\r\n                    <strong>Attributes</strong>\r\n                </Grid>\r\n            </Grid>\r\n            <CharacterAttributes character={props.character}/>\r\n        </Grid>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Combat Statistics</strong>\r\n            </Grid>\r\n            <Grid container>\r\n                <Tooltip title={`Your Power increases the damage your attacks deal by ${Decimal(config.mechanics.combat.power.effectPerPoint).times(props.character.combat.power).times(100).toFixed()}%.`}>\r\n                    <Grid item container>\r\n                        <Grid item xs style={{textAlign: \"center\"}}>\r\n                            Power\r\n                        </Grid>\r\n                        <Grid item xs>\r\n                            {props.character.combat.power.toFixed()}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Tooltip>\r\n                <Tooltip title={`Your Resilience reduces the damage your attacks deal by ${Decimal(config.mechanics.combat.resilience.effectPerPoint).times(props.character.combat.resilience).times(100).toFixed()}%.`}>\r\n                    <Grid item container>\r\n                        <Grid item xs style={{textAlign: \"center\"}}>\r\n                            Resilience\r\n                        </Grid>\r\n                        <Grid item xs>\r\n                            {props.character.combat.resilience.toFixed()}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Tooltip>\r\n                <Tooltip title={`Your Evasion reduces the severity of hits you take.`}>\r\n                    <Grid item container>\r\n                        <Grid item xs style={{textAlign: \"center\"}}>\r\n                            Evasion\r\n                        </Grid>\r\n                        <Grid item xs>\r\n                            {props.character.combat.evasion.toFixed()}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Tooltip>\r\n                <Tooltip title={`Your Precision increases the severity of hits you score.`}>\r\n                    <Grid item container>\r\n                        <Grid item xs style={{textAlign: \"center\"}}>\r\n                            Precision\r\n                        </Grid>\r\n                        <Grid item xs>\r\n                            {props.character.combat.precision.toFixed()}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Tooltip>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <strong>Hit Chances</strong>\r\n                </Grid>\r\n                <Grid item container xs={12}>\r\n                    <Grid item xs><em>Type</em></Grid>\r\n                    <Grid item xs><em>Chance</em></Grid>\r\n                    <Grid item xs><em>Damage</em></Grid>\r\n                    <Grid item xs={1}></Grid>\r\n                </Grid>\r\n                <Grid item container xs={12}>\r\n                    <Grid item xs>\r\n                        Glancing Hit\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {hitChances.min.div(combinedHitWeights).times(100).toFixed(2)}%\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {calculatedDamage.min.toFixed()}\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                        <Tooltip title=\"Glancing hits deal 50% less  damage\">\r\n                            <Help/>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item container xs={12}>\r\n                    <Grid item xs>\r\n                        Solid Hit\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {hitChances.med.div(combinedHitWeights).times(100).toFixed(2)}%\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {calculatedDamage.med.toFixed()}\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                        <Tooltip title=\"Solid hits deal normal damage\">\r\n                            <Help/>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item container xs={12}>\r\n                    <Grid item xs>\r\n                        Critical Hit\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {hitChances.max.div(combinedHitWeights).times(100).toFixed(2)}%\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {calculatedDamage.max.toFixed()}\r\n                    </Grid>\r\n                    <Grid item xs={1}>\r\n                        <Tooltip title=\"Critical hits deal 50% more damage.\">\r\n                            <Help/>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Traits</strong>\r\n            </Grid>\r\n            <CharacterTraits character={props.character}/>\r\n        </Grid>\r\n        {config.mechanics.artifacts.enabled && <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Artifacts</strong>\r\n            </Grid>\r\n            <Grid>\r\n                {\r\n                    JSON.stringify(props.character.items)\r\n                }\r\n            </Grid>\r\n        </Grid>}\r\n        <TacticsSection character={props.character}/>\r\n    </Grid>\r\n\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React from \"react\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nconst styles = {\r\n    root: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#eeeeee\"\r\n    }\r\n}\r\n\r\nexport default function PlayerStats(props) {\r\n    return <Paper style={styles.root} elevation={2}>\r\n        <CharacterSheet character={props.player} enemy={props.enemy}/>\r\n    </Paper>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useMemo} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {getCharacter, getGlobalState, getLevelForPower, getPowerNeededForLevel} from \"../engine\";\r\n\r\nconst styles = {\r\n    root: {\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flex: \"0\"\r\n    },\r\n    buttons: {\r\n        width: \"100%\"\r\n    }\r\n}\r\n\r\nexport default function TopSection(props) {\r\n    const history = useHistory();\r\n    const reincarnateEnabled = useMemo(() => getCharacter(0).powerLevel.gt(1) || !getCharacter(0).isAlive, [\r\n        getCharacter(0).powerLevel,\r\n        getCharacter(0).isAlive\r\n    ])\r\n    return <div style={styles.root}>\r\n        <Button onClick={() => history.push(\"/reincarnating\")} style={styles.buttons} variant=\"contained\" color=\"secondary\" disabled={!reincarnateEnabled}>\r\n            Reincarnate\r\n        </Button>\r\n    </div>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React from \"react\";\r\nimport {Statuses} from \"../data/Statuses\";\r\n\r\nexport default function CharacterCombatSummary(props) {\r\n    return <Grid item container xs >\r\n        <Grid item xs={12} container direction={props.direction}>\r\n            <Grid item xs={6}>\r\n                {props.name}\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                <meter style={{width: \"80%\"}} low={33} high={66} optimum={100} min={0} max={100}\r\n                       value={props.currentHp.div(props.maximumHp).times(100).floor().toNumber()}\r\n                       max={100}></meter>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container item xs={12} style={{height: \"40px\"}} direction={props.direction}>\r\n            {props.statuses && Object.keys(props.statuses).map(status => {\r\n                return <Grid item xs={1}>\r\n                    <img src={Statuses[status].icon}/>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n    </Grid>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {evaluateExpression, getCharacter, getGlobalState} from \"../engine\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {config} from \"../config\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport CharacterCombatSummary from \"./CharacterCombatSummary\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flex: \"1 0 auto\",\r\n        justifyContent: \"flex-end\",\r\n        flexDirection: \"column\"\r\n    },\r\n    actions: {\r\n        container: {\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            flexDirection: \"row\"\r\n        },\r\n        buttons: {\r\n            alignSelf: \"flex-end\",\r\n            flex: \"1\"\r\n        }\r\n    },\r\n    action: {\r\n        maxHeight: \"15%\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    },\r\n    actionProgress: {\r\n        width: \"100%\"\r\n    },\r\n    history: {\r\n        height: \"15%\",\r\n        flexDirection: \"column\",\r\n        overflowY: \"scroll\"\r\n    },\r\n    combat: {}\r\n}\r\nexport default function BottomSection(props) {\r\n    if (!props.currentAction) {\r\n        throw new Error(\"No current action\");\r\n    }\r\n    const escapeChance = props.enemy ? evaluateExpression(config.encounters.chanceToEscapeGreater, {\r\n        player: props.player,\r\n        enemy: props.enemy\r\n    }) : Decimal(100);\r\n    const intimidateChance = props.enemy ? evaluateExpression(config.encounters.chanceToIntimidateLesser, {\r\n        player: props.player,\r\n        enemy: props.enemy\r\n    }) : Decimal(100);\r\n    return <div style={styles.root} onMouseEnter={props.startManualSpeedup} onMouseLeave={props.stopManualSpeedup}>\r\n        <Paper style={styles.actions.container}>\r\n            <Button style={styles.actions.buttons} onClick={() => {\r\n                getGlobalState().paused = !getGlobalState().paused;\r\n                props.togglePause(getGlobalState().paused);\r\n            }}>\r\n                {props.paused ? \"Unpause\" : \"Pause\"}\r\n            </Button>\r\n        </Paper>\r\n        <Paper style={styles.actions.container}>\r\n            {actionButton(\"fighting\", \"Fight\", \"Combat the enemy. On victory, steal some of the power of the vanquished foe.\", props)}\r\n            {actionButton(\"fleeing\", \"Flee\", `Attempt to escape. Your chance is  ${escapeChance}%.`, props)}\r\n            {actionButton(\"intimidating\", \"Intimidate\", `Try to cow the enemy, compelling them to continuously provide you a portion of their life force. Your chance is ${intimidateChance}%`, props)}\r\n            {_.get(config, \"features.negotiating.enabled\") && actionButton(\"negotiating\", \"Negotiate\", \"Combat the enemy. On victory, steal some of the power of the vanquished foe.\", props)}\r\n        </Paper>\r\n        <Paper style={styles.combat.details}>\r\n            <Grid container>\r\n                <CharacterCombatSummary name=\"Player\" currentHp={props.player.currentHp}\r\n                                        maximumHp={props.player.maximumHp}\r\n                                        statuses={_.get(props.player, \"statuses\")}\r\n                                        direction=\"row\"/>\r\n                <CharacterCombatSummary name={_.get(props.enemy, \"name\")} currentHp={_.get(props.enemy, \"currentHp\", Decimal(0))}\r\n                                        maximumHp={_.get(props.enemy, \"maximumHp\", Decimal(100))}\r\n                                        statuses={_.get(props.enemy, \"statuses\")}\r\n                                        direction=\"row-reverse\"/>\r\n            </Grid>\r\n        </Paper>\r\n        <Paper style={styles.action}>\r\n            <strong>{props.currentAction.description}</strong>\r\n            <progress style={styles.actionProgress} value={props.actionTime}\r\n                      max={_.get(props.state, props.currentAction.duration)}/>\r\n        </Paper>\r\n        <Paper style={styles.history}>\r\n            {\r\n                props.actionLog.map(item => printActionItem(item))\r\n            }\r\n        </Paper>\r\n    </div>\r\n}\r\n\r\nfunction printActionItem(item) {\r\n    return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n        <Grid item xs={11}>\r\n                <span dangerouslySetInnerHTML={{\r\n                    __html: item.message\r\n                }}></span>\r\n        </Grid>\r\n        {item.tick && <Grid item={1}>{item.tick}: </Grid>}\r\n    </Grid>\r\n}\r\n\r\nfunction actionButton(action, text, description, props) {\r\n    return <Tooltip title={description}>\r\n        <Button onClick={() => props.setNextAction(action)} style={styles.actions.buttons}\r\n                disabled={props.currentAction.id !== \"approaching\"}\r\n                variant={props.nextActionName === action ? \"contained\" : \"outlined\"}\r\n                color={props.nextActionName === action ? \"primary\" : \"default\"}>\r\n            {text}\r\n        </Button>\r\n    </Tooltip>\r\n}","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nconst styles = {\r\n    root: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#eeeeee\"\r\n    }\r\n}\r\n\r\nexport default function EnemySidebar(props) {\r\n    return <Paper style={styles.root}>\r\n        {props.enemy && <CharacterSheet enemy={props.player} character={props.enemy} /> }\r\n    </Paper>\r\n}","import {config} from \"../config\";\r\nimport * as _ from \"lodash\";\r\nimport {Attributes} from \"../character\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {Tactics} from \"../data/Tactics\";\r\nimport {Statuses} from \"../data/Statuses\";\r\n\r\nexport default class CharacterCombatState {\r\n    constructor(originalCharacter, party) {\r\n        this.id = originalCharacter.id;\r\n        // FIXME: Symbols?\r\n        this.attributes = new Attributes(originalCharacter.attributes, originalCharacter);\r\n        this.party = party;\r\n        this.hp = originalCharacter.currentHp;\r\n        this._speed = originalCharacter.speed;\r\n        this.maximumHp = originalCharacter.maximumHp;\r\n        this.fatigue = 0;\r\n        this.lastActed = 0;\r\n        this.modifiers = [];\r\n        this.tactics = originalCharacter.tactics;\r\n        this.traits = {...originalCharacter.traits};\r\n        this.damage = {\r\n            min: originalCharacter.combat.minimumDamage,\r\n            med: originalCharacter.combat.medianDamage,\r\n            max: originalCharacter.combat.maximumDamage\r\n        }\r\n        this.statuses = {...originalCharacter.statuses};\r\n    }\r\n\r\n    get combat() {\r\n        return {\r\n            precision: Decimal(this.precision),\r\n            evasion: Decimal(this.evasion),\r\n            power: Decimal(this.power),\r\n            resilience: Decimal(this.resilience),\r\n            minimumDamage: Decimal(this.damage.min),\r\n            medianDamage: Decimal(this.damage.med),\r\n            maximumDamage: Decimal(this.damage.max)\r\n        }\r\n    }\r\n\r\n    set speed(newSpeed) {\r\n        this._speed = newSpeed;\r\n    }\r\n\r\n    get speed() {\r\n        const baseSpeed = this._speed;\r\n        const speedMultiplier = this.modifiers.reduce((currentValue, modifier) => {\r\n            if(modifier.effects.speed) {\r\n                const multiplier = (modifier.effects.speed.percent.plus(100))/100\r\n                return currentValue.plus(multiplier);\r\n            }\r\n            return currentValue;\r\n        }, _.get(config.tactics, this.tactics, 1));\r\n        return baseSpeed.times(speedMultiplier);\r\n    }\r\n\r\n    get isAlive(){\r\n        return this.hp.gt(0);\r\n    }\r\n\r\n    get accuracy() {\r\n        const baseAccuracy = Decimal(config.mechanics.combat.baseHitChance);\r\n        const statusesMultiplier = Decimal(1).minus(\r\n            Decimal(Statuses[\"restrained\"].effects.accuracy_modifier)\r\n            .times(this.statuses[\"restrained\"] || 0));\r\n        return baseAccuracy.times(statusesMultiplier);\r\n    }\r\n\r\n    get canAct() {\r\n        return Object.keys(this.statuses).reduce((canAct, nextStatus) => {\r\n            return canAct && !Statuses[nextStatus].effects.skip_turn;\r\n        }, true);\r\n    }\r\n\r\n    get power() {\r\n        const attributeBase = this.attributes[config.mechanics.combat.power.baseAttribute];\r\n        const tacticsModifier = Decimal(1).plus(Tactics[this.tactics].power_modifier || 0);\r\n        const statusesModifier = Object.keys(this.statuses).reduce((currentValue, nextStatus) => {\r\n            const statusDefinition = Statuses[nextStatus];\r\n            return currentValue.plus(statusDefinition.effects.power_multiplier || 0).minus(1);\r\n        }, Decimal(1));\r\n        return attributeBase.times(tacticsModifier.plus(statusesModifier));\r\n    }\r\n\r\n    get resilience() {\r\n        const attributeBase = this.attributes[config.mechanics.combat.resilience.baseAttribute];\r\n        const tacticsModifier = Decimal(1).plus(Tactics[this.tactics].resilience_modifier || 0);\r\n        const statusesModifier = Object.keys(this.statuses).reduce((currentValue, nextStatus) => {\r\n            const statusDefinition = Statuses[nextStatus];\r\n            return currentValue.plus(statusDefinition.effects.resilience_multiplier || 0).minus(1);\r\n        }, Decimal(1));\r\n        return attributeBase.times(tacticsModifier.plus(statusesModifier));\r\n    }\r\n\r\n    get precision() {\r\n        const attributeBase = this.attributes[config.mechanics.combat.precision.baseAttribute];\r\n        const tacticsModifier = Decimal(1).plus(Tactics[this.tactics].precison_modifier || 0);\r\n        const statusesModifier = Object.keys(this.statuses).reduce((currentValue, nextStatus) => {\r\n            const statusDefinition = Statuses[nextStatus];\r\n            return currentValue.plus(statusDefinition.effects.precision_multiplier || 0).minus(1);\r\n        }, Decimal(1));\r\n        return attributeBase.times(tacticsModifier.plus(statusesModifier));\r\n    }\r\n\r\n    get evasion() {\r\n        const attributeBase = this.attributes[config.mechanics.combat.evasion.baseAttribute];\r\n        const tacticsModifier = Decimal(1).plus(Tactics[this.tactics].evasion_modifier || 0);\r\n        const statusesModifier = Object.keys(this.statuses).reduce((currentValue, nextStatus) => {\r\n            const statusDefinition = Statuses[nextStatus];\r\n            return currentValue.plus(statusDefinition.effects.evasion_multiplier || 0).minus(1);\r\n        }, Decimal(1));\r\n        return attributeBase.times(tacticsModifier.plus(statusesModifier));\r\n    }\r\n}","import CharacterCombatState from \"../CharacterCombatState\";\r\nimport {debugMessage} from \"../../debugging\";\r\nimport {getTrait} from \"../../data/Traits\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {config} from \"../../config\";\r\nimport {v4} from \"node-uuid\";\r\nimport {generateHitCombatResult, generateMissCombatResult, generateSkipActionResult} from \"../../combatResult\";\r\nimport {evaluateExpression, getCharacter} from \"../index\";\r\nimport * as _ from \"lodash\";\r\nimport getHitChanceBy from \"./getHitChanceBy\";\r\nimport {Statuses} from \"../../data/Statuses\";\r\nimport {act} from \"@testing-library/react\";\r\nimport calculateDamageBy from \"./calculateDamageBy\";\r\n\r\nexport function resolveCombat(rng, definition) {\r\n    const combatResult = {\r\n        rounds: [],\r\n        winner: null,\r\n        combatantCombatStats: {},\r\n    }\r\n\r\n    _.flatMap(definition.parties.map((party, partyIndex) => {\r\n        return party.map((character) => {\r\n            combatResult.combatantCombatStats[character.id] = new CharacterCombatState(character, partyIndex);\r\n        })\r\n    }));\r\n    debugMessage(\"Beginning combat\")\r\n    Object.values(combatResult.combatantCombatStats).forEach(combatant => {\r\n        // Trigger start of combat effects.\r\n        triggerEvent(combatant, null, Object.values(combatResult.combatantCombatStats), {type:\"on_combat_start\"}, 0, {combat: combatResult, round: {effects: []}}, rng);\r\n    })\r\n\r\n\r\n    let tick = 0;\r\n    while (combatResult.winner === null) {\r\n        const initiatives = determineInitiatives(combatResult);\r\n        Object.keys(initiatives).forEach(initiativeCount => {\r\n            const actingCharacters = initiatives[initiativeCount];\r\n            actingCharacters.forEach(actingCharacter => {\r\n                const beginningOfRoundEffects = [];\r\n                triggerEvent(actingCharacter, null, Object.values(combatResult.combatantCombatStats), {type: \"on_round_start\"}, tick, {combat: combatResult, round: {effects: beginningOfRoundEffects}}, rng);\r\n                beginningOfRoundEffects.forEach(effect => {\r\n                    combatResult.rounds.push(effect);\r\n                });\r\n                tick = actingCharacter.lastActed + actingCharacter.speed.toNumber();\r\n                actingCharacter.lastActed = tick;\r\n                debugMessage(`Tick ${tick}: Resolving action by character '${actingCharacter.id}'.`);\r\n                if (actingCharacter.hp.lte(0)) {\r\n                    debugMessage(`Tick ${tick}: Character ${actingCharacter.id} was dead when their turn to act came up, skipping their action.`);\r\n                    return;\r\n                }\r\n                const enemyParty = (actingCharacter.party + 1) % 2;\r\n                const livingEnemies = definition.parties[enemyParty]\r\n                    .filter(enemy => combatResult.combatantCombatStats[enemy.id].hp.gt(0));\r\n                const target = combatResult.combatantCombatStats[_.get(livingEnemies[Math.floor(rng.double() * livingEnemies.length)], \"id\")];\r\n                if (target === undefined) {\r\n                    debugMessage(`Tick ${tick}: No valid target, skipping action by ${actingCharacter.id}.`);\r\n                    return;\r\n                }\r\n                if (actingCharacter.canAct) {\r\n                    debugMessage(`Tick ${tick}: Attacking ${target}`);\r\n                    const attackRollResult = makeAttackRoll(actingCharacter, target, combatResult, rng);\r\n                    const attackOutcome = evaluateExpression(config.mechanics.combat.determineHit, {\r\n                        roll: attackRollResult.total,\r\n                        target: 100\r\n                    });\r\n                    switch (attackOutcome) {\r\n                        case \"hit\":\r\n                            debugMessage(`Tick ${tick}: ${actingCharacter.id} rolled ${attackRollResult.total}, a hit.`);\r\n                            resolveHit(tick, combatResult, actingCharacter, target, rng);\r\n                            break;\r\n                        default:\r\n                            debugMessage(`Tick ${tick}: ${actingCharacter.id} rolled ${attackRollResult.total}, a miss.`);\r\n                            resolveMiss(tick, combatResult, actingCharacter, target, rng);\r\n                        // TODO: Trigger on-miss effects\r\n                    }\r\n                } else {\r\n                    debugMessage(`${tick}: Character skips their action.`);\r\n                    resolveSkippedAction(tick, combatResult, actingCharacter);\r\n                }\r\n                Object.keys(combatResult.combatantCombatStats).forEach(combatantId => {\r\n                    if (combatResult.combatantCombatStats[combatantId].hp.lte(0)) {\r\n                        debugMessage(`Tick ${tick}: Combatant ${combatantId} died`);\r\n                        combatResult.rounds.push({\r\n                            uuid: v4(),\r\n                            tick,\r\n                            actor: actingCharacter.id,\r\n                            target: Number.parseInt(combatantId),\r\n                            result: \"kill\"\r\n                        });\r\n                    }\r\n                });\r\n\r\n                // TODO: Add logs for when effects expire.\r\n                actingCharacter.modifiers = actingCharacter.modifiers\r\n                    .map(modifier => {\r\n                        modifier.roundDuration = Decimal(modifier.roundDuration).minus(1);\r\n                        return modifier;\r\n                    })\r\n                    .filter(modifier => Decimal(modifier.roundDuration).gt(0));\r\n                const endOfRoundEffects = [];\r\n                triggerEvent(actingCharacter, null, Object.values(combatResult.combatantCombatStats), {type:\"on_round_end\"}, tick, {\r\n                    combat: combatResult,\r\n                    round: {effects: endOfRoundEffects}\r\n                }, rng);\r\n                Object.values(combatResult.combatantCombatStats).forEach(combatant => {\r\n                    Object.keys(combatant.statuses).filter(x => Statuses[x].decays).forEach(status => {\r\n                        if(Decimal(0).lt(combatant.statuses[status] || 0)) {\r\n                            combatant.statuses[status] = combatant.statuses[status].minus(1);\r\n                        } else {\r\n                            delete combatant.statuses[status]\r\n                        }\r\n                    })\r\n                });\r\n                endOfRoundEffects.forEach(event => {\r\n                    combatResult.rounds.push(event);\r\n                })\r\n            });\r\n        });\r\n        const playerPartyDead = definition.parties[0].every(character => combatResult.combatantCombatStats[character.id].hp.lte(0));\r\n        const enemyPartyDead = definition.parties[1].every(character => combatResult.combatantCombatStats[character.id].hp.lte(0));\r\n        if (playerPartyDead || enemyPartyDead) {\r\n            if (playerPartyDead) {\r\n                debugMessage(\"Every member of party 0 is dead\")\r\n                combatResult.rounds.push({\r\n                    uuid: v4(),\r\n                    tick,\r\n                    winner: 1,\r\n                    result: \"combat-end\"\r\n                })\r\n                combatResult.winner = 1;\r\n                // Clear all end of combat\r\n            } else if (enemyPartyDead) {\r\n                debugMessage(\"Every member of party 1 is dead\")\r\n                combatResult.rounds.push({\r\n                    uuid: v4(),\r\n                    tick,\r\n                    winner: 0,\r\n                    result: \"combat-end\",\r\n                });\r\n                combatResult.winner = 0;\r\n            }\r\n\r\n        } else {\r\n            debugMessage(\"No winner, combat continues\");\r\n        }\r\n    }\r\n    return combatResult\r\n\r\n}\r\n\r\nfunction resolveHit(tick, combatResult, actingCharacter, targetCharacter, rng) {\r\n    if (typeof actingCharacter !== \"object\") {\r\n        throw new Error(`Acting character was not an object!`);\r\n    }\r\n    if (typeof targetCharacter !== \"object\") {\r\n        throw new Error(`Target character was not an object!`);\r\n    }\r\n    const hitTypeChances = getHitChanceBy(actingCharacter).against(targetCharacter);\r\n    const damageCategories = calculateDamageBy(actingCharacter).against(targetCharacter);\r\n    const damageRoll = Math.floor(rng.double() * 100);\r\n    let hitType;\r\n    if (damageRoll <= hitTypeChances.min) {\r\n        hitType = \"min\";\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a glancing hit.`);\r\n    } else if (damageRoll <= hitTypeChances.med.plus(hitTypeChances.min)) {\r\n        hitType = \"med\";\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a solid hit.`);\r\n    } else {\r\n        hitType = \"max\";\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a critical hit.`);\r\n    }\r\n    const damageToInflict = damageCategories[hitType];\r\n    const attackResult = {\r\n        baseDamage: damageToInflict,\r\n        hitType,\r\n        attackMultiplier: actingCharacter.power.times(config.mechanics.combat.power.effectPerPoint),\r\n        defenseDivisor: targetCharacter.resilience.times(config.mechanics.combat.resilience.effectPerPoint),\r\n        effects: []\r\n    }\r\n    // Trigger on-hit effects\r\n    triggerEvent(actingCharacter, targetCharacter, Object.values(combatResult.combatantCombatStats), {type:\"on_hitting\"}, tick, {combat: combatResult, attack: attackResult}, rng);\r\n    const damageMultiplier = attackResult.attackMultiplier.plus(100).div(attackResult.defenseDivisor.plus(100));\r\n    const finalDamage = attackResult.baseDamage.times(damageMultiplier).ceil();\r\n\r\n    debugMessage(`Damage started off as ${attackResult.baseDamage.toFixed()}, with an attack factor of ${attackResult.attackMultiplier} and a target defense factor of ${attackResult.defenseDivisor}, for a total factor of ${damageMultiplier} and a final damage of ${finalDamage.toFixed()}`);\r\n    targetCharacter.hp = targetCharacter.hp.minus(finalDamage);\r\n    attackResult.finalDamage = finalDamage;\r\n    debugMessage(`Tick ${tick}: Hit did ${finalDamage.toFixed()}. Additional effects: ${attackResult.effects.map(effect => {\r\n        switch (effect.event) {\r\n            case \"apply_effect\":\r\n                return `Applying effect ${effect.effect} with from ${effect.source} to ${effect.target.id}.`\r\n            case \"add_statuses\":\r\n                return `Adding status ${effect.status} with rank ${effect.rank} to ${effect.target}`;\r\n        }\r\n\r\n    }).join(\", \")}. Character ${targetCharacter.id} has ${targetCharacter.hp} remaining.`)\r\n    // TODO: Trigger on-damage effects\r\n    triggerEvent(actingCharacter, targetCharacter, Object.values(combatResult.combatantCombatStats), {\r\n        type:\"on_taking_damage\",\r\n        attacker: actingCharacter,\r\n        target: targetCharacter\r\n    }, tick, {combat: combatResult, attack: attackResult}, rng);\r\n    attackResult.effects.forEach(effect => {\r\n        switch (effect.event) {\r\n            case \"damage\":\r\n                combatResult.combatantCombatStats[effect.target].hp = combatResult.combatantCombatStats[effect.target].hp.minus(effect.value);\r\n                break;\r\n        }\r\n    })\r\n    combatResult.rounds.push(generateHitCombatResult(tick, actingCharacter.id, targetCharacter.id, finalDamage, attackResult.effects));\r\n}\r\n\r\nfunction resolveMiss(tick, combatResult, actingCharacter, targetCharacter, rng) {\r\n    combatResult.rounds.push(generateMissCombatResult(tick, actingCharacter.id, targetCharacter.id));\r\n}\r\n\r\nfunction resolveSkippedAction(tick, combatResult, actingCharacter) {\r\n    combatResult.rounds.push(generateSkipActionResult(tick, actingCharacter.id));\r\n}\r\n\r\nfunction applyTrait(sourceCharacter, targetCharacter, trait, rank, event, state, tick, rng) {\r\n    const eventType = event.type;\r\n    const recordedEffects = roundEvents.includes(eventType) ? state.round.effects : state.attack.effects;\r\n    const rankModifier = Decimal(sourceCharacter.attributes[config.mechanics.combat.traitRank.baseAttribute]).times(config.mechanics.combat.traitRank.effectPerPoint).div(100);\r\n    rank = Decimal.min(Decimal(rank).plus(Decimal(rank).times(rankModifier)).floor(), 100);\r\n    debugMessage(`Character has a bonus to rank of ${sourceCharacter.attributes.madness.toFixed()}% from madness, for an effective rank of ${rank}`);\r\n    debugMessage(`Tick ${tick}: Determining if trait ${trait.name} applies`);\r\n    if (trait[eventType]) {\r\n        const effect = trait[eventType];\r\n        if (effect.conditions !== undefined) {\r\n            debugMessage(\"Trait has conditions\");\r\n        }\r\n        const effectTriggers = effect.conditions === undefined || Object.keys(effect.conditions)\r\n            .every(condition => {\r\n                switch (condition) {\r\n                    case \"critical_hit\":\r\n                        return state.attack.hitType === \"max\";\r\n                    case \"health_percentage\":\r\n                        // Fixme: Implement validation\r\n                        const targets = selectTargets(sourceCharacter, targetCharacter, Object.values(state.combat.combatantCombatStats), \"all_enemies\", state);\r\n                        return targets.reduce((previousValue, combatant) => {\r\n                            const targetPercent = Decimal(effect.conditions[condition].below);\r\n                            const targetCurrentHealth = combatant.hp;\r\n                            const targetMaxHealth = combatant.maximumHp;\r\n                            const currentHealthPercent = (targetCurrentHealth.mul(100).div(targetMaxHealth));\r\n                            const thisConditionMet = targetPercent.gte(currentHealthPercent);\r\n                            debugMessage(`Tick ${tick}: Target health percentage is ${currentHealthPercent}, which is ${thisConditionMet ? \"\" : \"not\"} enough to trigger.`);\r\n                            return previousValue && thisConditionMet;\r\n                        }, true);\r\n\r\n                    case \"chance\":\r\n                        const chanceToTrigger = evaluateExpression(trait[eventType].conditions[condition], {\r\n                            $rank: rank\r\n                        });\r\n                        const roll = Math.floor(rng.double() * 100) + 1;\r\n                        if (chanceToTrigger >= roll) {\r\n                            debugMessage(`Chance to trigger ${chanceToTrigger} with roll ${roll}: success`);\r\n                            return true;\r\n                        } else {\r\n                            debugMessage(`Chance to trigger ${chanceToTrigger} with roll ${roll}: failure.`);\r\n                            return false;\r\n                        }\r\n                    default:\r\n                        return false;\r\n                }\r\n            })\r\n        if (effectTriggers) {\r\n            debugMessage(`Tick ${tick}: Effect triggered, applying effects`);\r\n            Object.keys(trait[eventType].effects).forEach(traitEffect => {\r\n                    // FIXME\r\n                    switch (traitEffect) {\r\n                        case \"damage_modifier\":\r\n                            // FIXME: Validation\r\n                            const percentDamageModifier = evaluateExpression(trait[eventType].effects[traitEffect].percent, {\r\n                                $rank: rank\r\n                            });\r\n                            if (percentDamageModifier) {\r\n                                const newMultiplier = state.attack.attackMultiplier.plus(percentDamageModifier);\r\n                                debugMessage(`Tick ${tick}: Applying ${percentDamageModifier.toFixed()} modifier to damage, changing damage multiplier from ${state.attack.attackMultiplier.div(100).toFixed()} to ${newMultiplier.div(100).toFixed()}`);\r\n                                state.attack.attackMultiplier = newMultiplier;\r\n                            }\r\n                            break;\r\n                        case \"damage\":\r\n                            const target = trait[eventType].effects.target\r\n                            const damageToInflict = evaluateExpression(trait[eventType].effects.damage, {\r\n                                $rank: Decimal(rank),\r\n                                attackDamage: state.attack.finalDamage\r\n                            }).floor();\r\n                            debugMessage(`Inflicting ${damageToInflict} damage to ${target}`);\r\n                            if(damageToInflict.gt(0)) {\r\n                                const targets = selectTargets(sourceCharacter, targetCharacter, Object.values(state.combat.combatantCombatStats), target, state);\r\n                                targets.forEach(target => {\r\n                                    recordedEffects.push({\r\n                                        event: \"damage\",\r\n                                        value: damageToInflict,\r\n                                        target: target.id\r\n                                    });\r\n                                });\r\n                            }\r\n                            break;\r\n                        case \"defense_modifier\": {\r\n                            const defenseModifier = evaluateExpression(trait[eventType].effects[traitEffect].percent, {\r\n                                $rank: rank\r\n                            }).div(100).plus(1);\r\n                            const newMultiplier = state.attack.defenseDivisor.times(defenseModifier);\r\n                            debugMessage(`Tick ${tick}: Applying ${defenseModifier} modifier to defense, changing defense multiplier from ${state.attack.defenseDivisor.toFixed()} to ${newMultiplier.toFixed()}`);\r\n                            state.attack.defenseDivisor = newMultiplier;\r\n                            break;\r\n                        }\r\n                        case \"add_statuses\":\r\n                            const statusesDefinition = trait[eventType].effects.add_statuses;\r\n                            Object.keys(statusesDefinition).forEach(statusType => {\r\n                                const effectTarget = statusesDefinition[statusType].target;\r\n                                // Determine targets\r\n                                const targets = selectTargets(sourceCharacter, targetCharacter, Object.values(state.combat.combatantCombatStats), effectTarget, state);\r\n                                const statusLevel = evaluateExpression(statusesDefinition[statusType].rank, {\r\n                                    rank\r\n                                });\r\n                                targets.forEach(combatant => {\r\n                                    const existingLevel = Decimal(combatant.statuses[statusType] || 0);\r\n                                    if(existingLevel.lt(statusLevel)) {\r\n                                        combatant.statuses[statusType] = statusLevel;\r\n                                        recordedEffects.push({\r\n                                            event: \"add_statuses\", // FIXME: Shouldn't require both event and result.\r\n                                            result: \"add_statuses\",\r\n                                            source: sourceCharacter.id,\r\n                                            target: combatant.id,\r\n                                            status: statusType,\r\n                                            level: statusLevel,\r\n                                            tick\r\n                                        });\r\n                                    }\r\n                                });\r\n                            })\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nfunction makeAttackRoll(actingCharacter, target, combatState, rng) {\r\n    // TODO: Validation\r\n    const accuracy = actingCharacter.accuracy;\r\n    const roll = accuracy.plus(Math.floor((rng.double() * 100)));\r\n    return {\r\n        rawRoll: roll,\r\n        total: roll\r\n    };\r\n}\r\n\r\nfunction selectTargets(sourceCharacter, targetCharacter, combatants, targetType, state) {\r\n    return combatants.filter(combatant => {\r\n        switch (targetType) {\r\n            case \"attacker\":\r\n                return sourceCharacter.id == combatant.id;\r\n            case \"attacked\":\r\n                return targetCharacter.id == combatant.id;\r\n            case \"all_enemies\":\r\n                const actingCharacterParty = sourceCharacter.id === 0 ? 0 : 1;\r\n                return actingCharacterParty !== combatant.party;\r\n            default:\r\n                throw new Error();\r\n        }\r\n    });\r\n}\r\n\r\nfunction triggerEvent(sourceCharacter, targetCharacter, combatants, event, tick, state, rng) {\r\n    debugMessage(`Triggering event ${event.type}`);\r\n    Object.keys(sourceCharacter.traits).forEach(trait => {\r\n        applyTrait(sourceCharacter, targetCharacter, getTrait(trait), sourceCharacter.traits[trait], event, state, tick, rng);\r\n    });\r\n}\r\n\r\nfunction determineInitiatives(state) {\r\n    const combatants = Object.values(state.combatantCombatStats);\r\n    return combatants.reduce((initiatives, combatant) => {\r\n        if(initiatives[combatant.speed.toNumber()]) {\r\n            initiatives[combatant.speed.toNumber()].push(combatant);\r\n        } else {\r\n            initiatives[combatant.speed.toNumber()] = [combatant];\r\n        }\r\n        return initiatives;\r\n    }, {});\r\n}\r\n\r\nconst roundEvents = [\"on_round_start\", \"on_combat_start\", \"on_round_end\"];","import {v4} from \"node-uuid\";\r\n\r\nexport function generateHitCombatResult(tick, attackingCharacterId, targetCharacterId, damageDone, otherEffects) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"hit\",\r\n        target: targetCharacterId,\r\n        actor: attackingCharacterId,\r\n        effects: [{\r\n            event: \"damage\",\r\n            value: damageDone,\r\n            target: targetCharacterId\r\n        }, ...otherEffects]\r\n    }\r\n}\r\n\r\nexport function generateMissCombatResult(tick, attackingCharacterId, targetCharacterId) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"miss\",\r\n        target: targetCharacterId,\r\n        actor: attackingCharacterId,\r\n        effects: []\r\n    }\r\n}\r\n\r\nexport function generateSkipActionResult(tick, actingCharacterId) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"action_skipped\",\r\n        actor: actingCharacterId,\r\n        effects: []\r\n    }\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport {getCharacter} from \"./engine\";\r\nimport React from \"react\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {debugMessage} from \"./debugging\";\r\nimport {Statuses} from \"./data/Statuses\";\r\n\r\nexport default function generateLogItem(item) {\r\n    const result = {\r\n        original: item,\r\n        tick: item.tick\r\n    };\r\n    if(item.message) {\r\n        return item;\r\n    }\r\n    switch (item.result) {\r\n        case \"hit\":\r\n            result.message = `${getCharacter(item.actor).name} hit! ${item.effects.map(effect => describeEffect(item.target, effect)).join(\" \")}`;\r\n            break;\r\n        case \"miss\":\r\n            result.message = `${getCharacter(item.actor).name} ${item.actor === 0 ? 'miss' : 'missed'}! ${item.effects.map(effect => describeEffect(item.target, effect)).join(\" \")}`;\r\n            break;\r\n        case \"kill\":\r\n            result.message = `<strong>${getCharacter(item.target).name} ${item.target === 0 ? 'Were' : 'Was'} Killed!</strong>`;\r\n            break;\r\n        case \"gainedPower\":\r\n            result.message = `You absorbed ${item.value.toFixed()} power.`;\r\n            break;\r\n        case \"healed\":\r\n            result.message = `${getCharacter(item.target).name} gained ${item.value} health.`\r\n            break;\r\n        case \"escaped\":\r\n            result.message = \"You escaped\";\r\n            break;\r\n        case \"action_skipped\":\r\n            result.message = `${getCharacter(item.actor).name} lost ${item.actor === 0 ? 'your' : 'their'} action.`;\r\n            break;\r\n        case \"intimidated\":\r\n            result.message = `${getCharacter(item.target).name} was Bound to you, granting you {item.value.toFixed()} power while you explore.`\r\n            break;\r\n        case \"enemy-fled\":\r\n            result.message = `${getCharacter(item.target).name} Fled!`;\r\n            break;\r\n        case \"combat-end\":\r\n            result.message = `Battle ended`;\r\n            break;\r\n        case \"add_statuses\":\r\n            result.message = `${getCharacter(item.target).name} ${item.target === 0 ? 'gain' : 'gained'} ${Decimal(item.level).toFixed()} levels of ${Statuses[item.status].name}`\r\n        default:\r\n            debugMessage(`${JSON.stringify(item)}`);\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction describeEffect(target, effect) {\r\n    switch (effect.event) {\r\n        case \"damage\":\r\n            return `${getCharacter(effect.target).name} ${effect.target == 0 ? 'take' : 'takes'} ${effect.value} Damage.`;\r\n        case \"add_statuses\":\r\n            return `${getCharacter(effect.target).name} gained ${Decimal(effect.level).toFixed()} of ${Statuses[effect.status].name}.`;\r\n    }\r\n}","import PlayerStats from \"../PlayerStats\";\r\nimport TopSection from \"../TopSection\";\r\nimport {\r\n    evaluateExpression,\r\n    getCharacter,\r\n    getGlobalState,\r\n    getManualSpeedMultiplier,\r\n    saveGlobalState\r\n} from \"../../engine\";\r\nimport BottomSection from \"../BottomSection\";\r\nimport EnemySidebar from \"../EnemySidebar\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport {config} from \"../../config\";\r\nimport {Actions} from \"../../data/Actions\";\r\nimport {debugMessage} from \"../../debugging\";\r\nimport {Decimal} from \"decimal.js\";\r\nimport {v4} from \"node-uuid\";\r\nimport {Regions} from \"../../data/Regions\";\r\nimport {resolveCombat} from \"../../engine/combat\";\r\nimport {useHotkeys} from \"react-hotkeys-hook\";\r\nimport generateLogItem from \"../../generateLogItem\";\r\nimport {Traits} from \"../../data/Traits\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flex: \"1\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        overflow: \"hidden\"\r\n    },\r\n    image: {\r\n        position: \"absolute\",\r\n        height: \"100%\",\r\n        left: 0\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        left: 0\r\n    }\r\n}\r\n\r\nlet lastTime;\r\n\r\nfunction changeCurrentAction(newAction) {\r\n    getGlobalState().currentAction = newAction;\r\n    return getGlobalState().currentAction;\r\n}\r\n\r\nfunction pushLogItem(item) {\r\n    if (getGlobalState().actionLog.length > (config.actionLog.maxSize || 10)) {\r\n        getGlobalState().actionLog.pop();\r\n    }\r\n    getGlobalState().actionLog.unshift(generateLogItem(item));\r\n}\r\n\r\nexport default function AdventuringPage(props) {\r\n    const accruedTime = useRef(0);\r\n    const [enemy, setEnemy] = useState(_.get(getGlobalState(), [\"currentEncounter\", \"enemies\", 0]));\r\n    const [actionLog, setActionLog] = useState(getGlobalState().actionLog);\r\n    const [currentEncounter, setCurrentEncounter] = useState(getGlobalState().currentEncounter);\r\n    const [currentAction, setCurrentAction] = useState(Actions[getGlobalState().currentAction]);\r\n    const [nextAction, setNextAction] = useState(getGlobalState().nextAction);\r\n    const [paused, setPaused] = useState(getGlobalState().paused);\r\n    const [displayedTime, setDisplayedTime] = useState(0);\r\n    const [player, setPlayer] = useState(getCharacter(0));\r\n    const manualSpeedUpActive = useRef(false);\r\n    function togglePause() {\r\n        getGlobalState().paused = !getGlobalState().paused;\r\n        setPaused(getGlobalState().paused);\r\n    }\r\n\r\n    useHotkeys(\"p\", () => getGlobalState().paused = !getGlobalState().paused);\r\n\r\n    useEffect(() => {\r\n        let lastFrame;\r\n        function applyAction(action, lastTick) {\r\n            if(lastTick && action.tick && action.tick !== lastTick) {\r\n                debugMessage(`Not consuming an action for tick ${action.tick} on tick ${lastTick}`);\r\n                return;\r\n            }\r\n            pushLogItem(action);\r\n            switch (action.result) {\r\n                case \"combat-end\":\r\n                    if (config.mechanics.artifacts.enabled) {\r\n                        setCurrentAction(Actions[changeCurrentAction(\"looting\")]);\r\n                    } else {\r\n                        setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                    }\r\n                    if(getCharacter(0).isAlive) {\r\n                        setCurrentEncounter(getGlobalState().currentEncounter = null);\r\n                        setEnemy(null);\r\n                    }\r\n                    return;\r\n                    break;\r\n                case \"kill\":\r\n                    const enemy = getCharacter(action.target);\r\n                    if (action.actor === 0 && action.target !== 0) {\r\n                        debugMessage(\"Player killed a non-lesser enemy and gained power.\");\r\n                        const player = getCharacter(0);\r\n                        const powerToGain = evaluateExpression(config.mechanics.xp.gainedFromOtherDemon, {\r\n                            enemy\r\n                        });\r\n                        let multiplier = Object.keys(player.traits).reduce((multiplier, trait) => {\r\n                            const traitMultiplier = evaluateExpression(_.get(Traits[trait].on_kill, [\"effects\", \"power_gain_modifier\"], 0),\r\n                                {\r\n                                    rank: Decimal(player.traits[trait])\r\n                                });\r\n                            return multiplier.plus(traitMultiplier);\r\n                        }, Decimal(1))\r\n                        const powerGained = player.gainPower(powerToGain.times(multiplier).floor());\r\n                        pushLogItem(generateLogItem({\r\n                            result: \"gainedPower\",\r\n                            value: powerGained\r\n                        }));\r\n                        getGlobalState().highestLevelReached = Decimal.max(getGlobalState().highestLevelReached, getCharacter(0).powerLevel);\r\n                    } else if (action.target === 0) {\r\n                        getCharacter(0).currentHp = Decimal(0);\r\n                        setCurrentAction(getGlobalState().currentAction = \"dead\");\r\n                        setPaused(getGlobalState().paused = true);\r\n                    }\r\n                    break;\r\n                case \"hit\":\r\n                case \"miss\":\r\n                    (action.effects || []).forEach(effect => {\r\n                        const targetCharacter = getCharacter(effect.target);\r\n                        switch (effect.event) {\r\n                            case \"damage\":\r\n                                targetCharacter.currentHp = targetCharacter.currentHp.minus(effect.value);\r\n                                if (targetCharacter.currentHp.lt(Decimal(0))) {\r\n                                    targetCharacter.currentHp = Decimal(0);\r\n                                }\r\n                                break;\r\n                            case \"apply_effect\":\r\n                                targetCharacter.addModifier({\r\n                                    effect: effect.effect,\r\n                                    magnitude: effect.value\r\n                                });\r\n                                break;\r\n                        }\r\n                    });\r\n                    break;\r\n                case \"add_statuses\":\r\n                    const characterStatuses = getCharacter(action.target).statuses;\r\n                    characterStatuses[action.status] = action.level;\r\n                    break;\r\n                case \"action_skipped\":\r\n                    break;\r\n                default:\r\n                    throw new Error();\r\n            }\r\n            // Consume action\r\n            getGlobalState().currentEncounter.pendingActions.shift()\r\n            saveGlobalState();\r\n            const nextAction = getGlobalState().currentEncounter.pendingActions[0];\r\n            if(nextAction) {\r\n                applyAction(nextAction, action.tick);\r\n            }\r\n        }\r\n\r\n        function tick(timestamp) {\r\n            if (!lastTime) {\r\n                lastTime = timestamp;\r\n            } else if (!getGlobalState().paused) {\r\n                if(getCharacter(0).isAlive) {\r\n                    if (accruedTime.current >= _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration)) {\r\n                        const player = getCharacter(0);\r\n                        saveGlobalState();\r\n                        accruedTime.current = 0;\r\n                        switch (getGlobalState().currentAction) {\r\n                            case \"exploring\":\r\n                                getCharacter(0).clearStatuses();\r\n                                let proceedingToEncounter = false;\r\n                                if (getCharacter(0).currentHp.lt(getCharacter(0).maximumHp)) {\r\n                                    const encounterChance = evaluateExpression(config.mechanics.combat.randomEncounterChance, {\r\n                                        player\r\n                                    });\r\n                                    const amountToHeal = encounterChance.lte(0) || getCharacter(0).currentHp.plus(getCharacter(0).healing).gt(\r\n                                        getCharacter(0).maximumHp\r\n                                    ) ? getCharacter(0).maximumHp.minus(getCharacter(0).currentHp) : getCharacter(0).healing;\r\n                                    getCharacter(0).currentHp = getCharacter(0).currentHp.plus(amountToHeal);\r\n                                    pushLogItem({\r\n                                        message: `You naturally healed ${amountToHeal} health`,\r\n                                        uuid: v4()\r\n                                    })\r\n                                    const encounterRoll = Math.floor(props.rng.double() * 100) + 1;\r\n                                    debugMessage(`Determining if encounter occurs. Chance ${encounterChance} vs roll ${encounterRoll}.`);\r\n                                    if (encounterChance.gte(encounterRoll)) {\r\n                                        proceedingToEncounter = true;\r\n                                    } else {\r\n                                        if(encounterChance.eq(0)) {\r\n                                            pushLogItem({\r\n                                                message: \"You weak spiritual energy keeps you hidden while you heal.\",\r\n                                                uuid: v4()\r\n                                            });\r\n                                        } else {\r\n                                            pushLogItem({\r\n                                                message: \"You don't find any trouble while you recover.\",\r\n                                                uuid: v4()\r\n                                            });\r\n                                        }\r\n                                    }\r\n                                } else {\r\n                                    proceedingToEncounter = true;\r\n                                }\r\n                                if (proceedingToEncounter) {\r\n                                    getGlobalState().currentEncounter = Regions[getGlobalState().currentRegion].startEncounter(getCharacter(0), props.rng);\r\n                                    setCurrentEncounter(getGlobalState().currentEncounter);\r\n                                    setEnemy(getGlobalState().currentEncounter.enemies[0]);\r\n                                    setCurrentAction(Actions[changeCurrentAction(\"approaching\")]);\r\n                                    getGlobalState().nextAction = getGlobalState().currentEncounter.enemies.reduce((actionSoFar, nextEnemy) => {\r\n                                        if (actionSoFar !== \"fighting\") {\r\n                                            return actionSoFar;\r\n                                        }\r\n\r\n                                        if (player.otherDemonIsLesserDemon(nextEnemy)) {\r\n                                            return \"intimidating\";\r\n                                        } else if (player.otherDemonIsGreaterDemon(nextEnemy)) {\r\n                                            return \"fleeing\";\r\n                                        } else {\r\n                                            return \"fighting\";\r\n                                        }\r\n                                    }, \"fighting\");\r\n                                    setNextAction(getGlobalState().nextAction);\r\n                                    if (getGlobalState().passivePowerIncome.gt(0)) {\r\n                                        const gainedPower = getCharacter(0).gainPower(getGlobalState().passivePowerIncome);\r\n                                        pushLogItem({\r\n                                            message: `Your Bound lesser demons grant you ${gainedPower.toFixed()} power.`,\r\n                                            uuid: v4()\r\n                                        });\r\n                                        getGlobalState().highestLevelReached = Decimal.max(getGlobalState().highestLevelReached, getCharacter(0).powerLevel);\r\n                                    }\r\n\r\n                                    const enemies = getGlobalState().currentEncounter.enemies;\r\n                                    if (player.otherDemonIsGreaterDemon(enemies[0])) {\r\n                                        pushLogItem({\r\n                                            message: `<strong>💀Approaching Greater ${enemies[0].name}.💀</strong>`,\r\n                                            uuid: v4()\r\n                                        });\r\n                                    } else if (player.otherDemonIsLesserDemon(enemies[0])) {\r\n                                        pushLogItem({\r\n                                            message: `<strong>Approaching Lesser ${enemies[0].name}.</strong>`,\r\n                                            uuid: v4()\r\n                                        });\r\n                                    } else {\r\n                                        pushLogItem({\r\n                                            message: `<strong>Approaching ${enemies[0].name}.</strong>`,\r\n                                            uuid: v4()\r\n                                        });\r\n                                    }\r\n                                    saveGlobalState();\r\n                                }\r\n                                break;\r\n                            case \"approaching\": {\r\n                                // Since we're starting a new combat, remove any old, dead characters\r\n                                switch (getGlobalState().nextAction) {\r\n                                    case \"fighting\":\r\n                                        const enemies = getGlobalState().currentEncounter.enemies;\r\n                                        const combatResult = resolveCombat(props.rng, {\r\n                                            parties: [[player], enemies]\r\n                                        });\r\n                                        getGlobalState().currentEncounter.pendingActions = combatResult.rounds;\r\n                                        setEnemy(enemies[0]);\r\n                                        break;\r\n                                }\r\n                                setCurrentAction(Actions[changeCurrentAction(getGlobalState().nextAction)]);\r\n                                setNextAction();\r\n                                const deadCharacters = Object.keys(getGlobalState().characters)\r\n                                    .filter(id => id !== '0' && !getGlobalState().currentEncounter.enemies.find(c => c.id == id));\r\n                                deadCharacters.forEach(id => {\r\n                                    delete getGlobalState().characters[id]\r\n                                });\r\n                                break;\r\n                            }\r\n                            case \"intimidating\": {\r\n                                const enemy = getGlobalState().currentEncounter.enemies[0];\r\n                                const chanceToIntimidate = evaluateExpression(config.encounters.chanceToIntimidateLesser, {\r\n                                    enemy,\r\n                                    player: getCharacter(0)\r\n                                });\r\n                                const roll = Math.floor(props.rng.double() * 100) + 1;\r\n                                if (chanceToIntimidate.gte(roll)) {\r\n                                    const periodicPowerIncreases = evaluateExpression(config.mechanics.xp.gainedFromLesserDemon, {\r\n                                        enemy\r\n                                    });\r\n                                    pushLogItem(generateLogItem({\r\n                                        result: \"intimidated\",\r\n                                        target: enemy.id,\r\n                                        value: periodicPowerIncreases\r\n                                    }));\r\n                                    getGlobalState().passivePowerIncome = getGlobalState().passivePowerIncome.plus(periodicPowerIncreases);\r\n                                } else {\r\n                                    pushLogItem(generateLogItem({\r\n                                        message: `${getCharacter(enemy.id).name} escaped! (You rolled ${roll} vs ${chanceToIntimidate} chance to Bind).`\r\n                                    }));\r\n                                    setCurrentEncounter(getGlobalState().currentEncounter = null);\r\n                                }\r\n                                setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                break;\r\n                            }\r\n                            case \"fleeing\":\r\n                                const enemy = getGlobalState().currentEncounter.enemies[0];\r\n                                const chanceToFlee = evaluateExpression(config.encounters.chanceToEscapeGreater, {\r\n                                    enemy,\r\n                                    player: getCharacter(0)\r\n                                });\r\n                                const roll = Math.floor(props.rng.double() * 100) + 1;\r\n                                if (chanceToFlee.gte(roll)) {\r\n                                    pushLogItem({\r\n                                        result: \"escaped\",\r\n                                        uuid: v4()\r\n                                    });\r\n                                    const powerToGain = evaluateExpression(config.mechanics.xp.gainedFromGreaterDemon, {\r\n                                        $enemy: enemy\r\n                                    });\r\n                                    const powerGained = player.gainPower(powerToGain);\r\n                                    getGlobalState().highestLevelReached = Decimal.max(getGlobalState().highestLevelReached, getCharacter(0).powerLevel);\r\n                                    pushLogItem(generateLogItem({\r\n                                        result: \"gainedPower\",\r\n                                        value: powerGained,\r\n                                    }));\r\n                                    getGlobalState().currentEncounter = null;\r\n                                    setCurrentEncounter(null);\r\n                                    setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                } else {\r\n                                    pushLogItem({\r\n                                        message: `The ${enemy.name} caught you! (Roll ${roll} vs ${chanceToFlee})`,\r\n                                        uuid: v4()\r\n                                    });\r\n                                    const enemies = getGlobalState().currentEncounter.enemies;\r\n                                    const combatResult = resolveCombat(props.rng, {\r\n                                        parties: [[player], enemies]\r\n                                    });\r\n                                    getGlobalState().currentEncounter.pendingActions = combatResult.rounds;\r\n                                    setEnemy(enemies[0]);\r\n                                    setNextAction(Actions[changeCurrentAction(\"fighting\")]);\r\n                                    setCurrentAction(Actions[changeCurrentAction(\"fighting\")]);\r\n                                }\r\n\r\n                                break;\r\n                            case \"fighting\" : {\r\n                                if (getGlobalState().currentEncounter.pendingActions.length) {\r\n                                    const nextAction = getGlobalState().currentEncounter.pendingActions[0];\r\n                                    applyAction(nextAction);\r\n                                    setActionLog([...getGlobalState().actionLog]);\r\n                                } else {\r\n                                    setCurrentAction(Actions[changeCurrentAction(\"fleeing\")]);\r\n                                }\r\n                                break;\r\n                            }\r\n                            case \"looting\":\r\n                                const lootRoll = Math.floor(props.rng.double() * 666);\r\n                                if (lootRoll <= getGlobalState().currentEncounter.encounterLevel) {\r\n\r\n                                }\r\n                                setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                break;\r\n                            case \"reincarnating\":\r\n                                setCurrentEncounter();\r\n                                setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                setActionLog([]);\r\n                                getGlobalState().actionLog = [];\r\n                                break;\r\n                            case \"dead\":\r\n                                setPaused(getGlobalState().paused = true);\r\n                                break;\r\n                            default:\r\n                                if (config.debug) {\r\n                                    throw new Error(`Action ${getGlobalState().currentAction} not supported.`);\r\n                                } else {\r\n                                    setCurrentEncounter();\r\n                                    setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\r\n                                    setActionLog([]);\r\n                                }\r\n                        }\r\n                    }\r\n\r\n                    setDisplayedTime(accruedTime.current);\r\n                    const passedTime = timestamp - lastTime;\r\n                    const adjustedTime = passedTime * (manualSpeedUpActive.current ? getManualSpeedMultiplier() : 1);\r\n                    if(Math.min(accruedTime.current + adjustedTime, _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration)) === 0) {\r\n                        if(accruedTime.current + adjustedTime === 0) {\r\n                            debugMessage(`Timestamp ${timestamp}, last time ${lastTime}`);\r\n                        } else {\r\n                            debugMessage(\"Action duration was 0\");\r\n                        }\r\n\r\n                    }\r\n                    accruedTime.current = Math.min(accruedTime.current + adjustedTime, _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration));\r\n                }\r\n            }\r\n            if(lastTime === timestamp) {\r\n                debugMessage(\"New and previous timestamp were identical\");\r\n            }\r\n            lastTime = timestamp;\r\n            lastFrame = requestAnimationFrame(tick);\r\n            setActionLog([...getGlobalState().actionLog]);\r\n        }\r\n\r\n        console.log(\"Adventuring Page\");\r\n        lastFrame = requestAnimationFrame(tick)\r\n        return ()=> {\r\n            console.log(\"Cancel frame\");\r\n            cancelAnimationFrame(lastFrame);\r\n        }\r\n    }, []);\r\n    return <div className=\"App\" style={styles.root}\r\n                onMouseOver={() => manualSpeedUpActive.current = true}\r\n                onMouseLeave={() => manualSpeedUpActive.current = false}\r\n    >\r\n        <div id=\"background\" style={{\r\n            position: \"absolute\",\r\n            zIndex: \"-10\",\r\n            overflow: \"hidden\",\r\n            height: \"100vh\",\r\n            width: \"100vw\"\r\n        }}>\r\n            <img style={styles.background} src={\"./backgrounds/parallax-demon-woods-bg.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-far-trees.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-mid-trees.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-close-trees.png\"}/>\r\n        </div>\r\n        <PlayerStats player={player} enemy={enemy}/>\r\n        <div style={{display: \"flex\", flex: \"1 0 auto\", flexDirection: \"column\"}}>\r\n            <TopSection character={player}/>\r\n            <BottomSection state={getGlobalState()} actionLog={actionLog}\r\n                           player={player}\r\n                           enemy={enemy}\r\n                           togglePause={togglePause}\r\n                           paused={paused}\r\n                           nextActionName={nextAction}\r\n                           currentAction={currentAction}\r\n                           setNextAction={(newAction) => {\r\n                               setNextAction(getGlobalState().nextAction = newAction);\r\n                           }}\r\n                           actionTime={displayedTime}\r\n                           startManualSpeedup={props.startManualSpeedup}\r\n                           stopManualSpeedup={props.stopManualSpeedup}\r\n                           togglePause={p => setPaused(p)}\r\n            />\r\n        </div>\r\n        <EnemySidebar player={player} enemy={enemy}/>\r\n\r\n    </div>\r\n}\r\n\r\nfunction wrapLogItem(item) {\r\n    return {\r\n        uuid: v4(),\r\n        ...item\r\n    }\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useState} from \"react\";\r\nimport { Decimal } from \"decimal.js\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {Creatures} from \"../data/creatures\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddCircleOutlineRoundedIcon from '@material-ui/icons/AddCircleOutlineRounded';\r\nimport RemoveCircleOutlineRoundedIcon from '@material-ui/icons/RemoveCircleOutlineRounded';\r\nimport {getCharacter, getGlobalState, resetDebug, saveKey} from \"../engine\";\r\nimport * as _ from \"lodash\";\r\nimport {Regions} from \"../data/Regions\";\r\nimport {config} from \"../config\";\r\n\r\nconst styles = {\r\n    root: {\r\n        position: \"absolute\",\r\n        minHeight: \"100vh\",\r\n        bottom: 0,\r\n        left: 0,\r\n        padding: \"20px\"\r\n    }\r\n}\r\n\r\nexport default function DebugUi(props) {\r\n    const [creatures, setCreatures] = useState(_.get(getGlobalState(), [\"debug\", \"creatures\"]));\r\n    const [regions, setRegions] = useState(_.get(getGlobalState(), [\"debug\", \"regions\"]));\r\n    const [minLevel, setMinLevel] = useState(_.get(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale).lt(Decimal(1)) ?\r\n        Decimal(1) : getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale)));\r\n    const [maxLevel, setMaxLevel] = useState(_.get(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale).gt(100) ?\r\n        Decimal(100) : getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale * 2)));\r\n    const [manualSpeedMultiplier, setManualSpeedMultiplier] = useState(_.get(getGlobalState(), [\"debug\", \"manualSpeedMultiplier\"],\r\n        getGlobalState().manualSpeedMultiplier));\r\n    const [playerAbsorbedPower, setPlayerAbsorbedPower] = useState(getCharacter(0).absorbedPower);\r\n\r\n    function reset() {\r\n        resetDebug();\r\n        setCreatures(_.get(getGlobalState(), [\"debug\", \"creatures\"]));\r\n        setRegions(_.get(getGlobalState(), [\"debug\", \"regions\"]));\r\n        setMinLevel(getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale).lt(Decimal(1)) ?\r\n            Decimal(1) : getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale));\r\n        setMaxLevel(getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale).gt(100) ?\r\n            Decimal(100) : getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale * 2));\r\n    }\r\n\r\n    function clearSave() {\r\n        window.localStorage.removeItem(saveKey);\r\n        alert(\"local storage cleared\");\r\n    }\r\n\r\n    return <Paper style={styles.root} disabled={true}>\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <h3>Debug Menu</h3>\r\n            </Grid>\r\n            <Grid item container xs={12}>\r\n                <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={reset}>\r\n                        Reset Debug Settings\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={clearSave}>\r\n                        Clear Save\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid item xs={3}>\r\n                    <TextField type=\"number\" value={manualSpeedMultiplier} onChange={e => {\r\n                        const newValue = Number.parseInt(e.target.value);\r\n                        _.set(getGlobalState(), [\"debug\", \"manualSpeedMultiplier\"], newValue);\r\n                        setManualSpeedMultiplier(newValue);\r\n                    }} label=\"Manual speed multiplier\"/>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TextField type=\"number\" min=\"0\" value={playerAbsorbedPower} onChange={e => {\r\n                        e.target.value = e.target.value === \"\" ? 0 : e.target.value;\r\n                        const newValue = Decimal(Number.parseInt(e.target.value));\r\n                        if(newValue.lt(0)) {\r\n                            getCharacter(0).absorbedPower = Decimal(0);\r\n                            setPlayerAbsorbedPower(Decimal(0));\r\n                        } else {\r\n                            getCharacter(0).absorbedPower = newValue;\r\n                            setPlayerAbsorbedPower(newValue);\r\n                        }\r\n\r\n                    }} label=\"Current player absorbed power\"/>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <h3>Creatures</h3>\r\n            </Grid>\r\n            <Grid container item xs={12}>\r\n                {Object.keys(Creatures).map(id => {\r\n                    const enabled = creatures[id] !== false && _.get(creatures, [id, \"enabled\"]) !== false;\r\n                    return <Grid item xs={3} style={{height: \"100%\"}}>\r\n                        <Button variant=\"contained\" color={enabled ? \"default\" : \"secondary\"}\r\n                                style={{width: \"100%\", height: \"100%\"}}\r\n                                onClick={() => {\r\n                                    _.set(getGlobalState(), [\"debug\", \"creatures\", id, \"enabled\"], !enabled);\r\n                                    setCreatures({...creatures, [id]: {enabled: !enabled}})\r\n                                }}\r\n                        >\r\n                            <img src={`./monsters/${Creatures[id].texture}`}/>\r\n                            {Creatures[id].name}\r\n                        </Button>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid item style={{textAlign: \"center\"}}>\r\n                <h4>Regions</h4>\r\n            </Grid>\r\n            <Grid container item xs={12}>\r\n                {Object.keys(Regions).map(regionId => {\r\n                    return <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                        <h4>{Regions[regionId].name}</h4>\r\n                        <Grid item container xs={12}>\r\n                            {Object.keys(Regions[regionId].encounters).map(encounterId => {\r\n                                const enabled = _.get(regions, [regionId, \"encounters\", encounterId, \"enabled\"]) !== false;\r\n                                return <Grid item xs={3}>\r\n                                    <Button variant=\"contained\" color={enabled ? \"default\" : \"secondary\"}\r\n                                            style={{width: \"100%\", height: \"100%\"}}\r\n                                            onClick={() => {\r\n                                                _.set(getGlobalState(), [\"debug\", \"regions\", regionId, \"encounters\", encounterId, \"enabled\"], !enabled);\r\n                                                setRegions({\r\n                                                    ...regions, [regionId]: _.set(regions[regionId],\r\n                                                        [\"encounters\", encounterId, \"enabled\"],\r\n                                                        !enabled\r\n                                                    )\r\n                                                })\r\n                                            }}\r\n                                    >\r\n                                        {Regions[regionId].encounters[encounterId].description}\r\n                                    </Button>\r\n                                </Grid>;\r\n                            })}\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                    <h4>Encounter rules</h4>\r\n                </Grid>\r\n                <Grid container item xs={3}>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            setMinLevel(minLevel.plus(1));\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], minLevel.plus(1));\r\n                            if (minLevel.plus(1).gt(maxLevel)) {\r\n                                setMaxLevel(minLevel.plus(1));\r\n                                _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], minLevel.plus(1));\r\n                            }\r\n                        }}>\r\n                            <AddCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        Minimum level {minLevel.toFixed()}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], minLevel.minus(1));\r\n                            setMinLevel(minLevel.minus(1));\r\n                        }}>\r\n                            <RemoveCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container item xs={3}>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            setMaxLevel(maxLevel.plus(1));\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], maxLevel.plus(1));\r\n                        }}>\r\n                            <AddCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        Maximum level {maxLevel.toFixed()}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], maxLevel.minus(1));\r\n                            setMaxLevel(maxLevel.minus(1));\r\n                            if (maxLevel.minus(1).lt(minLevel)) {\r\n                                setMinLevel(maxLevel.minus(1));\r\n                                _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], maxLevel.minus(1));\r\n                            }\r\n                        }}>\r\n                            <RemoveCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useEffect} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport {getGlobalState} from \"../../engine\";\r\nconst pkg = require(\"../../../package.json\");\r\nconst changelog = require(\"../../changelog.json\");\r\n\r\nexport default function SplashPage(props) {\r\n    useEffect(() => {\r\n        getGlobalState().paused = true;\r\n    })\r\n    const history = useHistory();\r\n    return <Paper>\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                Conquest of Hell Ver. {pkg.version} Save Compatibility NOT Guaranteed\r\n            </Grid>\r\n            <Grid item container>\r\n                {Object.keys(changelog).map(version => {\r\n                    return <Grid key={version} item container xs={12}>\r\n                        <Grid item xs={12}>\r\n                            {version}\r\n                        </Grid>\r\n                        <ul>\r\n                        {changelog[version].changes.map(entry => {\r\n                            return <li key={entry}>\r\n                                {entry}\r\n                            </li>\r\n                        })}\r\n                        </ul>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <Button onClick={() => {\r\n                    if(getGlobalState().currentAction === null) {\r\n                        history.push(\"/reincarnating\")\r\n                    } else {\r\n                        getGlobalState().paused = false;\r\n                        history.push(\"/adventuring\")\r\n                    }\r\n                }}>\r\n                    Start\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>\r\n}","import './App.css';\nimport {v4} from \"node-uuid\";\nimport * as _ from \"lodash\";\nimport React, {useEffect, useRef, useState} from \"react\";\nimport 'react-circular-progressbar/dist/styles.css';\nimport {Regions} from \"./data/Regions\";\nimport {Actions} from \"./data/Actions\";\nimport {Decimal} from \"decimal.js\";\nimport {\n    evaluateExpression,\n    getCharacter,\n    getGlobalState, getManualSpeedMultiplier,\n    loadGlobalState, reincarnateAs,\n    saveGlobalState, unpause\n} from \"./engine\";\nimport * as seedrandom from \"seedrandom\";\nimport {config} from \"./config\";\nimport {MemoryRouter, Route, Switch} from \"react-router-dom\";\nimport ReincarnationSelectionPage from \"./components/scene/ReincarnationSelectionPage\";\nimport AdventuringPage from \"./components/scene/AdventuringPage\";\nimport DebugUi from \"./components/DebugUi\";\nimport {useHotkeys} from \"react-hotkeys-hook\";\nimport {debugMessage} from \"./debugging\";\nimport SplashPage from \"./components/scene/SplashPage\";\nimport {resolveCombat} from \"./engine/combat\";\n\nloadGlobalState();\n\nconst rng = seedrandom();\n\nfunction App() {\n    const [debugUiEnabled, setDebugUiEnabled] = useState(false);\n\n    useHotkeys(\"`\", () => {\n        setDebugUiEnabled(enabled => {\n            if (config.debug) {\n                if (!enabled) {\n                    getGlobalState().paused = true;\n                }\n                saveGlobalState();\n                return !enabled\n            } else {\n                return false;\n            }\n        });\n    });\n\n    return (\n        <MemoryRouter initialEntries={[\n            getGlobalState().currentAction === \"reincarnating\" ? \"/reincarnating\" : (\n                getGlobalState().currentAction === \"adventuring\" ? \"/adventuring\" : \"/\")\n        ]} basename=\"%PUBLIC_URL%\">\n            <Switch>\n                <Route path=\"/\" exact>\n                    <SplashPage/>\n                </Route>\n                <Route path=\"/reincarnating\" exact>\n                    <ReincarnationSelectionPage reincarnate={(monster, attributes) => {\n                        reincarnateAs(monster, attributes);\n                        unpause();\n                    }}/>\n                </Route>\n                <Route path=\"/adventuring\" exact>\n                    <AdventuringPage\n                                     rng={rng}\n                    />\n                </Route>\n            </Switch>\n            {debugUiEnabled && <DebugUi/>}\n        </MemoryRouter>\n    );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}