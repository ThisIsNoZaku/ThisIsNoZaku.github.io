{"version":3,"sources":["data/creatures.js","data/Traits.js","config.js","debugging.js","character.js","engine/CharacterCombatState.js","engine/index.js","combatResult.js","data/Regions.js","data/Actions.js","components/scene/ReincarnationSelectionPage.js","components/charactersheet/PowerLevelDisplay.js","components/charactersheet/CharacterAttributes.js","components/charactersheet/CharacterTraits.js","components/CharacterSheet.js","components/PlayerStats.js","components/TopSection.js","components/BottomSection.js","components/EnemySidebar.js","components/scene/AdventuringPage.js","components/DebugUi.js","components/scene/SplashPage.js","App.js","reportWebVitals.js","index.js"],"names":["Creatures","bloodthirstyKnight","name","traits","appearance","texture","description","rapaciousHighwayman","enabled","condemnedSlasher","crushingSnake","skitteringHorror","deadlyHornet","assertCreatureExists","id","Error","Traits","bloodrage","icon","_","on_hitting","conditions","health_percentage","target","below","effects","damage_modifier","percent","cupidity","on_intimidate","chance","steal_item_chance","murderousFrenzy","add_modifier","speed","duration","rounds","inescapableGrasp","terrifyingSkitter","on_combat_start","stunned","piercingStrike","defense_modifier","getTrait","traitId","console","log","process","REACT_APP_DEBUG_MODE","config","manualSpeedup","multiplier","artifacts","REACT_APP_FEATURE_ARTIFACTS_ENABLED","actionLog","maxSize","REACT_APP_MAX_ACTIONLOG_SIZE","encounters","lesserLevelScale","greaterLevelScale","characters","player","attributesPerLevel","mechanics","maxLevel","attack","baseAttribute","scale","defense","evasion","attackDamage","pointsPerLevel","traitRank","fatigue","penaltyPerPoint","hp","healingPerLevel","attributes","brutality","label","globalScaling","cunning","deceit","madness","combat","attributeDamageModifier","defaultMinimumDamageMultiplier","defaultMedianDamageMultiplier","defaultMaximumDamageMultiplier","baseMinimumDamageWeight","baseMedianDamageWeight","baseMaximumDamageWeight","debug","debugMessage","apply","arguments","Character","props","this","_isPc","isPc","_name","_absorbedPower","Big","absorbedPower","_currentHp","maximumHp","_attributes","Attributes","_combat","CombatStats","_traits","Object","keys","reduce","transformed","next","_appearance","_modifiers","modifiers","newAppearance","newTraits","other","powerLevel","gte","plus","lte","minus","powerGained","getLevelForPower","gt","getPowerNeededForLevel","forEach","trait","modifier","push","newHealth","lt","currentHp","mul","times","value","_brutality","_cunning","_deceit","_madness","character","characterPowerLevel","minimumDamageMultiplier","attributeModifier","round","CharacterCombatState","party","_speed","_fatigue","lastActed","baseSpeed","currentValue","canAct","nextModifier","undefined","saveKey","require","Package","makeAttackRoll","actingCharacter","combatState","rng","attackAccuracy","targetEvasion","getCharacter","combatantCombatStats","constructor","toFixed","roll","Math","floor","double","rawRoll","total","globalState","loadGlobalState","getGlobalState","saveGlobalState","window","localStorage","setItem","JSON","stringify","state","loaded","getItem","parse","stateReviver","creatures","regions","passivePowerIncome","unlockedMonsters","paused","currentAction","nextAction","startingPower","startingTraits","currentEncounter","manualSpeedMultiplier","currentRegion","exploration","explorationTime","approachTime","combatTime","lootingTime","recoveryTime","fleeingTime","intimidateTime","reincarnationTime","0","statuses","items","medianDamageMultiplier","maximumDamageMultiplier","tutorials","assertCharacterExists","nextMonsterId","getSpriteForCreature","resolveHit","tick","combatResult","targetCharacter","damageToInflict","damageRoll","minimumDamage","medianDamage","maximumDamage","attackResult","baseDamage","attackerDamageMultiplier","targetDefenseMultiplier","otherEffects","applyTrait","finalDamage","div","map","effect","event","source","join","attackingCharacterId","targetCharacterId","damageDone","uuid","v4","result","actor","generateHitCombatResult","resolveMiss","generateMissCombatResult","resolveSkippedAction","actingCharacterId","generateSkipActionResult","sourceCharacter","rank","rankModifier","every","condition","targetPercent","targetCurrentHealth","targetMaxHealth","currentHealthPercent","conditionMet","chanceToTrigger","evaluateExpression","$rank","traitEffect","percentDamageModifier","newMultiplier","defenseModifier","modifierToAddDefinition","effectType","effectTarget","roundDuration","ability","filter","combatantId","existingEffect","find","expressionCache","expression","context","Function","call","level","pow","powerPoints","eq","sqrt","key","all","parsed","Number","parseFloat","isNaN","Region","available","background","minimumLevel","candidateMaxLevel","maximumLevel","encounterLevelModifier","toNumber","encounterLevel","max","encounterDef","region","possibleEncounters","encounterId","encounterEnabled","debugNotDisabled","randomKey","random","length","chooseRandomEncounter","pendingActions","enemies","flatMap","enemyDef","count","i","nextId","generateCreature","Regions","forest","type","far","mid","close","caves","mountains","desert","Actions","exploring","approaching","looting","fleeing","fighting","reincarnating","recovering","intimidating","ReincarnationSelectionPage","useRef","history","useHistory","currentCreature","useState","substring","setAttributes","newStartingPower","current","spendableBonusPoints","useEffect","Grid","container","item","xs","style","textAlign","concat","currentStartingRank","combinedLevel","Tooltip","title","dangerouslySetInnerHTML","__html","src","attribute","Button","disabled","values","x","onClick","alignItems","justify","creatureEnabled","debugEnabled","variant","height","width","reincarnate","PowerLevelDisplay","powerLevelDisplay","useMemo","Fragment","CharacterAttributes","Help","CharacterTraits","CharacterSheet","spriteSrc","combinedHitWeights","minimumDamageWeight","medianDamageWeight","maximumDamageWeight","styles","root","backgroundColor","PlayerStats","Paper","elevation","display","flex","buttons","TopSection","reincarnateEnabled","color","justifyContent","flexDirection","actions","alignSelf","action","maxHeight","actionProgress","overflowY","BottomSection","onMouseEnter","startManualSpeedup","onMouseLeave","stopManualSpeedup","togglePause","actionButton","actionTime","message","direction","describeEffect","reason","printActionItem","mod","percentModifier","text","setNextAction","nextActionName","EnemySidebar","overflow","image","position","left","AdventuringPage","className","zIndex","newAction","minHeight","bottom","padding","DebugUi","setCreatures","setRegions","minLevel","setMinLevel","setMaxLevel","setManualSpeedMultiplier","playerAbsorbedPower","setPlayerAbsorbedPower","removeItem","alert","TextField","onChange","e","newValue","parseInt","min","regionId","pkg","changelog","SplashPage","version","entry","lastTime","seedrandom","changeCurrentAction","pushLogItem","pop","unshift","App","setCurrentEncounter","accruedTime","manualSpeedUpActive","displayedTime","setDisplayedTime","setCurrentAction","setActionLog","debugUiEnabled","setDebugUiEnabled","setPaused","useHotkeys","applyAction","isDamaged","shift","enemy","enemyIsLesserDemon","powerToGain","gainPower","wrapLogItem","addModifier","magnitude","requestAnimationFrame","timestamp","startEncounter","actionSoFar","nextEnemy","otherDemonIsLesserDemon","otherDemonIsGreaterDemon","definition","listeners","winner","notifyListener","listener","a","combatants","parties","partyIndex","characterIndex","combatant","otherCombatant","resolveRound","sort","b","initiativeCount","wrapped","isAlive","alive","characterSpeed","acting","enemyParty","livingEnemies","attackRollResult","playerPartyDead","enemyPartyDead","setTimeout","onRoundResolved","getPrevious","resolveCombat","lastRound","c","chanceToIntimidate","periodicPowerIncreases","amountToHeal","healing","adjustedTime","debugMultiplier","baseMultiplier","getManualSpeedMultiplier","initialEntries","basename","path","exact","monster","monsterId","newAttributes","currentDemon","options","m","reincarnateAs","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbe6b951.chunk.js","sourcesContent":["export const Creatures  = {\r\n    bloodthirstyKnight: {\r\n        name: \"Bloodthirsty Knight\",\r\n        traits: [\"bloodrage\"],\r\n        appearance: \"bloodthirstyKnight\",\r\n        texture: \"01_warrior.png\",\r\n        description: \"A ruthless warrior who delighted in slaughtering whoever they encounter on the battlefield.\",\r\n    },\r\n    rapaciousHighwayman: {\r\n        name: \"Rapacious Highwayman\",\r\n        traits: [\"cupidity\"],\r\n        enabled: false,\r\n        appearance: \"rapaciousHighwayman\",\r\n        texture: \"02_hunter.png\",\r\n        description: \"A thief who stole from whomever he could get away with, from wealthy merchants to starving vagrants.\",\r\n    },\r\n    condemnedSlasher: {\r\n        name: \"Condemned Slasher\",\r\n        traits: [\"murderousFrenzy\"],\r\n        appearance: \"condemnedSlasher\",\r\n        texture: \"03_rogue.png\",\r\n        description: \"A madman who gained exquisite pleasure from seeing how many cuts could be made in a victim's body before they died.\",\r\n    },\r\n    crushingSnake: {\r\n        name: \"Crushing Snake\",\r\n        traits: [\"inescapableGrasp\"],\r\n        appearance: \"crushingSnake\",\r\n        texture: \"06_snake_01.png\",\r\n        description: \"A monstrous reptile which\",\r\n    },\r\n    skitteringHorror: {\r\n        name: \"Skittering Horror\",\r\n        traits: [\"terrifyingSkitter\"],\r\n        appearance: \"skitteringHorror\",\r\n        texture: \"10_spider.png\",\r\n        description: \"A massive spider that enjoys stalking its prey, frightening it by the sickening skittering of it's arachnid legs.\"\r\n    },\r\n    deadlyHornet: {\r\n        name: \"Deadly Hornet\",\r\n        traits: [\"piercingStrike\"],\r\n        appearance: \"deadlyHornet\",\r\n        texture: \"12_wasp.png\",\r\n        description: \"An insect whose stinger is able to pierce even metal protection.\"\r\n    }\r\n}\r\n\r\nexport function assertCreatureExists(id) {\r\n    if(!Creatures[id]) {\r\n        throw new Error(`No creature with id ${id} is defined`);\r\n    }\r\n}","import * as _ from \"lodash\";\r\n// FIXME: Implement validation\r\nexport const Traits = {\r\n    bloodrage: {\r\n        name: \"Blood Rage\",\r\n        icon: \"icons/icons-139.png\",\r\n        description: _.template(\"This demon's unquenchable thirst for blood gives a <span style='color: red'>${rank.times(10)}%</span> bonus to Damage against enemies with <span style='color: red'>50% or less</span> health.\"),\r\n        on_hitting: {\r\n            conditions : {\r\n                health_percentage: {\r\n                    target: \"target\",\r\n                    below: 50\r\n                }\r\n            },\r\n            effects: {\r\n                damage_modifier: {\r\n                    percent: \"$rank.times(10)\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    cupidity: {\r\n        name: \"Cupidity\",\r\n        icon: \"icons/icons-2503.png\",\r\n        description: _.template(\"When this demon successfully Intimidates another demon, it gains a <span style='color: red'>${rank}%</span> chance to seize the intimidated demon's Artifacts as though it were killed.\"),\r\n        on_intimidate: {\r\n            conditions: {\r\n                chance: \"$rank\"\r\n            },\r\n            effects: {\r\n                steal_item_chance: {\r\n                    target: \"enemies\"\r\n                }\r\n            }\r\n        }\r\n    },\r\n    murderousFrenzy: {\r\n        name: \"Murderous Frenzy\",\r\n        icon: \"icons/icons-118.png\",\r\n        description: _.template(\"After hitting an enemy with an attack this Demon frenzies, gaining a <span style='color: orangered'>${rank}%</span> bonus to <span style='color: lightgreen'>Attack Speed</span> for 2 rounds.\"),\r\n        on_hitting: {\r\n            effects: {\r\n                add_modifier: {\r\n                    speed: {\r\n                        target: \"attacker\",\r\n                        percent: \"$rank\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: 2\r\n            }\r\n        }\r\n    },\r\n    inescapableGrasp: {\r\n        name: \"Inescapable Grasp\",\r\n        icon: \"icons/icons-2221.png\",\r\n        description: _.template(\"You bind your victims when you strike, causing a <span style='color: orangered'>${rank}%</span> penalty to their <span style='color: lightgreen'>Action Speed</span> for 5 rounds.\"),\r\n        on_hitting: {\r\n            effects: {\r\n                add_modifier: {\r\n                    speed: {\r\n                        target: \"attacked\",\r\n                        percent: \"$rank.times(-1)\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: 5\r\n            }\r\n        }\r\n    },\r\n    terrifyingSkitter: {\r\n        name: \"Terrifying Skitter\",\r\n        icon: \"icons/icons-2260.png\",\r\n        description: _.template(\"The sickening sound of your feet on the ground unnerves even other demons, giving a <span style='color: orangered'>75%</span> chance to make the enemy <span style='color: violet'>Terrified</span> for <span style='color: lightblue'>${rank.div(10).round(0, 0).plus(1).toFixed()}</span> round(s), stunning them.\"),\r\n        on_combat_start: {\r\n            conditions: {\r\n                chance: 50\r\n            },\r\n            effects: {\r\n                add_modifier: {\r\n                    stunned: {\r\n                        target: \"all_enemies\"\r\n                    }\r\n                }\r\n            },\r\n            duration: {\r\n                rounds: \"$rank.div(10).round(0, 0).plus(1)\"\r\n            }\r\n        }\r\n    },\r\n    piercingStrike: {\r\n        name: \"Piercing Strike\",\r\n        icon: \"icons/icons-113.png\",\r\n        description: _.template(\"Your relentless attacks are designed to get around the enemy's defenses. Against your attacks the enemy's <span style='color: lightgreen'>Defense</span> is reduced by <span style='color: orangered'>${rank}%</span>\"),\r\n        on_hitting: {\r\n            effects: {\r\n                defense_modifier: {\r\n                    percent: \"$rank.times(-1)\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getTrait(traitId) {\r\n    return Traits[traitId];\r\n}","import * as _ from \"lodash\";\r\nconsole.log(process.env.REACT_APP_DEBUG_MODE, typeof process.env.REACT_APP_DEBUG_MODE);\r\n\r\nexport const config = {\r\n    manualSpeedup: {\r\n        enabled: true,\r\n        multiplier: 2\r\n    },\r\n    artifacts: {\r\n        enabled: process.env.REACT_APP_FEATURE_ARTIFACTS_ENABLED || false\r\n    },\r\n    actionLog: {\r\n        maxSize:  process.env.REACT_APP_MAX_ACTIONLOG_SIZE || 20,\r\n    },\r\n    encounters: {\r\n        lesserLevelScale: 2, // A demon is \"lesser\" than another when its level is this much lower.\r\n        greaterLevelScale: 1 // A demon is \"greater\" than another when its level is this much higher.\r\n    },\r\n    characters: {\r\n        player: {\r\n            attributesPerLevel: 2\r\n        }\r\n    },\r\n    mechanics: {\r\n        maxLevel: 100,\r\n        attack: { // Determines how attack rolls work\r\n            baseAttribute: \"deceit\",\r\n            scale: 2\r\n        },\r\n        defense: {\r\n            baseAttribute: \"brutality\",\r\n            scale: 1\r\n        },\r\n        evasion: {\r\n            baseAttribute: \"cunning\",\r\n            scale: 2\r\n        },\r\n        attackDamage: {\r\n            pointsPerLevel: 5,\r\n            baseAttribute: \"brutality\",\r\n            scale: 2\r\n        },\r\n        traitRank: {\r\n            baseAttribute: \"madness\",\r\n            scale: 2\r\n        },\r\n        fatigue: {\r\n            penaltyPerPoint: 2\r\n        },\r\n        hp: {\r\n            pointsPerLevel: 25,\r\n            healingPerLevel: 25\r\n        }\r\n    },\r\n    attributes: {\r\n        brutality: {\r\n            label: \"Brutality\",\r\n            globalScaling: 1,\r\n            description: _.template(\"Brutality is how savage and ruthless a Demon is. It gives a ${2 * rank}% bonus to attack damage, defense and intimidation checks.\"),\r\n            icon: \"icons/icons-92.png\"\r\n        },\r\n        cunning: {\r\n            label: \"Cunning\",\r\n            globalScaling: 1,\r\n            description: _.template(\"Cunning is how quick thinking a Demon is. It gives a ${2 * rank}% bonus to Evasion, and non-combat encounters.\"),\r\n            icon: \"icons/icons-24.png\"\r\n        },\r\n        deceit: {\r\n            label: \"Deceit\",\r\n            globalScaling: 1,\r\n            description: _.template(\"Deceit is how underhanded and manipulative a Demon is. It gives a ${2 * rank}% bonus to Accuracy and social encounters.\"),\r\n            icon: \"icons/icons-17.png\"\r\n        },\r\n        madness: {\r\n            label: \"Madness\",\r\n            globalScaling: 1,\r\n            description: _.template(\"Madness is how disconnected from the limits of reality the Demon is. It gives a ${5 * rank}% bonus to the effect of wielded Artifacts and the effects of Traits.\"),\r\n            icon: \"icons/icons-124.png\"\r\n        }\r\n    },\r\n    combat: {\r\n        attributeDamageModifier: .02,\r\n        defaultMinimumDamageMultiplier: .5,\r\n        defaultMedianDamageMultiplier: 1,\r\n        defaultMaximumDamageMultiplier: 1.5,\r\n        baseMinimumDamageWeight: 20,\r\n        baseMedianDamageWeight: 60,\r\n        baseMaximumDamageWeight: 20\r\n    },\r\n    debug: process.env.REACT_APP_DEBUG_MODE === \"true\"\r\n}","import {config} from \"./config\";\r\n\r\nexport function debugMessage() {\r\n    if(config.debug) {\r\n        console.debug.apply(null, arguments);\r\n    }\r\n}","import {config} from \"./config\";\r\nimport {Big} from \"big.js\";\r\nimport {getLevelForPower, getPowerNeededForLevel} from \"./engine\";\r\nimport {Creatures} from \"./data/creatures\";\r\n\r\nexport class Character {\r\n    constructor(props) {\r\n        this._isPc = props.isPc || props._isPc;\r\n        this.id = props.id;\r\n        this._name = props.name || props._name;\r\n        this._absorbedPower = Big(props.absorbedPower || props._absorbedPower || 0);\r\n        this._currentHp = Big(props._currentHp || this.maximumHp);\r\n        this._attributes = new Attributes(props.attributes || props._attributes);\r\n        this._combat = new CombatStats(props.combat || props._combat, this);\r\n        this._traits = Object.keys(props.traits || props._traits).reduce((transformed, next) => {\r\n            transformed[next] = Big((props.traits || props._traits)[next]);\r\n            return transformed;\r\n        }, {});\r\n        this._appearance = props.appearance || props._appearance;\r\n        this._modifiers = props.modifiers || props._modifiers || [];\r\n    }\r\n\r\n    get isPc(){\r\n        return this._isPc;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get powerLevel() {\r\n        return getLevelForPower(this._absorbedPower);\r\n    }\r\n\r\n    get currentHp() {\r\n        return this._currentHp;\r\n    }\r\n\r\n    set currentHp(newHealth) {\r\n        if(this.maximumHp.lt(newHealth)) {\r\n            this._currentHp = this.maximumHp;\r\n        } else {\r\n            this._currentHp = newHealth;\r\n        }\r\n    }\r\n\r\n    get alive() {\r\n        return this.currentHp > 0;\r\n    }\r\n\r\n    get maximumHp() {\r\n        return this.powerLevel\r\n            .mul(config.mechanics.hp.pointsPerLevel)\r\n            .plus(this._isPc ? 5 : 0);\r\n    }\r\n\r\n    get attributes() {\r\n        return this._attributes;\r\n    }\r\n\r\n    get combat() {\r\n        return this._combat;\r\n    }\r\n\r\n    get traits() {\r\n        return this._traits;\r\n    }\r\n\r\n    set traits(newTraits) {\r\n        this._traits = newTraits;\r\n    }\r\n\r\n    get appearance() {\r\n        return this._appearance;\r\n    }\r\n\r\n    reincarnate(newAppearance, newTraits) {\r\n        this._appearance = newAppearance;\r\n        this._traits = newTraits;\r\n    }\r\n\r\n    otherDemonIsGreaterDemon(other) {\r\n        return other.powerLevel.gte(this.powerLevel.plus(config.encounters.greaterLevelScale));\r\n    }\r\n\r\n    otherDemonIsLesserDemon(other) {\r\n        return other.powerLevel.lte(this.powerLevel.minus(config.encounters.lesserLevelScale));\r\n    }\r\n\r\n    gainPower(powerGained) {\r\n        this._absorbedPower = this._absorbedPower.plus(powerGained);\r\n        if(getLevelForPower(this._absorbedPower).gt(config.mechanics.maxLevel)) {\r\n            this._absorbedPower = getPowerNeededForLevel(config.mechanics.maxLevel);\r\n        }\r\n        Creatures[this.appearance].traits.forEach(trait => {\r\n            this._traits[trait] = getLevelForPower(this._absorbedPower);\r\n        });\r\n    }\r\n\r\n    get healing() {\r\n        return Big(this.powerLevel.times(config.mechanics.hp.healingPerLevel));\r\n    }\r\n\r\n    get absorbedPower() {\r\n        return this._absorbedPower;\r\n    }\r\n\r\n    set absorbedPower(value){\r\n        this._absorbedPower = value;\r\n        if(getLevelForPower(this._absorbedPower).gt(config.mechanics.maxLevel)) {\r\n            this._absorbedPower = getPowerNeededForLevel(config.mechanics.maxLevel);\r\n        }\r\n        if(this.appearance) {\r\n            Creatures[this.appearance].traits.forEach(trait => {\r\n                this._traits[trait] = getLevelForPower(this._absorbedPower);\r\n            });\r\n        }\r\n    }\r\n\r\n    get speed() {\r\n        return Big(100);\r\n    }\r\n\r\n    addModifier(modifier) {\r\n        this._modifiers.push(modifier);\r\n    }\r\n\r\n    get modifiers() {\r\n        return this._modifiers;\r\n    }\r\n}\r\n\r\nclass Attributes {\r\n    constructor(attributes) {\r\n        this._brutality = attributes.brutality || attributes._brutality || 0;\r\n        this._cunning = attributes.cunning || attributes._cunning || 0;\r\n        this._deceit = attributes.deceit || attributes._deceit || 0;\r\n        this._madness = attributes.madness || attributes._madness || 0;\r\n    }\r\n\r\n    get brutality() {\r\n        return this._brutality;\r\n    }\r\n\r\n    get cunning() {\r\n        return this._cunning;\r\n    }\r\n\r\n    get deceit() {\r\n        return this._deceit;\r\n    }\r\n\r\n    get madness() {\r\n        return this._madness;\r\n    }\r\n}\r\n\r\nclass CombatStats {\r\n    constructor(props, character) {\r\n        this.character = function() {\r\n            return character;\r\n        }\r\n        this.fatigue = 0;\r\n    }\r\n\r\n    get minimumDamageWeight() {\r\n        return Big(config.combat.baseMinimumDamageWeight);\r\n    }\r\n\r\n    get medianDamageWeight() {\r\n        return Big(config.combat.baseMedianDamageWeight);\r\n    }\r\n\r\n    get maximumDamageWeight() {\r\n        return Big(config.combat.baseMaximumDamageWeight);\r\n    }\r\n\r\n    get minimumDamage() {\r\n        const characterPowerLevel = this.character().powerLevel;\r\n        const minimumDamageMultiplier = config.combat.defaultMinimumDamageMultiplier;\r\n        const attributeModifier = this.character().attributes.brutality * config.combat.attributeDamageModifier;\r\n        return characterPowerLevel\r\n            .times(config.mechanics.attackDamage.pointsPerLevel)\r\n            .times(minimumDamageMultiplier)\r\n            .times(1 + attributeModifier).round(0, 3);\r\n    }\r\n\r\n    get medianDamage() {\r\n        const characterPowerLevel = this.character().powerLevel;\r\n        const minimumDamageMultiplier = config.combat.defaultMedianDamageMultiplier;\r\n        const attributeModifier = this.character().attributes.brutality * config.combat.attributeDamageModifier;\r\n        return characterPowerLevel\r\n            .times(config.mechanics.attackDamage.pointsPerLevel)\r\n            .times(minimumDamageMultiplier)\r\n            .times(1 + attributeModifier).round(0, 3);\r\n    }\r\n\r\n    get maximumDamage() {\r\n        const characterPowerLevel = this.character().powerLevel;\r\n        const minimumDamageMultiplier = config.combat.defaultMaximumDamageMultiplier;\r\n        const attributeModifier = this.character().attributes.brutality * config.combat.attributeDamageModifier;\r\n        return characterPowerLevel\r\n            .times(config.mechanics.attackDamage.pointsPerLevel)\r\n            .times(minimumDamageMultiplier)\r\n            .times(1 + attributeModifier).round(0, 3);\r\n    }\r\n\r\n    get canAct() {\r\n        return true;\r\n    }\r\n}","export default class CharacterCombatState {\r\n    constructor(props) {\r\n        this.party = props.party;\r\n        this.hp = props.hp;\r\n        this._speed = props.speed;\r\n        this._fatigue = 0;\r\n        this.lastActed = 0;\r\n        this.modifiers = [];\r\n    }\r\n\r\n    get speed() {\r\n        const baseSpeed = this._speed;\r\n        const modifiedSpeed = this.modifiers.reduce((currentValue, modifier) => {\r\n            if(modifier.effects.speed) {\r\n                const multiplier = (modifier.effects.speed.percent.plus(100))/100\r\n                return currentValue.mul(multiplier);\r\n            }\r\n            return currentValue;\r\n        }, baseSpeed);\r\n        return modifiedSpeed;\r\n    }\r\n\r\n    get fatigue() {\r\n        return this._fatigue;\r\n    }\r\n\r\n    set fatigue(fatigue) {\r\n        this._fatigue = fatigue;\r\n    }\r\n\r\n    get canAct() {\r\n        return this.modifiers.reduce((canAct, nextModifier) => {\r\n            if(nextModifier.effects.stunned !== undefined) {\r\n                return false;\r\n            } else {\r\n                return canAct;\r\n            }\r\n        }, true)\r\n    }\r\n}","import * as _ from \"lodash\";\r\nimport {assertCreatureExists, Creatures} from \"../data/creatures\";\r\nimport {v4} from \"node-uuid\";\r\nimport {getTrait} from \"../data/Traits\";\r\nimport {debugMessage} from \"../debugging\";\r\nimport Big from \"big.js\";\r\nimport {Character} from \"../character\";\r\nimport {config} from \"../config\";\r\nimport {generateHitCombatResult, generateMissCombatResult, generateSkipActionResult} from \"../combatResult\";\r\nimport CharacterCombatState from \"./CharacterCombatState\";\r\nimport * as Package from \"../../package.json\";\r\n\r\nexport const saveKey = require(\"md5\")(`hell-conquest-${Package.version}`);\r\n\r\nexport function resolveCombat(rng, definition) {\r\n    const listeners = [];\r\n    const combatResult = {\r\n        rounds: [],\r\n        winner: null,\r\n        combatantCombatStats: {}\r\n    }\r\n\r\n    async function notifyListener(listener) {\r\n        listener(combatResult, _.takeRight(combatResult.rounds)[0]);\r\n    }\r\n\r\n    const combatants = _.flatMap(definition.parties.map((party, partyIndex) => {\r\n        return party.map((character, characterIndex) => {\r\n            combatResult.combatantCombatStats[character.id] = new CharacterCombatState({\r\n                hp: character.currentHp,\r\n                speed: character.speed,\r\n                party: partyIndex\r\n            });\r\n            return {\r\n                character,\r\n                party: partyIndex\r\n            }\r\n        })\r\n    }));\r\n    debugMessage(\"Beginning combat\")\r\n    // Trigger start of combat effects.\r\n    combatants.forEach(combatant => Object.keys(combatant.character.traits).forEach(trait => {\r\n        combatants.filter(other => other !== combatant).forEach(otherCombatant => {\r\n            applyTrait(combatant.character, otherCombatant.id, getTrait(trait), combatant.character.traits[trait], \"on_combat_start\", {combat: combatResult}, 0, rng);\r\n        });\r\n    }))\r\n    let tick = 0;\r\n    const resolveRound = async function () {\r\n        const initiatives = _.uniq(combatants.map(combatant => Math.floor(Big(10000).div(combatResult.combatantCombatStats[combatant.character.id].speed).toNumber())))\r\n            .sort((a, b) => a - b);\r\n        initiatives.forEach(initiativeCount => {\r\n            debugMessage(`Resolving round on tick ${tick}`);\r\n            // TODO: Activate/deactivate traits\r\n            const actingCharacters = combatants\r\n                .filter(wrapped => {\r\n                    const isAlive = wrapped.character.alive;\r\n                    const characterSpeed = Math.floor(Big(10000).div(combatResult.combatantCombatStats[wrapped.character.id].speed).toNumber());\r\n                    const matchingSpeed = (initiativeCount % characterSpeed === 0);\r\n                    return isAlive && matchingSpeed;\r\n                });\r\n            actingCharacters.forEach(acting => {\r\n                const character = acting.character;\r\n                tick = combatResult.combatantCombatStats[character.id].lastActed + Math.floor(Big(10000).div(combatResult.combatantCombatStats[character.id].speed).toNumber());\r\n                combatResult.combatantCombatStats[character.id].lastActed = tick;\r\n                debugMessage(`Tick ${tick}: Resolving action by ${character.id}.`);\r\n                if (combatResult.combatantCombatStats[character.id].hp.lte(0)) {\r\n                    debugMessage(`Tick ${tick}: Character ${character.id} was dead when their turn to act came up, skipping their action.`);\r\n                    return;\r\n                }\r\n                // The acting character performs an attack.\r\n                const enemyParty = (acting.party + 1) % 2;\r\n                const livingEnemies = definition.parties[enemyParty]\r\n                    .filter(enemy => combatResult.combatantCombatStats[enemy.id].hp.gt(0));\r\n                const target = _.get(livingEnemies[Math.floor(rng.double() * livingEnemies.length)], \"id\");\r\n                if (target === undefined) {\r\n                    debugMessage(`Tick ${tick}: No valid target, skipping action by ${character.id}.`);\r\n                    return;\r\n                }\r\n                if (combatResult.combatantCombatStats[character.id].canAct) {\r\n                    debugMessage(`Tick ${tick}: Attacking ${target}`);\r\n                    const attackRollResult = makeAttackRoll(character, target, combatResult, rng);\r\n\r\n                    // Trigger on-attack effects\r\n                    if (attackRollResult.total >= 50) {\r\n                        debugMessage(`Tick ${tick}: ${character.id} rolled ${attackRollResult.total}, a hit.`);\r\n                        resolveHit(tick, combatResult, character, target, rng);\r\n                    } else {\r\n                        debugMessage(`Tick ${tick}: ${character.id} rolled ${attackRollResult.total}, a miss.`);\r\n                        resolveMiss(tick, combatResult, character, target, rng);\r\n                        // TODO: Trigger on-miss effects\r\n                    }\r\n                } else {\r\n                    debugMessage(`${tick}: Character skips their action.`);\r\n                    resolveSkippedAction(tick, combatResult, character);\r\n                }\r\n                listeners.forEach(notifyListener);\r\n                Object.keys(combatResult.combatantCombatStats).forEach(combatantId => {\r\n                    if (combatResult.combatantCombatStats[combatantId].hp.lte(0)) {\r\n                        debugMessage(`Tick ${tick}: Combatant ${combatantId} died`);\r\n                        combatResult.rounds.push({\r\n                            uuid: v4(),\r\n                            tick,\r\n                            actor: character.id,\r\n                            target: Number.parseInt(combatantId),\r\n                            result: \"kill\"\r\n                        });\r\n                        listeners.forEach(notifyListener);\r\n                    }\r\n                });\r\n                combatResult.combatantCombatStats[acting.character.id].fatigue++;\r\n                // TODO: Add logs for when effects expire.\r\n                combatResult.combatantCombatStats[acting.character.id].modifiers = combatResult.combatantCombatStats[acting.character.id].modifiers\r\n                    .map(modifier => {\r\n                        modifier.roundDuration = Big(modifier.roundDuration).minus(1);\r\n                        return modifier;\r\n                    })\r\n                    .filter(modifier => Big(modifier.roundDuration).gt(0))\r\n\r\n            });\r\n        });\r\n        const playerPartyDead = definition.parties[0].every(character => combatResult.combatantCombatStats[character.id].hp.lte(0));\r\n        const enemyPartyDead = definition.parties[1].every(character => combatResult.combatantCombatStats[character.id].hp.lte(0));\r\n        if (playerPartyDead || enemyPartyDead) {\r\n            if (playerPartyDead) {\r\n                debugMessage(\"Every member of party 0 is dead\")\r\n                combatResult.rounds.push({\r\n                    uuid: v4(),\r\n                    tick,\r\n                    winner: 1,\r\n                    result: \"combat-end\"\r\n                })\r\n                combatResult.winner = 1;\r\n                listeners.forEach(notifyListener);\r\n                // Clear all end of combat\r\n            } else if (enemyPartyDead) {\r\n                debugMessage(\"Every member of party 1 is dead\")\r\n                combatResult.rounds.push({\r\n                    uuid: v4(),\r\n                    tick,\r\n                    winner: 0,\r\n                    result: \"combat-end\",\r\n                });\r\n                combatResult.winner = 0;\r\n                listeners.forEach(notifyListener);\r\n            }\r\n\r\n        } else {\r\n            debugMessage(\"No winner, combat continues\");\r\n            setTimeout(resolveRound);\r\n        }\r\n    };\r\n    setTimeout(resolveRound)\r\n    return {\r\n        onRoundResolved: async function (listener, getPrevious) {\r\n            listeners.push(listener);\r\n            notifyListener(listener);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction makeAttackRoll(actingCharacter, target, combatState, rng) {\r\n    const attackAccuracy = actingCharacter.attributes[config.mechanics.attack.baseAttribute].times(config.mechanics.attack.scale);\r\n    const targetEvasion = getCharacter(target).attributes[config.mechanics.evasion.baseAttribute].times(config.mechanics.evasion.scale)\r\n        .minus(Big(config.mechanics.fatigue.penaltyPerPoint).times(combatState.combatantCombatStats[target].fatigue));\r\n    // TODO: Validation\r\n    if (targetEvasion.constructor.name !== \"Big\") {\r\n        throw new Error(\"Evasion had the wrong type\");\r\n    }\r\n    debugMessage(\"Making an attack roll. Attacker Accuracy:\", attackAccuracy.toFixed(), \"Target Evasion:\", targetEvasion.toFixed());\r\n    const roll = Math.floor((rng.double() * 100));\r\n    return {\r\n        rawRoll: roll,\r\n        attackAccuracy,\r\n        targetEvasion,\r\n        total: attackAccuracy.minus(targetEvasion).plus(roll)\r\n    };\r\n}\r\n\r\nlet globalState = loadGlobalState()\r\n\r\nexport function getGlobalState() {\r\n    return globalState;\r\n}\r\n\r\nexport function saveGlobalState() {\r\n    window.localStorage.setItem(saveKey, JSON.stringify(globalState));\r\n}\r\n\r\nexport function loadGlobalState(state) {\r\n    const loaded = window.localStorage.getItem(saveKey);\r\n    return loaded ? JSON.parse(loaded, stateReviver) : {\r\n        debug: {\r\n            creatures: {},\r\n            regions: {}\r\n        },\r\n        passivePowerIncome: Big(0),\r\n        unlockedMonsters: {},\r\n        paused: true,\r\n        currentAction: null,\r\n        nextAction: null,\r\n        id: 0,\r\n        startingPower: Big(0), //The amount of absorbed power the player starts with when they reincarnate\r\n        startingTraits: {},\r\n        currentEncounter: null,\r\n        manualSpeedMultiplier: config.manualSpeedup.multiplier,\r\n        currentRegion: \"forest\",\r\n        actionLog: [],\r\n        exploration: {\r\n            explorationTime: 15 * 1000,\r\n            approachTime: 15 * 1000,\r\n            combatTime: 5 * 1000,\r\n            lootingTime: 15 * 1000,\r\n            recoveryTime: 2 * 1000,\r\n            fleeingTime: 15 * 1000,\r\n            intimidateTime: 15 * 1000,\r\n            reincarnationTime: 1\r\n        },\r\n        characters: {\r\n            0: new Character({\r\n                id: 0,\r\n                isPc: true,\r\n                name: \"You\",\r\n                powerLevel: Big(1),\r\n                absorbedPower: Big(0),\r\n                appearance: \"\",\r\n                statuses: {},\r\n                traits: {},\r\n                items: [],\r\n                attributes: {\r\n                    brutality: Big(0),\r\n                    cunning: Big(0),\r\n                    deceit: Big(0),\r\n                    madness: Big(0)\r\n                },\r\n                combat: {\r\n                    fatigue: 0,\r\n                    minimumDamageMultiplier: .5,\r\n                    medianDamageMultiplier: 1,\r\n                    maximumDamageMultiplier: 1.5\r\n                }\r\n            })\r\n        },\r\n        tutorials: {}\r\n    }\r\n}\r\n\r\nexport function getCharacter(id) {\r\n    assertCharacterExists(id);\r\n    return globalState.characters[id];\r\n}\r\n\r\nlet nextMonsterId = 1;\r\n\r\nexport function generateCreature(id, powerLevel, rng) {\r\n    assertCreatureExists(id);\r\n    if (config.debug) {\r\n        debugMessage(`Generating creature with id ${id} and level ${powerLevel}`);\r\n    }\r\n    if (powerLevel === undefined) {\r\n        throw new Error(\"No powerLevel\");\r\n    }\r\n    if (Number.isNaN(powerLevel)) {\r\n        throw new Error(\"Level cannot be NaN\");\r\n    }\r\n    const nextId = nextMonsterId++;\r\n    globalState.characters[nextId] = new Character({\r\n        id: nextId,\r\n        ...Creatures[id],\r\n        traits: Creatures[id].traits.reduce((traits, next) => {\r\n            traits[next] = powerLevel;\r\n            return traits;\r\n        }, {}),\r\n        absorbedPower: getPowerNeededForLevel(powerLevel),\r\n        artifacts: [],\r\n        statuses: [],\r\n        attributes: {\r\n            brutality: Big(0),\r\n            cunning: Big(0),\r\n            deceit: Big(0),\r\n            madness: Big(0)\r\n        },\r\n        combat: {\r\n            fatigue: 0,\r\n            minimumDamageMultiplier: .5,\r\n            medianDamageMultiplier: 1,\r\n            maximumDamageMultiplier: 1.5\r\n        }\r\n    });\r\n    saveGlobalState();\r\n    return globalState.characters[nextId];\r\n}\r\n\r\n\r\nexport function getSpriteForCreature(name) {\r\n    assertCreatureExists(name);\r\n    return `monsters/${Creatures[name].texture}`;\r\n}\r\n\r\nfunction assertCharacterExists(id) {\r\n    if (!globalState.characters[id]) {\r\n        throw new Error(`No creature exists for '${id}'`);\r\n    }\r\n}\r\n\r\nfunction resolveHit(tick, combatResult, actingCharacter, targetCharacter, rng) {\r\n    if (typeof actingCharacter !== \"object\") {\r\n        throw new Error(`Acting character was not an object!`);\r\n    }\r\n    if (typeof targetCharacter !== \"number\") {\r\n        throw new Error(`Target character was not an object!`);\r\n    }\r\n    const damageRoll = Math.floor(rng.double() * 100);\r\n    let damageToInflict;\r\n    if (damageRoll <= 20) {\r\n        damageToInflict = actingCharacter.combat.minimumDamage;\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a glancing hit for ${damageToInflict}.`);\r\n    } else if (damageRoll <= 80) {\r\n        damageToInflict = actingCharacter.combat.medianDamage;\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a solid hit for ${damageToInflict}.`);\r\n    } else {\r\n        damageToInflict = actingCharacter.combat.maximumDamage;\r\n        debugMessage(`Tick ${tick}: Damage roll ${damageRoll}, a critical hit for ${damageToInflict}.`);\r\n    }\r\n    const attackResult = {\r\n        baseDamage: damageToInflict,\r\n        attackerDamageMultiplier: Big(actingCharacter.attributes[config.mechanics.attackDamage.baseAttribute])\r\n            .times(config.mechanics.attackDamage.scale),\r\n        targetDefenseMultiplier: Big(getCharacter(targetCharacter).attributes[config.mechanics.defense.baseAttribute])\r\n            .times(config.mechanics.defense.scale),\r\n        otherEffects: []\r\n    }\r\n    // Trigger on-hit effects\r\n    Object.keys(actingCharacter.traits).forEach(trait => applyTrait(actingCharacter, targetCharacter, getTrait(trait), actingCharacter.traits[trait], \"on_hitting\", {\r\n        combat: combatResult,\r\n        attack: attackResult\r\n    }, tick, rng));\r\n    const finalDamage = attackResult.baseDamage.times(attackResult.attackerDamageMultiplier.minus(attackResult.targetDefenseMultiplier).div(100).plus(1)).round(0, 0);\r\n    debugMessage(`Damage started off as ${attackResult.baseDamage.toFixed()}, with an attacker multiplier of ${attackResult.attackerDamageMultiplier} and a target defense multiplier of ${attackResult.targetDefenseMultiplier}, for a total of ${finalDamage.toFixed()}`);\r\n    combatResult.combatantCombatStats[targetCharacter].hp = combatResult.combatantCombatStats[targetCharacter].hp.minus(damageToInflict);\r\n    debugMessage(`Tick ${tick}: Hit did ${finalDamage.toFixed()}. Additional effects: ${attackResult.otherEffects.map(effect => {\r\n        switch (effect.event) {\r\n            case \"apply_effect\":\r\n                return `Applying effect ${effect.effect} with from ${effect.source} to ${effect.target}.`\r\n        }\r\n\r\n    }).join(\", \")}. Target has ${combatResult.combatantCombatStats[targetCharacter].hp} remaining.`)\r\n    // TODO: Trigger on-damage effects\r\n    combatResult.rounds.push(generateHitCombatResult(tick, actingCharacter.id, targetCharacter, finalDamage, attackResult.otherEffects));\r\n}\r\n\r\nfunction resolveMiss(tick, combatResult, actingCharacter, targetCharacterId, rng) {\r\n    combatResult.rounds.push(generateMissCombatResult(tick, actingCharacter.id, targetCharacterId));\r\n}\r\n\r\nfunction resolveSkippedAction(tick, combatResult, actingCharacter) {\r\n    combatResult.rounds.push(generateSkipActionResult(tick, actingCharacter.id));\r\n}\r\n\r\nfunction applyTrait(sourceCharacter, targetCharacter, trait, rank, event, state, tick, rng) {\r\n    const rankModifier = sourceCharacter.attributes[config.mechanics.traitRank.baseAttribute].times(config.mechanics.traitRank.scale).div(100);\r\n    rank = Big(rank).plus(Big(rank).times(rankModifier)).round(0, 0);\r\n    debugMessage(`Character has a bonus to rank of ${sourceCharacter.attributes.madness.toFixed()}% from madness, for an effective rank of ${rank}`);\r\n    debugMessage(`Tick ${tick}: Determining if trait ${trait.name} applies`);\r\n    if (trait[event]) {\r\n        const effect = trait[event];\r\n        if (effect.conditions !== undefined) {\r\n            debugMessage(\"Trait has conditions\");\r\n        }\r\n        const effectTriggers = effect.conditions === undefined || Object.keys(effect.conditions)\r\n            .every(condition => {\r\n                switch (condition) {\r\n                    case \"health_percentage\":\r\n                        // Fixme: Implement validation\r\n                        const target = getCharacter(effect.conditions[condition].target === \"attacker\" ? sourceCharacter : targetCharacter);\r\n                        const targetPercent = Big(effect.conditions[condition].below);\r\n                        const targetCurrentHealth = state.combat.combatantCombatStats[target.id].hp;\r\n                        const targetMaxHealth = target.maximumHp;\r\n                        const currentHealthPercent = (targetCurrentHealth.mul(100).div(targetMaxHealth));\r\n                        const conditionMet = targetPercent.gte(currentHealthPercent);\r\n                        debugMessage(`Tick ${tick}: Target health percentage is ${currentHealthPercent}, which is ${conditionMet ? \"\" : \"not\"} enough to trigger.`);\r\n                        return conditionMet;\r\n                    case \"chance\":\r\n                        const chanceToTrigger = evaluateExpression(trait[event].conditions[condition], {\r\n                            $rank: rank\r\n                        });\r\n                        const roll = Math.floor(rng.double() * 100) + 1;\r\n                        if (chanceToTrigger >= roll) {\r\n                            debugMessage(`Chance to trigger ${chanceToTrigger} with roll ${roll}: success`);\r\n                            return true;\r\n                        } else {\r\n                            debugMessage(`Chance to trigger ${chanceToTrigger} with roll ${roll}: failure.`);\r\n                            return false;\r\n                        }\r\n                    default:\r\n                        return false;\r\n                }\r\n            })\r\n        if (effectTriggers) {\r\n            debugMessage(`Tick ${tick}: Effect triggered, applying effects`);\r\n            Object.keys(trait[event].effects).forEach(traitEffect => {\r\n                    // FIXME\r\n                    switch (traitEffect) {\r\n                        case \"damage_modifier\":\r\n                            // FIXME: Validation\r\n                            const percentDamageModifier = evaluateExpression(trait[event].effects[traitEffect].percent, {\r\n                                $rank: rank\r\n                            });\r\n                            if(percentDamageModifier) {\r\n                                const newMultiplier = state.attack.attackerDamageMultiplier.plus(percentDamageModifier);\r\n                                debugMessage(`Tick ${tick}: Applying ${percentDamageModifier.toFixed()} modifier to damage, changing damage multiplier from ${state.attack.attackerDamageMultiplier.div(100).toFixed()} to ${newMultiplier.div(100).toFixed()}`);\r\n                                state.attack.attackerDamageMultiplier = newMultiplier;\r\n                            }\r\n                            break;\r\n                        case \"defense_modifier\": {\r\n                            const defenseModifier = evaluateExpression(trait[event].effects[traitEffect].percent, {\r\n                                $rank: rank\r\n                            }).div(100);\r\n                            const newMultiplier = state.attack.targetDefenseMultiplier.plus(defenseModifier);\r\n                            debugMessage(`Tick ${tick}: Applying ${defenseModifier} modifier to defense, changing defense multiplier from ${state.attack.targetDefenseMultiplier.toFixed()} to ${newMultiplier.toFixed()}`);\r\n                            state.attack.targetDefenseMultiplier = newMultiplier;\r\n                            break;\r\n                        }\r\n                        // case \"speed_modifier\" :\r\n                        //     const percentageSpeedMultiplier = evaluateExpression(trait[event].effects[traitEffect].percent, {\r\n                        //         $rank: rank\r\n                        //     });\r\n                        //\r\n                        //     const effect = {\r\n                        //         effect: {\r\n                        //             speed_bonus_percent: percentageSpeedMultiplier\r\n                        //         },\r\n                        //         roundDuration: evaluateExpression(trait[event].duration.rounds, {$rank: rank}),\r\n                        //         source: {\r\n                        //             character: sourceCharacter.id,\r\n                        //             ability: trait\r\n                        //         }\r\n                        //     };\r\n                        //     const existingEffect = state.combat.combatantCombatStats[affectedCharacterId].modifiers.find(modifier => {\r\n                        //         return modifier.source.character === sourceCharacter.id && modifier.source.ability === trait;\r\n                        //     });\r\n                        //     if (existingEffect) {\r\n                        //         existingEffect.roundDuration = trait[event].duration.rounds;\r\n                        //     } else {\r\n                        //         state.combat.combatantCombatStats[affectedCharacterId].modifiers.push(effect);\r\n                        //     }\r\n                        //     debugMessage(`Applied ${percentageSpeedMultiplier}% modifier to speed of ${affectedCharacterId}`);\r\n                        //     break;\r\n                        case \"add_modifier\":\r\n                            const modifierToAddDefinition = trait[event].effects.add_modifier;\r\n                            Object.keys(modifierToAddDefinition).forEach(effectType => {\r\n                                const effectTarget = modifierToAddDefinition[effectType].target;\r\n                                const modifier = {\r\n                                    effects: {\r\n                                        [effectType]: {\r\n                                            percent: evaluateExpression(modifierToAddDefinition[effectType].percent, {$rank: rank})\r\n                                        }\r\n                                    },\r\n                                    roundDuration: evaluateExpression(trait[event].duration.rounds, {$rank: rank}),\r\n                                    source: {\r\n                                        character: sourceCharacter.id,\r\n                                        ability: trait\r\n                                    }\r\n                                };\r\n                                // Determine targets\r\n                                const targets = Object.keys(state.combat.combatantCombatStats).filter(combatantId => {\r\n                                    switch (effectTarget) {\r\n                                        case \"attacker\":\r\n                                            return sourceCharacter.id == combatantId;\r\n                                        case \"attacked\":\r\n                                            return targetCharacter == combatantId;\r\n                                        case \"all_enemies\":\r\n                                            const actingCharacterParty = sourceCharacter.id === 0 ? 0 : 1;\r\n                                            return actingCharacterParty !== state.combat.combatantCombatStats[combatantId].party;\r\n                                        default:\r\n                                            throw new Error();\r\n                                    }\r\n                                });\r\n                                targets.forEach(combatantId => {\r\n                                    const existingEffect = state.combat.combatantCombatStats[combatantId].modifiers.find(modifier => {\r\n                                        return modifier.source.character === sourceCharacter.id && modifier.source.ability === trait;\r\n                                    });\r\n                                    if (existingEffect) {\r\n                                        existingEffect.roundDuration = evaluateExpression(trait[event].duration.rounds, {$rank: rank});\r\n                                    } else {\r\n                                        state.combat.combatantCombatStats[combatantId].modifiers.push(modifier);\r\n                                    }\r\n                                    _.get(state, \"attack.otherEffects\", []).push({\r\n                                        event: \"add_modifier\",\r\n                                        source: sourceCharacter.id,\r\n                                        target: combatantId,\r\n                                        effect: modifier,\r\n                                    });\r\n                                });\r\n                            })\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n    return state;\r\n}\r\n\r\nconst expressionCache = {};\r\n\r\nfunction evaluateExpression(expression, context) {\r\n    if(expression === null || expression === undefined) {\r\n        return expression;\r\n    }\r\n    if (!expressionCache[expression]) {\r\n        expressionCache[expression] = new Function(\"$rank\", `return ${expression}`);\r\n    }\r\n    return expressionCache[expression].call(null, context.$rank);\r\n}\r\n\r\nexport function getPowerNeededForLevel(level) {\r\n    return Big(level.minus(1).pow(2).times(5));\r\n}\r\n\r\nexport function getLevelForPower(powerPoints) {\r\n    return Big(0).eq(powerPoints) ? Big(1) : powerPoints.plus(1).div(5).sqrt().round(0, 3);\r\n}\r\n\r\nexport function reincarnateAs(monsterId, newAttributes) {\r\n    const player = getCharacter(0);\r\n    // Improve your starting traits\r\n    const currentDemon = Creatures[player.appearance];\r\n    if (currentDemon) {\r\n        currentDemon.traits.forEach(trait => {\r\n            if (!globalState.startingTraits[trait] || player.powerLevel.gt(globalState.startingTraits[trait])) {\r\n                globalState.startingTraits[trait] = player.powerLevel;\r\n            }\r\n        });\r\n    }\r\n\r\n    if (monsterId === \"random\") {\r\n        const options = _.difference(Object.keys(Creatures).filter(m => {\r\n            return _.get(globalState, [\"debug\", \"creatures\", m, \"enabled\"], true) &&\r\n                Creatures[m].enabled !== false\r\n        }), Object.keys(globalState.unlockedMonsters)\r\n            .filter(m => globalState.unlockedMonsters[m]));\r\n        monsterId = options[Math.floor(Math.random() * options.length)];\r\n    }\r\n\r\n    // Update player attributes\r\n    Object.keys(player.attributes).forEach(attribute => {\r\n        player.attributes[attribute] = Big(newAttributes[attribute.substring(1)]);\r\n    })\r\n\r\n    // Add your level to your starting energy.\r\n    globalState.startingPower = globalState.startingPower.plus(globalState.characters[0].powerLevel.minus(1).pow(2));\r\n    globalState.characters[0].absorbedPower = globalState.startingPower;\r\n    globalState.characters[0].reincarnate(monsterId, globalState.startingTraits);\r\n    globalState.unlockedMonsters[monsterId] = true;\r\n\r\n    // Gain the traits of your new demon amd your new power level\r\n    Creatures[monsterId].traits.forEach(trait => {\r\n        if (!globalState.startingTraits[trait] || player.powerLevel.gt(globalState.startingTraits[trait])) {\r\n            globalState.startingTraits[trait] = player.powerLevel;\r\n        }\r\n    });\r\n    getCharacter(0).traits = {...globalState.startingTraits};\r\n\r\n    globalState.currentEncounter = null;\r\n    globalState.currentAction = \"reincarnating\";\r\n    getCharacter(0).currentHp = getCharacter(0).maximumHp;\r\n    getGlobalState().passivePowerIncome = Big(0);\r\n\r\n    saveGlobalState();\r\n}\r\n\r\nexport function unpause() {\r\n    globalState.paused = false;\r\n}\r\n\r\nfunction stateReviver(key, value) {\r\n    switch (key) {\r\n        case \"_attributes\":\r\n        case \"startingTraits\":\r\n        case \"traits\":\r\n            return Object.keys(value).reduce((all, next) => {\r\n                all[next] = Big(value[next]);\r\n                return all;\r\n            }, {});\r\n        case \"startingPower\":\r\n        case \"minLevel\":\r\n        case \"maxLevel\":\r\n            return Big(value);\r\n        case \"characters\":\r\n            return Object.keys(value).reduce((characters, id) => {\r\n                characters[id] = new Character(value[id]);\r\n                return characters;\r\n            }, {});\r\n        case \"enemies\":\r\n            return Object.keys(value).map(character => {\r\n                return new Character(value[character]);\r\n            });\r\n        case \"paused\":\r\n            return false;\r\n        case \"passivePowerIncome\":\r\n            return Big(value);\r\n        case \"value\":\r\n            const parsed = Number.parseFloat(value);\r\n            if (Number.isNaN(parsed)) {\r\n                return value;\r\n            }\r\n            return Big(value);\r\n        default:\r\n            return value;\r\n    }\r\n}\r\n\r\nexport function resetDebug() {\r\n    globalState.debug.creatures = {};\r\n    globalState.debug.regions = {};\r\n}\r\n\r\nexport function getManualSpeedMultiplier() {\r\n    const debugMultiplier = _.get(globalState, [\"debug\", \"manualSpeedMultiplier\"]);\r\n    const baseMultiplier = globalState.manualSpeedMultiplier;\r\n    return debugMultiplier || baseMultiplier;\r\n}","import {v4} from \"node-uuid\";\r\n\r\nexport function generateHitCombatResult(tick, attackingCharacterId, targetCharacterId, damageDone, otherEffects) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"hit\",\r\n        target: targetCharacterId,\r\n        actor: attackingCharacterId,\r\n        effects: [{\r\n            event: \"damage\",\r\n            value: damageDone,\r\n            target: targetCharacterId\r\n        }, ...otherEffects]\r\n    }\r\n}\r\n\r\nexport function generateMissCombatResult(tick, attackingCharacterId, targetCharacterId) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"miss\",\r\n        target: targetCharacterId,\r\n        actor: attackingCharacterId,\r\n        effects: []\r\n    }\r\n}\r\n\r\nexport function generateSkipActionResult(tick, actingCharacterId) {\r\n    return {\r\n        uuid: v4(),\r\n        tick,\r\n        result: \"action_skipped\",\r\n        actor: actingCharacterId,\r\n        effects: []\r\n    }\r\n}","import * as _ from \"lodash\";\r\nimport {generateCreature, getGlobalState} from \"../engine\";\r\nimport {config} from \"../config\";\r\nimport Big from \"big.js\";\r\nimport {debugMessage} from \"../debugging\";\r\n\r\nclass Region {\r\n    constructor(name, available, encounters, background) {\r\n        this.name = name;\r\n        this.encounters = encounters;\r\n        this.background = background;\r\n    }\r\n\r\n    startEncounter(player, rng) {\r\n        const minimumLevel = _.get(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], player.powerLevel.minus(config.encounters.lesserLevelScale * 2));\r\n        const candidateMaxLevel = _.get(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"],\r\n            player.powerLevel.plus(config.encounters.greaterLevelScale * 2));\r\n        const maximumLevel = candidateMaxLevel.gte(config.mechanics.maxLevel) ? Big(config.mechanics.maxLevel - 1) : candidateMaxLevel;\r\n\r\n        if (config.debug) {\r\n            debugMessage(`Generating an encounter between ${minimumLevel.toFixed()} and ${maximumLevel.toFixed()} `);\r\n        }\r\n        const encounterLevelModifier = minimumLevel.toNumber() + Math.floor(rng.double() * (maximumLevel.toNumber() - minimumLevel.toNumber()));\r\n        const encounterLevel = Big(Math.max(1, encounterLevelModifier));\r\n        if (config.debug) {\r\n            debugMessage(`Generated encounter level is ${encounterLevel}`);\r\n        }\r\n        const encounterDef = chooseRandomEncounter(this);\r\n        if (encounterDef === undefined) {\r\n            throw new Error(\"No encounter selected\");\r\n        }\r\n        const encounter = {\r\n            encounterLevel,\r\n            ...encounterDef,\r\n            pendingActions: [],\r\n            enemies: encounterDef.enemies.flatMap(enemyDef => _.range(0, enemyDef.count).map(i => {\r\n                return generateCreature(enemyDef.name, encounterLevel, rng)\r\n            }))\r\n        };\r\n        return encounter;\r\n    }\r\n}\r\n\r\nexport const Regions = {\r\n    forest: new Region(\"The Prey's Lament\", true, {\r\n            bloodthirstyKnight: {\r\n                description: \"1 Bloodthirsty Knight\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"bloodthirstyKnight\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            rapaciousHighwayman: {\r\n                description: \"1 Rapacious Highwayman\",\r\n                type: \"combat\",\r\n                enabled: false,\r\n                enemies: [\r\n                    {\r\n                        name: \"rapaciousHighwayman\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            crushingSnake: {\r\n                description: \"1 Crushing Snake\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"crushingSnake\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            skitteringHorror: {\r\n                description: \"1 Skittering Horror\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"skitteringHorror\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            },\r\n            deadlyHornet: {\r\n                description: \"1 Deadly Hornet\",\r\n                type: \"combat\",\r\n                enemies: [\r\n                    {\r\n                        name: \"deadlyHornet\",\r\n                        count: 1\r\n                    }\r\n                ]\r\n            }\r\n\r\n        },\r\n        {\r\n            background: \"backgrounds/parallax-demon-woods-bg.png\",\r\n            far: \"backgrounds/parallax-demon-woods-far-trees.png\",\r\n            mid: \"backgrounds/parallax-demon-woods-mid-trees.png\",\r\n            close: \"backgrounds/parallax-demon-woods-close-trees.png\"\r\n        }\r\n    ),\r\n    caves: new Region(\"The Bottomless Caverns\", false, {}, {}),\r\n    mountains: new Region(\"The Crags of Futility\", false, {}, {}),\r\n    desert: new Region(\"The Desert of Isolation\", false, {}, {})\r\n}\r\n\r\nfunction chooseRandomEncounter(region) {\r\n    const possibleEncounters = Object.keys(region.encounters).filter(encounterId => {\r\n        debugMessage(`Determining if '${encounterId}' is enabled.`);\r\n        const encounterEnabled = region.encounters[encounterId].enabled !== false;\r\n        if (!encounterEnabled) {\r\n            debugMessage(`Encounter '${encounterId}' disabled`);\r\n        }\r\n        const debugNotDisabled = _.get(getGlobalState(), [\"debug\", \"regions\", region.id, \"encounters\", encounterId]) !== false;\r\n        if (!debugNotDisabled) {\r\n            debugMessage(`Encounter '${encounterId}' disabled by debug.`);\r\n        }\r\n        return encounterEnabled && debugNotDisabled;\r\n    });\r\n    const randomKey = possibleEncounters[Math.floor(Math.random() * Object.keys(possibleEncounters).length)];\r\n    debugMessage(`Selected encounter '${randomKey}'`);\r\n    return region.encounters[randomKey];\r\n}","import React from \"react\";\r\n\r\nexport const Actions = {\r\n    exploring: {\r\n        id: \"exploring\",\r\n        duration: \"exploration.explorationTime\",\r\n        description: \"Exploring...\"\r\n    },\r\n    approaching: {\r\n        id: \"approaching\",\r\n        duration: \"exploration.approachTime\",\r\n        description: \"Approaching Enemy...\"\r\n    },\r\n    looting: {\r\n        id: \"looting\",\r\n        duration: \"exploration.lootingTime\",\r\n        description: \"Looting the body...\"\r\n    },\r\n    fleeing: {\r\n        id: \"fleeing\",\r\n        duration: \"exploration.fleeingTime\",\r\n        description: \"Fleeing in terror!\"\r\n    },\r\n    fighting: {\r\n        id: \"fighting\",\r\n        duration: \"exploration.combatTime\",\r\n        description: \"In Combat!\",\r\n    },\r\n    reincarnating: {\r\n        id: \"resurrecting\",\r\n        duration: \"exploration.reincarnationTime\",\r\n        description: \"Reincarnating...\"\r\n    },\r\n    recovering: {\r\n        id:\"recovering\",\r\n        duration: \"exploration.recoveryTime\",\r\n        description: \"Healing...\"\r\n    },\r\n    intimidating: {\r\n        id:\"intimidating\",\r\n        duration: \"exploration.intimidateTime\",\r\n        description: \"Intimidating...\"\r\n    }\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {Creatures} from \"../../data/creatures\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport {getCharacter, getGlobalState, getLevelForPower, getSpriteForCreature} from \"../../engine\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport * as _ from \"lodash\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {Big} from \"big.js\";\r\nimport {config} from \"../../config\";\r\nimport \"../../App.css\";\r\n\r\nexport default function ReincarnationSelectionPage(props) {\r\n    const globalState = useRef(getGlobalState());\r\n    const history = useHistory();\r\n    const player = getCharacter(0);\r\n    const currentCreature = Creatures[player.appearance] || {};\r\n    const [attributes, setAttributes] = useState(Object.keys(player.attributes)\r\n        .reduce((attributes, next) => {\r\n            attributes[next.substring(1)] = player.attributes[next];\r\n            return attributes;\r\n        }, {}));\r\n    const newStartingPower = globalState.current.startingPower.plus(player.powerLevel.minus(1).pow(2));\r\n    const spendableBonusPoints = getLevelForPower(newStartingPower).times(config.characters.player.attributesPerLevel);\r\n\r\n    useEffect(() => {\r\n        getGlobalState().paused = true;\r\n    }, []);\r\n\r\n    return <Grid container>\r\n        <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n            <strong>Reincarnate</strong>\r\n        </Grid>\r\n        <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n            Select a soul to reincarnate as.\r\n            <br/>\r\n            You will reincarnate with <strong>{newStartingPower.toFixed()}</strong> starting power, letting you start at level {getLevelForPower(newStartingPower).toFixed()}\r\n            <br/>\r\n            You will also gain the following Traits as a result of your previous reincarnations:\r\n            <Grid container>\r\n                {_.uniq(Object.keys(globalState.current.startingTraits).concat(currentCreature.traits || []))\r\n                    .map(trait => {\r\n                        const player = getCharacter(0);\r\n                        const currentStartingRank = _.get(globalState.current.startingTraits, trait, Big(0));\r\n                        const combinedLevel = player.powerLevel.gt(currentStartingRank) ? player.powerLevel : currentStartingRank;\r\n                        return <Grid item xs={1}>\r\n                            <Tooltip title={<div dangerouslySetInnerHTML={{\r\n                                __html:\r\n                                    Traits[trait].description({\r\n                                        rank: combinedLevel\r\n                                    })\r\n                            }}></div>}>\r\n                                <img src={Traits[trait].icon}/>\r\n                            </Tooltip>\r\n                        </Grid>\r\n                    })}\r\n            </Grid>\r\n        </Grid>\r\n\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Spend {spendableBonusPoints.toFixed()} {player.powerLevel.gt(1) ? \"points\" : \"point\"} on bonuses:</strong>\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Attributes</strong>\r\n            </Grid>\r\n            {Object.keys(config.attributes).map(attribute => {\r\n                return <Grid item xs={3}>\r\n                    <Tooltip title={config.attributes[attribute].description({\r\n                        rank: attributes[attribute].toFixed()\r\n                    })}>\r\n                        <div style={{textAlign: \"center\"}}>\r\n                            <img src={config.attributes[attribute].icon}/>\r\n                            <div>\r\n                                <Button disabled={spendableBonusPoints.eq(_.sum(Object.values(attributes).map(x => x.toNumber())))}\r\n                                        onClick={() => {\r\n                                            setAttributes({...attributes, [attribute]: attributes[attribute].plus(1)})\r\n                                        }}>\r\n                                    <AddIcon/>\r\n                                </Button>\r\n                                {attributes[attribute].toFixed()}\r\n                                <Button disabled={attributes[attribute].toNumber() <= 0} onClick={() => {\r\n                                    setAttributes({...attributes, [attribute]: attributes[attribute].minus(1)})\r\n                                }}>\r\n                                    <RemoveIcon/>\r\n                                </Button>\r\n                            </div>\r\n                        </div>\r\n                    </Tooltip>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n\r\n        <Grid container item xs={12} alignItems=\"stretch\" justify=\"flex-start\">\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <strong>Choose a demon to reincarnate as.</strong>\r\n            </Grid>\r\n            {\r\n                Object.keys(Creatures)\r\n                    .filter(id => {\r\n                            const creatureEnabled = Creatures[id].enabled !== false;\r\n                            const debugEnabled = _.get(getGlobalState(), [\"debug\", \"creatures\", id, \"enabled\"], true);\r\n                            return creatureEnabled && debugEnabled;\r\n                        }\r\n                    )\r\n                    .map(name => {\r\n                    if (!getGlobalState().unlockedMonsters[name]) {\r\n                        return <Grid item container xs={3} justify=\"space-around\" style={{height: \"138px\"}}>\r\n                            <Grid item xs={12} style={{textAlign: \"center\", height: \"64%\"}}>\r\n                                <Tooltip\r\n                                    title={<div>An unknown type of Demon. Selects a random Demon you have not already\r\n                                        played as.</div>}>\r\n                                    <Button variant=\"contained\" style={{height: \"100%\", width: \"50%\"}}\r\n                                            onClick={() => {\r\n                                                props.reincarnate(\"random\", attributes);\r\n                                                history.push(\"/adventuring\");\r\n                                            }}>\r\n                                        <Grid container>\r\n                                            <Grid item xs={12}>\r\n                                                ???\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Button>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                        </Grid>\r\n                    } else {\r\n                        return <Grid item container xs={3} justify=\"space-around\">\r\n                            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                                <Tooltip title={<div>{Creatures[name].description}</div>}>\r\n                                    <Button variant=\"contained\" style={{height: \"100%\", width: \"50%\"}}\r\n                                            onClick={() => {\r\n                                                props.reincarnate(name, attributes);\r\n                                                history.push(\"/adventuring\");\r\n                                            }}>\r\n                                        <Grid container>\r\n                                            <Grid item xs={12}>\r\n                                                <img src={getSpriteForCreature(name)}/>\r\n                                            </Grid>\r\n                                            <Grid item xs={12}>\r\n                                                {Creatures[name].name}\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Button>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                            {\r\n                                Creatures[name].traits.map(trait => <Grid item xs={1}>\r\n                                    <Tooltip title={<div dangerouslySetInnerHTML={{\r\n                                        __html: Traits[trait].description({\r\n                                            rank: getLevelForPower(newStartingPower)\r\n                                        })\r\n                                    }}>\r\n                                    </div>}>\r\n                                        <img src={Traits[trait].icon}/>\r\n                                    </Tooltip>\r\n                                </Grid>)\r\n                            }\r\n                        </Grid>\r\n                    }\r\n                })\r\n            }\r\n        </Grid>\r\n    </Grid>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport React, {useMemo} from \"react\";\r\n\r\nexport default function PowerLevelDisplay(props) {\r\n    const powerLevelDisplay = useMemo(() => props.powerLevel.toFixed(), [props.powerLevel]);\r\n    return <React.Fragment>\r\n        <Grid item xs={6}>\r\n            Level\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n            {powerLevelDisplay}\r\n        </Grid>\r\n    </React.Fragment>\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Help} from \"@material-ui/icons\";\r\nimport {config} from \"../../config\";\r\nimport React from \"react\";\r\n\r\nexport default function CharacterAttributes(props) {\r\n    return <React.Fragment>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                Health\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.currentHp.toFixed()} / {props.character.maximumHp.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={\r\n                        <span>Health is how much damage needed to destroy you. If you die, you forcibly reincarnate.</span>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.brutality.label}\r\n            </Grid>\r\n            <Grid item xs={5} title={``}>\r\n                {props.character.attributes.brutality.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={<span\r\n                        dangerouslySetInnerHTML={{__html: config.attributes.brutality.description(\r\n                                {\r\n                                    rank: props.character.attributes.brutality.toNumber()\r\n                                }\r\n                            )}}></span>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.cunning.label}\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.attributes.cunning.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={\r\n                        <span\r\n                            dangerouslySetInnerHTML={{__html: config.attributes.cunning.description(\r\n                                    {\r\n                                        rank: props.character.attributes.cunning.toNumber()\r\n                                    }\r\n                                )}}></span>\r\n                    }>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.deceit.label}\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.attributes.deceit.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={\r\n                        <span\r\n                            dangerouslySetInnerHTML={{__html: config.attributes.deceit.description(\r\n                                    {\r\n                                        rank: props.character.attributes.deceit.toNumber()\r\n                                    }\r\n                                )}}>\r\n                            </span>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid item container>\r\n            <Grid item xs={6}>\r\n                {config.attributes.madness.label}\r\n            </Grid>\r\n            <Grid item xs={5}>\r\n                {props.character.attributes.madness.toFixed()}\r\n            </Grid>\r\n            <Grid item xs={1}>\r\n                <Tooltip\r\n                    title={<span\r\n                        dangerouslySetInnerHTML={{__html: config.attributes.madness.description(\r\n                                {\r\n                                    rank: props.character.attributes.madness.toNumber()\r\n                                }\r\n                            )}}/>}>\r\n                    <Help/>\r\n                </Tooltip>\r\n            </Grid>\r\n        </Grid>\r\n    </React.Fragment>\r\n}","import Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Traits} from \"../../data/Traits\";\r\nimport React from \"react\";\r\n\r\nexport default function CharacterTraits(props) {\r\n    return <React.Fragment>\r\n        {Object.keys(props.character.traits).map(trait => <Tooltip key={trait} title={\r\n            <React.Fragment>\r\n                <span>Rank {props.character.traits[trait].toFixed()}: </span>\r\n            <span dangerouslySetInnerHTML={{\r\n                __html: Traits[trait].description({\r\n                    rank: props.character.traits[trait]\r\n                })\r\n            }}></span>\r\n            </React.Fragment>}>\r\n            <img src={Traits[trait].icon}></img>\r\n        </Tooltip>)\r\n        }\r\n    </React.Fragment>\r\n\r\n}","import Grid from \"@material-ui/core/Grid\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {Help} from \"@material-ui/icons\";\r\nimport React, {useMemo} from \"react\";\r\nimport {getPowerNeededForLevel, getSpriteForCreature} from \"../engine\";\r\nimport {Traits} from \"../data/Traits\";\r\nimport {config} from \"../config\";\r\nimport {useMediaQuery} from \"@material-ui/core\";\r\nimport PowerLevelDisplay from \"./charactersheet/PowerLevelDisplay\";\r\nimport CharacterAttributes from \"./charactersheet/CharacterAttributes\";\r\nimport CharacterTraits from \"./charactersheet/CharacterTraits\";\r\n\r\nconst styles = {\r\n    tooltip: {\r\n        fontSize: \"12pt\"\r\n    }\r\n}\r\n\r\nexport default function CharacterSheet(props) {\r\n    const spriteSrc = useMemo(() => getSpriteForCreature(props.character.appearance), [props.character.appearance]);\r\n    const combinedHitWeights = props.character.combat.minimumDamageWeight.plus(props.character.combat.medianDamageWeight)\r\n        .plus(props.character.combat.maximumDamageWeight);\r\n\r\n    return <Grid container>\r\n        <Grid item xs={12}>\r\n            <img src={spriteSrc} style={{height: \"75px\"}}/>\r\n        </Grid>\r\n        <Grid item container>\r\n            <PowerLevelDisplay powerLevel={props.character.powerLevel}/>\r\n        </Grid>\r\n        {props.character.absorbedPower !== undefined && <Grid item xs={12}>\r\n            <progress\r\n                value={props.character.absorbedPower.minus(getPowerNeededForLevel(props.character.powerLevel)).div(getPowerNeededForLevel(props.character.powerLevel.plus(1))).mul(100).toNumber()}\r\n                max={100}\r\n                title={`${props.character.absorbedPower.toFixed()}/${getPowerNeededForLevel(props.character.powerLevel.plus(1)).toFixed()}`}\r\n            ></progress>\r\n        </Grid>}\r\n        <Grid container>\r\n            <Grid item container>\r\n                <Grid item xs>\r\n                    <strong>Combat Attributes</strong>\r\n                </Grid>\r\n            </Grid>\r\n            <CharacterAttributes character={props.character}/>\r\n        </Grid>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Derived</strong>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={4}>\r\n                    Glancing Blow\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.minimumDamageWeight.div(combinedHitWeights).times(100).toFixed()}%\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.minimumDamage.toFixed()}\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={4}>\r\n                    Solid Hit\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.medianDamageWeight.div(combinedHitWeights).times(100).toFixed()}%\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.medianDamage.toFixed()}\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={4}>\r\n                    Critical Hit\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.maximumDamageWeight.div(combinedHitWeights).times(100).toFixed()}%\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    {props.character.combat.maximumDamage.toFixed()}\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n        <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Traits</strong>\r\n            </Grid>\r\n            <CharacterTraits character={props.character}/>\r\n        </Grid>\r\n        {config.artifacts.enabled && <Grid container>\r\n            <Grid item xs={12}>\r\n                <strong>Artifacts</strong>\r\n            </Grid>\r\n            <Grid>\r\n                {\r\n                    JSON.stringify(props.character.items)\r\n                }\r\n            </Grid>\r\n        </Grid>}\r\n    </Grid>\r\n\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React from \"react\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nconst styles = {\r\n    root: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#eeeeee\"\r\n    }\r\n}\r\n\r\nexport default function PlayerStats(props) {\r\n    return <Paper style={styles.root} elevation={2}>\r\n        <CharacterSheet character={props.player}/>\r\n    </Paper>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useMemo} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {getCharacter, getGlobalState, getLevelForPower, getPowerNeededForLevel} from \"../engine\";\r\n\r\nconst styles = {\r\n    root: {\r\n        height: \"100%\",\r\n        display: \"flex\",\r\n        flex: \"0\"\r\n    },\r\n    buttons: {\r\n        width: \"100%\"\r\n    }\r\n}\r\n\r\nexport default function TopSection(props) {\r\n    const history = useHistory();\r\n    const reincarnateEnabled = useMemo(() => getLevelForPower(getGlobalState().startingPower).lt(getCharacter(0).powerLevel), [\r\n        getGlobalState().powerLevel,\r\n        getCharacter(0).powerLevel\r\n    ])\r\n    return <div style={styles.root}>\r\n        <Button onClick={() => history.push(\"/reincarnating\")} style={styles.buttons} variant=\"contained\" color=\"secondary\" disabled={!reincarnateEnabled}>\r\n            Reincarnate\r\n        </Button>\r\n    </div>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {getCharacter, getGlobalState} from \"../engine\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {Big} from \"big.js\";\r\nimport { config } from \"../config\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flex: \"1 0 auto\",\r\n        justifyContent: \"flex-end\",\r\n        flexDirection: \"column\"\r\n    },\r\n    actions: {\r\n        container: {\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            flexDirection: \"row\"\r\n        },\r\n        buttons: {\r\n            alignSelf: \"flex-end\",\r\n            flex: \"1\"\r\n        }\r\n    },\r\n    action: {\r\n        maxHeight: \"15%\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    },\r\n    actionProgress: {\r\n        width: \"100%\"\r\n    },\r\n    history: {\r\n        height: \"15%\",\r\n        flexDirection: \"column\",\r\n        overflowY: \"scroll\"\r\n    }\r\n}\r\nexport default function BottomSection(props) {\r\n    if (!props.currentAction) {\r\n        throw new Error(\"No current action\");\r\n    }\r\n    return <div style={styles.root} onMouseEnter={props.startManualSpeedup} onMouseLeave={props.stopManualSpeedup}>\r\n        <Paper style={styles.actions.container}>\r\n            <Button style={styles.actions.buttons} onClick={() => {\r\n                getGlobalState().paused = !getGlobalState().paused;\r\n                props.togglePause(getGlobalState().paused);\r\n            }}>\r\n                {props.paused ? \"Unpause\" : \"Pause\"}\r\n            </Button>\r\n        </Paper>\r\n        <Paper style={styles.actions.container}>\r\n            {actionButton(\"fighting\", \"Fight\", \"Combat the enemy. On victory, steal some of the power of the vanquished foe.\", props)}\r\n            {actionButton(\"fleeing\", \"Flee\", \"Attempt to escape. You will automatically escape from Greater Demons.\", props)}\r\n            {actionButton(\"intimidating\", \"Intimidate\", \"Try to cow the enemy, compelling them to continuously provide you a portion of their life force.\", props)}\r\n            {_.get(config, \"features.negotiating.enabled\") && actionButton(\"negotiating\", \"Negotiate\", \"Combat the enemy. On victory, steal some of the power of the vanquished foe.\", props)}\r\n        </Paper>\r\n        <Paper style={styles.action}>\r\n            <strong>{props.currentAction.description}</strong>\r\n            <progress style={styles.actionProgress} value={props.actionTime}\r\n                      max={_.get(props.state, props.currentAction.duration)}/>\r\n        </Paper>\r\n        <Paper style={styles.history}>\r\n            {\r\n                props.actionLog.map(item => printActionItem(item))\r\n            }\r\n        </Paper>\r\n    </div>\r\n}\r\n\r\nfunction printActionItem(item) {\r\n    if (item.message) {\r\n        return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n            <Grid item xs={11}>\r\n            <span dangerouslySetInnerHTML={{\r\n                __html: item.message\r\n            }}></span>\r\n            </Grid>\r\n        </Grid>\r\n    } else {\r\n        switch (item.result) {\r\n            case \"add_modifier\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{`${getCharacter(item.actor).name}`}</Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"hit\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item\r\n                          xs={11}>{getCharacter(item.actor).name} hit! {item.effects.map(effect => describeEffect(item.target, effect)).join(\" \")}</Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"miss\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        {getCharacter(item.actor).name} Missed! {item.effects.map(effect => describeEffect(item.target, effect)).join(\" \")}\r\n                    </Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"kill\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item\r\n                          xs={11}><strong>{getCharacter(item.target).name} {item.target === 0 ? 'Were' : 'Was'} Killed!</strong></Grid>\r\n                    <Grid item xs={1}>{item.tick}:</Grid>\r\n                </Grid>\r\n            case \"gainedPower\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        You absorbed {item.value.toFixed()} power.\r\n                    </Grid>\r\n                </Grid>\r\n            case \"healed\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        {`${getCharacter(item.target).name} gained ${item.value} health.`}\r\n                    </Grid>\r\n                </Grid>\r\n            case \"escaped\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>\r\n                        You escaped.\r\n                    </Grid>\r\n                </Grid>\r\n            case \"action_skipped\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{getCharacter(item.actor).name} {item.actor === 0 ? 'Skip' : 'Skips'} their\r\n                        action: {item.reason}</Grid>\r\n                    <Grid item xs={1}>\r\n                        {item.tick}\r\n                    </Grid>\r\n                </Grid>\r\n            case \"intimidated\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{getCharacter(item.target).name} was Bound to you, granting you {item.value.toFixed()} power while you explore. </Grid>\r\n                </Grid>\r\n            case \"enemy-fled\":\r\n                return <Grid container direction=\"row-reverse\" key={item.uuid} style={{textAlign: \"center\"}}>\r\n                    <Grid item xs={11}>{getCharacter(item.target).name} Fled!</Grid>\r\n                </Grid>\r\n        }\r\n    }\r\n}\r\n\r\nfunction describeEffect(target, effect) {\r\n    switch (effect.event) {\r\n        case \"damage\":\r\n            return `${getCharacter(target).name} ${target === 0 ? 'take' : 'takes'} ${effect.value} Damage.`;\r\n        default:\r\n            return Object.keys(effect.effect.effects).map(mod => {\r\n                switch (mod) {\r\n                    case \"speed\":\r\n                        const percentModifier = Big(effect.effect.effects.speed.percent); // FIXME: 3 layers, the same name?\r\n                        if (percentModifier.lt(0)) {\r\n                            return `${getCharacter(effect.target).name} ${effect.target == 0 ? 'suffer' : 'suffers'} a ${percentModifier.toFixed()}% penalty to Action Speed.`;\r\n                        } else {\r\n                            return `${getCharacter(effect.target).name} ${effect.target == 0 ? 'gain' : 'gains'} a ${percentModifier.toFixed()}% bonus to Action Speed.`;\r\n                        }\r\n                }\r\n            })\r\n            switch (effect.effect.modifier) {\r\n                case \"speed_modifier\":\r\n\r\n\r\n            }\r\n\r\n    }\r\n}\r\n\r\nfunction actionButton(action, text, description, props) {\r\n    return <Tooltip title={description}>\r\n        <Button onClick={() => props.setNextAction(action)} style={styles.actions.buttons}\r\n                disabled={props.currentAction.id !== \"approaching\"}\r\n                variant={props.nextActionName === action ? \"contained\" : \"outlined\"}\r\n                color={props.nextActionName === action ? \"primary\" : \"default\"}>\r\n            {text}\r\n        </Button>\r\n    </Tooltip>\r\n}","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport CharacterSheet from \"./CharacterSheet\";\r\n\r\nconst styles = {\r\n    root: {\r\n        width: \"25%\",\r\n        backgroundColor: \"#eeeeee\"\r\n    }\r\n}\r\n\r\nexport default function EnemySidebar(props) {\r\n    return <Paper style={styles.root}>\r\n        {props.currentEncounter && <CharacterSheet character={props.currentEncounter.enemies[0]} /> }\r\n    </Paper>\r\n}","import PlayerStats from \"../PlayerStats\";\r\nimport TopSection from \"../TopSection\";\r\nimport {getCharacter, getGlobalState} from \"../../engine\";\r\nimport BottomSection from \"../BottomSection\";\r\nimport EnemySidebar from \"../EnemySidebar\";\r\nimport React from \"react\";\r\n\r\nconst styles = {\r\n    root: {\r\n        display: \"flex\",\r\n        flex: \"1\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        overflow: \"hidden\"\r\n    },\r\n    image: {\r\n        position: \"absolute\",\r\n        height: \"100%\",\r\n        left: 0\r\n    },\r\n    background: {\r\n        position: \"absolute\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        left: 0\r\n    }\r\n}\r\n\r\nexport default function AdventuringPage(props) {\r\n    return <div className=\"App\" style={styles.root}>\r\n        <div id=\"background\" style={{\r\n            position: \"absolute\",\r\n            zIndex: \"-10\",\r\n            overflow: \"hidden\",\r\n            height: \"100vh\",\r\n            width: \"100vw\"\r\n        }}>\r\n            <img style={styles.background} src={\"./backgrounds/parallax-demon-woods-bg.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-far-trees.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-mid-trees.png\"}/>\r\n            <img style={styles.image} src={\"./backgrounds/parallax-demon-woods-close-trees.png\"}/>\r\n        </div>\r\n        <PlayerStats player={props.player}/>\r\n        <div style={{display: \"flex\", flex: \"1 0 auto\", flexDirection: \"column\"}}>\r\n            <TopSection character={getCharacter(0)}/>\r\n            <BottomSection state={getGlobalState()} actionLog={props.actionLog}\r\n                           togglePause={props.togglePause}\r\n                           paused={props.paused}\r\n                           nextActionName={props.nextAction}\r\n                           currentAction={props.currentAction}\r\n                           setNextAction={(newAction) => {\r\n                               props.setNextAction(newAction);\r\n                               getGlobalState().nextAction = newAction;\r\n                           }}\r\n                           actionTime={props.actionTime}\r\n                           startManualSpeedup={props.startManualSpeedup}\r\n                           stopManualSpeedup={props.stopManualSpeedup}\r\n            />\r\n        </div>\r\n        <EnemySidebar currentEncounter={props.currentEncounter} actionLog={props.actionLog}/>\r\n\r\n    </div>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useState} from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {Creatures} from \"../data/creatures\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddCircleOutlineRoundedIcon from '@material-ui/icons/AddCircleOutlineRounded';\r\nimport RemoveCircleOutlineRoundedIcon from '@material-ui/icons/RemoveCircleOutlineRounded';\r\nimport {getCharacter, getGlobalState, resetDebug, saveKey} from \"../engine\";\r\nimport * as _ from \"lodash\";\r\nimport {Regions} from \"../data/Regions\";\r\nimport {config} from \"../config\";\r\nimport {Big} from \"big.js\";\r\n\r\nconst styles = {\r\n    root: {\r\n        position: \"absolute\",\r\n        minHeight: \"100vh\",\r\n        bottom: 0,\r\n        left: 0,\r\n        padding: \"20px\"\r\n    }\r\n}\r\n\r\nexport default function DebugUi(props) {\r\n    const [creatures, setCreatures] = useState(_.get(getGlobalState(), [\"debug\", \"creatures\"]));\r\n    const [regions, setRegions] = useState(_.get(getGlobalState(), [\"debug\", \"regions\"]));\r\n    const [minLevel, setMinLevel] = useState(_.get(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale).lt(Big(1)) ?\r\n        Big(1) : getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale)));\r\n    const [maxLevel, setMaxLevel] = useState(_.get(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale).gt(100) ?\r\n        Big(100) : getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale * 2)));\r\n    const [manualSpeedMultiplier, setManualSpeedMultiplier] = useState(_.get(getGlobalState(), [\"debug\", \"manualSpeedMultiplier\"],\r\n        getGlobalState().manualSpeedMultiplier));\r\n    const [playerAbsorbedPower, setPlayerAbsorbedPower] = useState(getCharacter(0).absorbedPower);\r\n\r\n    function reset() {\r\n        resetDebug();\r\n        setCreatures(_.get(getGlobalState(), [\"debug\", \"creatures\"]));\r\n        setRegions(_.get(getGlobalState(), [\"debug\", \"regions\"]));\r\n        setMinLevel(getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale).lt(Big(1)) ?\r\n            Big(1) : getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale));\r\n        setMaxLevel(getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale).gt(100) ?\r\n            Big(100) : getCharacter(0).powerLevel.plus(config.encounters.greaterLevelScale * 2));\r\n    }\r\n\r\n    function clearSave() {\r\n        window.localStorage.removeItem(saveKey);\r\n        alert(\"local storage cleared\");\r\n    }\r\n\r\n    return <Paper style={styles.root} disabled={true}>\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <h3>Debug Menu</h3>\r\n            </Grid>\r\n            <Grid item container xs={12}>\r\n                <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={reset}>\r\n                        Reset Debug Settings\r\n                    </Button>\r\n                </Grid>\r\n                <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={clearSave}>\r\n                        Clear Save\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <Grid item xs={3}>\r\n                    <TextField type=\"number\" value={manualSpeedMultiplier} onChange={e => {\r\n                        const newValue = Number.parseInt(e.target.value);\r\n                        _.set(getGlobalState(), [\"debug\", \"manualSpeedMultiplier\"], newValue);\r\n                        setManualSpeedMultiplier(newValue);\r\n                    }} label=\"Manual speed multiplier\"/>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TextField type=\"number\" min=\"0\" value={playerAbsorbedPower} onChange={e => {\r\n                        e.target.value = e.target.value === \"\" ? 0 : e.target.value;\r\n                        const newValue = Big(Number.parseInt(e.target.value));\r\n                        if(newValue.lt(0)) {\r\n                            getCharacter(0).absorbedPower = Big(0);\r\n                            setPlayerAbsorbedPower(Big(0));\r\n                        } else {\r\n                            getCharacter(0).absorbedPower = newValue;\r\n                            setPlayerAbsorbedPower(newValue);\r\n                        }\r\n\r\n                    }} label=\"Current player absorbed power\"/>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n                <h3>Creatures</h3>\r\n            </Grid>\r\n            <Grid container item xs={12}>\r\n                {Object.keys(Creatures).map(id => {\r\n                    const enabled = creatures[id] !== false && _.get(creatures, [id, \"enabled\"]) !== false;\r\n                    return <Grid item xs={3} style={{height: \"100%\"}}>\r\n                        <Button variant=\"contained\" color={enabled ? \"default\" : \"secondary\"}\r\n                                style={{width: \"100%\", height: \"100%\"}}\r\n                                onClick={() => {\r\n                                    _.set(getGlobalState(), [\"debug\", \"creatures\", id, \"enabled\"], !enabled);\r\n                                    setCreatures({...creatures, [id]: {enabled: !enabled}})\r\n                                }}\r\n                        >\r\n                            <img src={`/monsters/${Creatures[id].texture}`}/>\r\n                            {Creatures[id].name}\r\n                        </Button>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid item style={{textAlign: \"center\"}}>\r\n                <h4>Regions</h4>\r\n            </Grid>\r\n            <Grid container item xs={12}>\r\n                {Object.keys(Regions).map(regionId => {\r\n                    return <Grid item xs={6} style={{textAlign: \"center\"}}>\r\n                        <h4>{Regions[regionId].name}</h4>\r\n                        <Grid item container xs={12}>\r\n                            {Object.keys(Regions[regionId].encounters).map(encounterId => {\r\n                                const enabled = _.get(regions, [regionId, \"encounters\", encounterId, \"enabled\"]) !== false;\r\n                                return <Grid item xs={3}>\r\n                                    <Button variant=\"contained\" color={enabled ? \"default\" : \"secondary\"}\r\n                                            style={{width: \"100%\", height: \"100%\"}}\r\n                                            onClick={() => {\r\n                                                _.set(getGlobalState(), [\"debug\", \"regions\", regionId, \"encounters\", encounterId, \"enabled\"], !enabled);\r\n                                                setRegions({\r\n                                                    ...regions, [regionId]: _.set(regions[regionId],\r\n                                                        [\"encounters\", encounterId, \"enabled\"],\r\n                                                        !enabled\r\n                                                    )\r\n                                                })\r\n                                            }}\r\n                                    >\r\n                                        {Regions[regionId].encounters[encounterId].description}\r\n                                    </Button>\r\n                                </Grid>;\r\n                            })}\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                    <h4>Encounter rules</h4>\r\n                </Grid>\r\n                <Grid container item xs={3}>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            setMinLevel(minLevel.plus(1));\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], minLevel.plus(1));\r\n                            if (minLevel.plus(1).gt(maxLevel)) {\r\n                                setMaxLevel(minLevel.plus(1));\r\n                                _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], minLevel.plus(1));\r\n                            }\r\n                        }}>\r\n                            <AddCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        Minimum level {minLevel.toFixed()}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], minLevel.minus(1));\r\n                            setMinLevel(minLevel.minus(1));\r\n                        }}>\r\n                            <RemoveCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container item xs={3}>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            setMaxLevel(maxLevel.plus(1));\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], maxLevel.plus(1));\r\n                        }}>\r\n                            <AddCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        Maximum level {maxLevel.toFixed()}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button onClick={() => {\r\n                            _.set(getGlobalState(), [\"debug\", \"encounters\", \"maxLevel\"], maxLevel.minus(1));\r\n                            setMaxLevel(maxLevel.minus(1));\r\n                            if (maxLevel.minus(1).lt(minLevel)) {\r\n                                setMinLevel(maxLevel.minus(1));\r\n                                _.set(getGlobalState(), [\"debug\", \"encounters\", \"minLevel\"], maxLevel.minus(1));\r\n                            }\r\n                        }}>\r\n                            <RemoveCircleOutlineRoundedIcon/>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>\r\n}","import Paper from \"@material-ui/core/Paper\";\r\nimport React, {useEffect} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport {getGlobalState} from \"../../engine\";\r\nconst pkg = require(\"../../../package.json\");\r\nconst changelog = require(\"../../changelog.json\");\r\n\r\nexport default function SplashPage(props) {\r\n    useEffect(() => {\r\n        getGlobalState().paused = true;\r\n    })\r\n    const history = useHistory();\r\n    return <Paper>\r\n        <Grid container>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                Conquest of Hell Ver. {pkg.version}\r\n            </Grid>\r\n            <Grid item container>\r\n                {Object.keys(changelog).map(version => {\r\n                    return <Grid key={version} item container xs={12}>\r\n                        <Grid item xs={12}>\r\n                            {version}\r\n                        </Grid>\r\n                        <ul>\r\n                        {changelog[version].map(entry => {\r\n                            return <li key={entry}>\r\n                                {entry}\r\n                            </li>\r\n                        })}\r\n                        </ul>\r\n                    </Grid>\r\n                })}\r\n            </Grid>\r\n            <Grid item xs={12} style={{textAlign: \"center\"}}>\r\n                <Button onClick={() => {\r\n                    if(getGlobalState().currentAction === null) {\r\n                        history.push(\"/reincarnating\")\r\n                    } else {\r\n                        getGlobalState().paused = false;\r\n                        history.push(\"/adventuring\")\r\n                    }\r\n                }}>\r\n                    Start\r\n                </Button>\r\n            </Grid>\r\n        </Grid>\r\n    </Paper>\r\n}","import './App.css';\nimport {v4} from \"node-uuid\";\nimport * as _ from \"lodash\";\nimport React, {useEffect, useRef, useState} from \"react\";\nimport 'react-circular-progressbar/dist/styles.css';\nimport {Regions} from \"./data/Regions\";\nimport {Actions} from \"./data/Actions\";\nimport {\n    getCharacter,\n    getGlobalState, getManualSpeedMultiplier,\n    loadGlobalState, reincarnateAs,\n    resolveCombat, saveGlobalState, unpause\n} from \"./engine\";\nimport * as seedrandom from \"seedrandom\";\nimport {config} from \"./config\";\nimport {MemoryRouter, Route, Switch} from \"react-router-dom\";\nimport ReincarnationSelectionPage from \"./components/scene/ReincarnationSelectionPage\";\nimport {Big} from \"big.js\";\nimport AdventuringPage from \"./components/scene/AdventuringPage\";\nimport DebugUi from \"./components/DebugUi\";\nimport {useHotkeys} from \"react-hotkeys-hook\";\nimport {debugMessage} from \"./debugging\";\nimport SplashPage from \"./components/scene/SplashPage\";\n\nloadGlobalState();\n\nconst rng = seedrandom();\n\nlet lastTime;\n\nfunction changeCurrentAction(newAction) {\n    getGlobalState().currentAction = newAction;\n    return getGlobalState().currentAction;\n}\n\nfunction pushLogItem(item) {\n    if (getGlobalState().actionLog.length > (config.actionLog.maxSize || 10)) {\n        getGlobalState().actionLog.pop();\n    }\n    getGlobalState().actionLog.unshift(item);\n}\n\n\nfunction App() {\n    const [currentEncounter, setCurrentEncounter] = useState(getGlobalState().currentEncounter);\n    const accruedTime = useRef(0);\n    const manualSpeedUpActive = useRef(false);\n    const [displayedTime, setDisplayedTime] = useState(0);\n    const [currentAction, setCurrentAction] = useState(Actions[getGlobalState().currentAction]);\n    const [actionLog, setActionLog] = useState(getGlobalState().actionLog);\n    const [nextAction, setNextAction] = useState(getGlobalState().nextAction);\n    const player = useRef(getCharacter(0));\n    const [debugUiEnabled, setDebugUiEnabled] = useState(false);\n    const [paused, setPaused] = useState(getGlobalState().paused);\n\n    useHotkeys(\"p\", () => getGlobalState().paused = !getGlobalState().paused);\n    useHotkeys(\"`\", () => {\n        setDebugUiEnabled(enabled => {\n            if (config.debug) {\n                if (!enabled) {\n                    getGlobalState().paused = true;\n                    setPaused(getGlobalState().paused);\n                }\n                saveGlobalState();\n                return !enabled\n            } else {\n                return false;\n            }\n        });\n    });\n\n    useEffect(() => {\n        function applyAction(action) {\n            pushLogItem(action);\n            switch (action.result) {\n                case \"combat-end\":\n                    if (player.current.currentHp < player.current.maximumHp) {\n                        setCurrentAction(Actions[changeCurrentAction(\"recovering\")]);\n                    } else {\n                        if (config.artifacts.enabled) {\n                            setCurrentAction(Actions[changeCurrentAction(\"looting\")]);\n                        } else {\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                        }\n                    }\n                    setCurrentEncounter(getGlobalState().currentEncounter = null);\n                    break;\n                case \"kill\":\n                    if (getGlobalState().currentEncounter.pendingActions[0].result === \"combat-end\") {\n                        if (getCharacter(0).isDamaged) {\n                            getGlobalState().nextAction = \"healing\";\n                            setNextAction(getGlobalState().nextAction);\n                        }\n                        applyAction(getGlobalState().currentEncounter.pendingActions.shift());\n                    }\n                    const enemy = getCharacter(action.target);\n                    const enemyIsLesserDemon = enemy.powerLevel.lte(getCharacter(0).powerLevel.minus(config.encounters.lesserLevelScale));\n                    if (enemyIsLesserDemon) {\n                        debugMessage(`Not gaining power because enemy ${action.target} was a Lesser Demon.`);\n                    }\n                    if (action.actor === 0 && action.target !== 0 && !enemyIsLesserDemon) {\n                        debugMessage(\"Player killed a non-lesser enemy and gained power.\");\n                        const player = getCharacter(0);\n                        const powerToGain = enemy.powerLevel.mul(2);\n                        player.gainPower(powerToGain);\n                        pushLogItem(wrapLogItem({\n                            result: \"gainedPower\",\n                            value: powerToGain\n                        }))\n                    }\n                    break;\n                case \"hit\":\n                case \"miss\":\n                    (action.effects || []).forEach(effect => {\n                        const targetCharacter = getCharacter(effect.target);\n                        switch (effect.event) {\n                            case \"damage\":\n                                targetCharacter.currentHp = targetCharacter.currentHp.minus(effect.value);\n                                if (targetCharacter.currentHp.lt(Big(0))) {\n                                    targetCharacter.currentHp = Big(0);\n                                }\n                                if (getGlobalState().currentEncounter.pendingActions[0].result === \"kill\") {\n                                    applyAction(getGlobalState().currentEncounter.pendingActions.shift());\n                                }\n                                break;\n                            case \"apply_effect\":\n                                targetCharacter.addModifier({\n                                    effect: effect.effect,\n                                    magnitude: effect.value\n                                });\n                                break;\n                        }\n                    });\n                    break;\n                case \"action_skipped\":\n                    break;\n                default:\n                    throw new Error();\n            }\n            saveGlobalState();\n        }\n\n        function clearActionLog() {\n            setActionLog(getGlobalState().actionLog = []);\n        }\n\n        function tick(timestamp) {\n            if (!lastTime) {\n                lastTime = timestamp;\n            } else if (!getGlobalState().paused) {\n                if (accruedTime.current >= _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration)) {\n                    saveGlobalState();\n                    accruedTime.current = 0;\n                    switch (getGlobalState().currentAction) {\n                        case \"exploring\":\n                            if (getCharacter(0).currentHp.lt(getCharacter(0).maximumHp)) {\n                                setCurrentAction(Actions[changeCurrentAction(\"recovering\")]);\n                                // TODO: Implement random encounter chance\n                            } else {\n                                const player = getCharacter(0);\n                                getGlobalState().currentEncounter = Regions[getGlobalState().currentRegion].startEncounter(getCharacter(0), rng);\n                                setCurrentEncounter(getGlobalState().currentEncounter);\n                                setCurrentAction(Actions[changeCurrentAction(\"approaching\")]);\n                                getGlobalState().nextAction = getGlobalState().currentEncounter.enemies.reduce((actionSoFar, nextEnemy) => {\n                                    if (actionSoFar !== \"fighting\") {\n                                        return actionSoFar;\n                                    }\n\n                                    if (player.otherDemonIsLesserDemon(nextEnemy)) {\n                                        return \"intimidating\";\n                                    } else if (player.otherDemonIsGreaterDemon(nextEnemy)) {\n                                        return \"fleeing\";\n                                    } else {\n                                        return \"fighting\";\n                                    }\n                                }, \"fighting\");\n                                setNextAction(getGlobalState().nextAction);\n                                clearActionLog();\n                                if(getGlobalState().passivePowerIncome.gt(0)) {\n                                    getCharacter(0).absorbedPower = getCharacter(0).absorbedPower.plus(getGlobalState().passivePowerIncome);\n                                    pushLogItem({\n                                        message: `Your Bound lesser demons grant you ${getGlobalState().passivePowerIncome.toFixed()} power.`,\n                                        uuid: v4()\n                                    })\n                                }\n\n                                const enemies = getGlobalState().currentEncounter.enemies;\n                                if (player.otherDemonIsGreaterDemon(enemies[0])) {\n                                    pushLogItem({\n                                        message: `💀Approaching Greater ${enemies[0].name}.💀`,\n                                        uuid: v4()\n                                    });\n                                } else if (player.otherDemonIsLesserDemon(enemies[0])) {\n                                    pushLogItem({\n                                        message: `Approaching Lesser ${enemies[0].name}.`,\n                                        uuid: v4()\n                                    });\n                                } else {\n                                    pushLogItem({\n                                        message: `Approaching ${enemies[0].name}.`,\n                                        uuid: v4()\n                                    });\n                                }\n                                saveGlobalState();\n                            }\n                            break;\n                        case \"approaching\": {\n                            // Since we're starting a new combat, remove any old, dead characters\n                            const player = getCharacter(0);\n                            switch (getGlobalState().nextAction) {\n                                case \"fighting\":\n                                    const enemies = getGlobalState().currentEncounter.enemies;\n                                    resolveCombat(rng, {\n                                        parties: [[player], enemies]\n                                    }).onRoundResolved((result, lastRound) => {\n                                        if (lastRound !== undefined) {\n                                            getGlobalState().currentEncounter.pendingActions.push(lastRound);\n                                        }\n                                    });\n                                    break;\n                            }\n                            setCurrentAction(Actions[changeCurrentAction(getGlobalState().nextAction)]);\n                            setNextAction();\n                            const deadCharacters = Object.keys(getGlobalState().characters)\n                                .filter(id => id !== '0' && !getGlobalState().currentEncounter.enemies.find(c => c.id == id));\n                            deadCharacters.forEach(id => {\n                                delete getGlobalState().characters[id]\n                            });\n                            break;\n                        }\n                        case \"intimidating\": {\n                            const enemy = getGlobalState().currentEncounter.enemies[0];\n                            const chanceToIntimidate = Big(5).times(Big(2).pow(getCharacter(0).powerLevel.minus(1).minus(enemy.powerLevel).toNumber()));\n                            const roll = Math.floor(rng.double() * 100) + 1;\n                            if (chanceToIntimidate.gte(roll)) {\n                                const periodicPowerIncreases = Big(1);\n                                pushLogItem(wrapLogItem({\n                                    result: \"intimidated\",\n                                    target: enemy.id,\n                                    value: periodicPowerIncreases\n                                }));\n                                getGlobalState().passivePowerIncome = getGlobalState().passivePowerIncome.plus(periodicPowerIncreases);\n                            } else {\n                                pushLogItem(wrapLogItem({\n                                    result: \"enemy-fled\",\n                                    target: enemy.id\n                                }));\n                            }\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            break;\n                        }\n                        case \"fleeing\":\n                            const player = getCharacter(0);\n                            const enemy = getGlobalState().currentEncounter.enemies[0];\n                            getGlobalState().currentEncounter = null;\n                            setCurrentEncounter(null);\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            pushLogItem({\n                                result: \"escaped\",\n                                uuid: v4()\n                            });\n                            if (enemy.powerLevel.gte(player.powerLevel.plus(config.encounters.greaterLevelScale))) {\n                                player.gainPower(player.powerLevel);\n                                pushLogItem(wrapLogItem({\n                                    result: \"gainedPower\",\n                                    value: player.powerLevel,\n                                }));\n                            }\n                            break;\n                        case \"fighting\" : {\n                            if (getGlobalState().currentEncounter.pendingActions.length) {\n                                const nextAction = getGlobalState().currentEncounter.pendingActions.shift();\n                                applyAction(nextAction);\n                                setActionLog([...getGlobalState().actionLog]);\n                            } else {\n                                setCurrentAction(Actions[changeCurrentAction(\"fleeing\")]);\n                            }\n                            break;\n                        }\n                        case \"looting\":\n                            const lootRoll = Math.floor(rng.double() * 666);\n                            if (lootRoll <= getGlobalState().currentEncounter.encounterLevel) {\n\n                            }\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            break;\n                        case \"recovering\": {\n                            const player = getCharacter(0);\n                            if (player.currentHp.lt(player.maximumHp)) {\n                                const amountToHeal = player.currentHp.plus(player.healing).gt(player.maximumHp) ?\n                                    player.maximumHp.minus(player.currentHp) : player.currentHp.plus(player.healing);\n                                player.currentHp = player.currentHp.plus(amountToHeal);\n                                pushLogItem({\n                                    target: player.id,\n                                    value: amountToHeal,\n                                    result: \"healed\",\n                                    uuid: v4()\n                                })\n                            }\n                            if (player.currentHp.gte(player.maximumHp)) {\n                                setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            }\n                            break;\n                        }\n                        case \"reincarnating\":\n                            setCurrentEncounter();\n                            setCurrentAction(Actions[changeCurrentAction(\"exploring\")]);\n                            setActionLog([]);\n                            getGlobalState().actionLog = [];\n                            break;\n                        default:\n                            throw new Error(`Action ${getGlobalState().currentAction} not supported.`);\n                    }\n                }\n\n                setDisplayedTime(accruedTime.current);\n                const passedTime = timestamp - lastTime;\n                const adjustedTime = passedTime * (manualSpeedUpActive.current ? getManualSpeedMultiplier() : 1);\n                accruedTime.current = Math.min(accruedTime.current + adjustedTime, _.get(getGlobalState(), Actions[getGlobalState().currentAction].duration));\n            }\n            lastTime = timestamp;\n            requestAnimationFrame(tick);\n            setActionLog([...getGlobalState().actionLog]);\n        }\n\n        requestAnimationFrame(tick)\n    }, []);\n\n    return (\n        <MemoryRouter initialEntries={[\n            getGlobalState().currentAction === \"reincarnating\" ? \"/reincarnatin\" : (\n                getGlobalState().currentAction === \"adventuring\" ? \"/adventuring\" : \"/\")\n        ]} basename=\"%PUBLIC_URL%\">\n            <Switch>\n                <Route path=\"/\" exact>\n                    <SplashPage/>\n                </Route>\n                <Route path=\"/reincarnating\" exact>\n                    <ReincarnationSelectionPage reincarnate={(monster, attributes) => {\n                        reincarnateAs(monster, attributes);\n                        setCurrentAction(getGlobalState().currentAction);\n                        unpause();\n                        setPaused(false);\n                        accruedTime.current = 10000000;\n                    }}/>\n                </Route>\n                <Route path=\"/adventuring\" exact>\n                    <AdventuringPage player={player.current}\n                                     paused={paused}\n                                     togglePause={(newValue) => setPaused(newValue)}\n                                     setNextAction={newAction => setNextAction(newAction)}\n                                     actionTime={displayedTime}\n                                     currentEncounter={currentEncounter}\n                                     startManualSpeedup={() => {\n                                         manualSpeedUpActive.current = config.manualSpeedup.enabled;\n                                     }}\n                                     stopManualSpeedup={() => {\n                                         manualSpeedUpActive.current = false\n                                     }}\n                                     currentAction={currentAction}\n                                     nextAction={nextAction}\n                                     actionLog={actionLog}\n                    />\n                </Route>\n            </Switch>\n            {debugUiEnabled && <DebugUi/>}\n        </MemoryRouter>\n    );\n}\n\nexport default App;\n\nfunction wrapLogItem(item) {\n    return {\n        uuid: v4(),\n        ...item\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}